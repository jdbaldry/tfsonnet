{
  aws:: {
    // aws_accessanalyzer_analyzer - https://www.terraform.io/docs/providers/aws/r/accessanalyzer_analyzer.html
    aws_accessanalyzer_analyzer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param analyzer_name (required)
      // @param tags (optional)
      // @param type (optional)
      new(rname, analyzer_name, tags=null, type=null):: {
        rname:: rname,
        analyzer_name: analyzer_name,
        [if tags != null then 'tags']: tags,
        [if type != null then 'type']: type,
        arn:: '${aws_accessanalyzer_analyzer.%s.arn}' % rname,
        id:: '${aws_accessanalyzer_analyzer.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_acm_certificate - https://www.terraform.io/docs/providers/aws/r/acm_certificate.html
    aws_acm_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_authority_arn (optional)
      // @param certificate_body (optional)
      // @param certificate_chain (optional)
      // @param private_key (optional)
      // @param tags (optional)
      new(rname, certificate_authority_arn=null, certificate_body=null, certificate_chain=null, private_key=null, tags=null):: {
        rname:: rname,
        [if certificate_authority_arn != null then 'certificate_authority_arn']: certificate_authority_arn,
        [if certificate_body != null then 'certificate_body']: certificate_body,
        [if certificate_chain != null then 'certificate_chain']: certificate_chain,
        [if private_key != null then 'private_key']: private_key,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_acm_certificate.%s.arn}' % rname,
        domain_name:: '${aws_acm_certificate.%s.domain_name}' % rname,
        domain_validation_options:: '${aws_acm_certificate.%s.domain_validation_options}' % rname,
        id:: '${aws_acm_certificate.%s.id}' % rname,
        subject_alternative_names:: '${aws_acm_certificate.%s.subject_alternative_names}' % rname,
        validation_emails:: '${aws_acm_certificate.%s.validation_emails}' % rname,
        validation_method:: '${aws_acm_certificate.%s.validation_method}' % rname,
        options:: {},
      },
      with_domain_name(domain_name):: {
        domain_name::: domain_name,
      },
      with_id(id):: {
        id::: id,
      },
      with_subject_alternative_names(subject_alternative_names):: {
        subject_alternative_names::: subject_alternative_names,
      },
      with_validation_method(validation_method):: {
        validation_method::: validation_method,
      },
      with_options(options):: self + {
        options: options,
      },
      options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param certificate_transparency_logging_preference (optional)
        new(rname, certificate_transparency_logging_preference=null):: {
          rname:: rname,
          [if certificate_transparency_logging_preference != null then 'certificate_transparency_logging_preference']: certificate_transparency_logging_preference,
        },
      },
    },
    // aws_acm_certificate_validation - https://www.terraform.io/docs/providers/aws/r/acm_certificate_validation.html
    aws_acm_certificate_validation:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_arn (required)
      // @param validation_record_fqdns (optional)
      new(rname, certificate_arn, validation_record_fqdns=null):: {
        rname:: rname,
        certificate_arn: certificate_arn,
        [if validation_record_fqdns != null then 'validation_record_fqdns']: validation_record_fqdns,
        id:: '${aws_acm_certificate_validation.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_acmpca_certificate_authority - https://www.terraform.io/docs/providers/aws/r/acmpca_certificate_authority.html
    aws_acmpca_certificate_authority:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enabled (optional)
      // @param permanent_deletion_time_in_days (optional)
      // @param tags (optional)
      // @param type (optional)
      // @param certificate_authority_configuration (required)
      new(rname, certificate_authority_configuration, enabled=null, permanent_deletion_time_in_days=null, tags=null, type=null):: {
        rname:: rname,
        [if enabled != null then 'enabled']: enabled,
        [if permanent_deletion_time_in_days != null then 'permanent_deletion_time_in_days']: permanent_deletion_time_in_days,
        [if tags != null then 'tags']: tags,
        [if type != null then 'type']: type,
        arn:: '${aws_acmpca_certificate_authority.%s.arn}' % rname,
        certificate:: '${aws_acmpca_certificate_authority.%s.certificate}' % rname,
        certificate_chain:: '${aws_acmpca_certificate_authority.%s.certificate_chain}' % rname,
        certificate_signing_request:: '${aws_acmpca_certificate_authority.%s.certificate_signing_request}' % rname,
        id:: '${aws_acmpca_certificate_authority.%s.id}' % rname,
        not_after:: '${aws_acmpca_certificate_authority.%s.not_after}' % rname,
        not_before:: '${aws_acmpca_certificate_authority.%s.not_before}' % rname,
        serial:: '${aws_acmpca_certificate_authority.%s.serial}' % rname,
        status:: '${aws_acmpca_certificate_authority.%s.status}' % rname,
        certificate_authority_configuration: certificate_authority_configuration,
        revocation_configuration:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      certificate_authority_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key_algorithm (required)
        // @param signing_algorithm (required)
        // @param subject (required)
        new(rname, key_algorithm, signing_algorithm, subject):: {
          rname:: rname,
          key_algorithm: key_algorithm,
          signing_algorithm: signing_algorithm,
          subject: subject,
        },
        subject:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param common_name (optional)
          // @param country (optional)
          // @param distinguished_name_qualifier (optional)
          // @param generation_qualifier (optional)
          // @param given_name (optional)
          // @param initials (optional)
          // @param locality (optional)
          // @param organization (optional)
          // @param organizational_unit (optional)
          // @param pseudonym (optional)
          // @param state (optional)
          // @param surname (optional)
          // @param title (optional)
          new(rname, common_name=null, country=null, distinguished_name_qualifier=null, generation_qualifier=null, given_name=null, initials=null, locality=null, organization=null, organizational_unit=null, pseudonym=null, state=null, surname=null, title=null):: {
            rname:: rname,
            [if common_name != null then 'common_name']: common_name,
            [if country != null then 'country']: country,
            [if distinguished_name_qualifier != null then 'distinguished_name_qualifier']: distinguished_name_qualifier,
            [if generation_qualifier != null then 'generation_qualifier']: generation_qualifier,
            [if given_name != null then 'given_name']: given_name,
            [if initials != null then 'initials']: initials,
            [if locality != null then 'locality']: locality,
            [if organization != null then 'organization']: organization,
            [if organizational_unit != null then 'organizational_unit']: organizational_unit,
            [if pseudonym != null then 'pseudonym']: pseudonym,
            [if state != null then 'state']: state,
            [if surname != null then 'surname']: surname,
            [if title != null then 'title']: title,
          },
        },
      },
      with_revocation_configuration(revocation_configuration):: self + {
        revocation_configuration: revocation_configuration,
      },
      revocation_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          crl_configuration:: {},
        },
        with_crl_configuration(crl_configuration):: self + {
          crl_configuration: crl_configuration,
        },
        crl_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param expiration_in_days (required)
          // @param custom_cname (optional)
          // @param enabled (optional)
          // @param s3_bucket_name (optional)
          new(rname, expiration_in_days, custom_cname=null, enabled=null, s3_bucket_name=null):: {
            rname:: rname,
            expiration_in_days: expiration_in_days,
            [if custom_cname != null then 'custom_cname']: custom_cname,
            [if enabled != null then 'enabled']: enabled,
            [if s3_bucket_name != null then 's3_bucket_name']: s3_bucket_name,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_alb - https://www.terraform.io/docs/providers/aws/r/alb.html
    aws_alb:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enable_cross_zone_load_balancing (optional)
      // @param enable_deletion_protection (optional)
      // @param enable_http2 (optional)
      // @param idle_timeout (optional)
      // @param load_balancer_type (optional)
      // @param name_prefix (optional)
      // @param tags (optional)
      new(rname, enable_cross_zone_load_balancing=null, enable_deletion_protection=null, enable_http2=null, idle_timeout=null, load_balancer_type=null, name_prefix=null, tags=null):: {
        rname:: rname,
        [if enable_cross_zone_load_balancing != null then 'enable_cross_zone_load_balancing']: enable_cross_zone_load_balancing,
        [if enable_deletion_protection != null then 'enable_deletion_protection']: enable_deletion_protection,
        [if enable_http2 != null then 'enable_http2']: enable_http2,
        [if idle_timeout != null then 'idle_timeout']: idle_timeout,
        [if load_balancer_type != null then 'load_balancer_type']: load_balancer_type,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_alb.%s.arn}' % rname,
        arn_suffix:: '${aws_alb.%s.arn_suffix}' % rname,
        dns_name:: '${aws_alb.%s.dns_name}' % rname,
        id:: '${aws_alb.%s.id}' % rname,
        internal:: '${aws_alb.%s.internal}' % rname,
        ip_address_type:: '${aws_alb.%s.ip_address_type}' % rname,
        name:: '${aws_alb.%s.name}' % rname,
        security_groups:: '${aws_alb.%s.security_groups}' % rname,
        subnets:: '${aws_alb.%s.subnets}' % rname,
        vpc_id:: '${aws_alb.%s.vpc_id}' % rname,
        zone_id:: '${aws_alb.%s.zone_id}' % rname,
        access_logs:: {},
        subnet_mapping:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_internal(internal):: {
        internal::: internal,
      },
      with_ip_address_type(ip_address_type):: {
        ip_address_type::: ip_address_type,
      },
      with_name(name):: {
        name::: name,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_subnets(subnets):: {
        subnets::: subnets,
      },
      with_access_logs(access_logs):: self + {
        access_logs: access_logs,
      },
      access_logs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        // @param enabled (optional)
        // @param prefix (optional)
        new(rname, bucket, enabled=null, prefix=null):: {
          rname:: rname,
          bucket: bucket,
          [if enabled != null then 'enabled']: enabled,
          [if prefix != null then 'prefix']: prefix,
        },
      },
      with_subnet_mapping(subnet_mapping):: self + {
        subnet_mapping: subnet_mapping,
      },
      subnet_mapping:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnet_id (required)
        // @param allocation_id (optional)
        new(rname, subnet_id, allocation_id=null):: {
          rname:: rname,
          subnet_id: subnet_id,
          [if allocation_id != null then 'allocation_id']: allocation_id,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_alb_listener - https://www.terraform.io/docs/providers/aws/r/alb_listener.html
    aws_alb_listener:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param load_balancer_arn (required)
      // @param port (required)
      // @param certificate_arn (optional)
      // @param protocol (optional)
      // @param default_action (required)
      new(rname, load_balancer_arn, port, default_action, certificate_arn=null, protocol=null):: {
        rname:: rname,
        load_balancer_arn: load_balancer_arn,
        port: port,
        [if certificate_arn != null then 'certificate_arn']: certificate_arn,
        [if protocol != null then 'protocol']: protocol,
        arn:: '${aws_alb_listener.%s.arn}' % rname,
        id:: '${aws_alb_listener.%s.id}' % rname,
        ssl_policy:: '${aws_alb_listener.%s.ssl_policy}' % rname,
        default_action: default_action,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ssl_policy(ssl_policy):: {
        ssl_policy::: ssl_policy,
      },
      default_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param target_group_arn (optional)
        new(rname, type, target_group_arn=null):: {
          rname:: rname,
          type: type,
          [if target_group_arn != null then 'target_group_arn']: target_group_arn,
          order:: '${aws_alb_listener.%s.default_action.order}' % rname,
          authenticate_cognito:: {},
          authenticate_oidc:: {},
          fixed_response:: {},
          redirect:: {},
        },
        with_order(order):: {
          order::: order,
        },
        with_authenticate_cognito(authenticate_cognito):: self + {
          authenticate_cognito: authenticate_cognito,
        },
        authenticate_cognito:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param user_pool_arn (required)
          // @param user_pool_client_id (required)
          // @param user_pool_domain (required)
          // @param authentication_request_extra_params (optional)
          new(rname, user_pool_arn, user_pool_client_id, user_pool_domain, authentication_request_extra_params=null):: {
            rname:: rname,
            user_pool_arn: user_pool_arn,
            user_pool_client_id: user_pool_client_id,
            user_pool_domain: user_pool_domain,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_alb_listener.%s.default_action.authenticate_cognito.on_unauthenticated_request}' % rname,
            scope:: '${aws_alb_listener.%s.default_action.authenticate_cognito.scope}' % rname,
            session_cookie_name:: '${aws_alb_listener.%s.default_action.authenticate_cognito.session_cookie_name}' % rname,
            session_timeout:: '${aws_alb_listener.%s.default_action.authenticate_cognito.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_authenticate_oidc(authenticate_oidc):: self + {
          authenticate_oidc: authenticate_oidc,
        },
        authenticate_oidc:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param authorization_endpoint (required)
          // @param client_id (required)
          // @param client_secret (required)
          // @param issuer (required)
          // @param token_endpoint (required)
          // @param user_info_endpoint (required)
          // @param authentication_request_extra_params (optional)
          new(rname, authorization_endpoint, client_id, client_secret, issuer, token_endpoint, user_info_endpoint, authentication_request_extra_params=null):: {
            rname:: rname,
            authorization_endpoint: authorization_endpoint,
            client_id: client_id,
            client_secret: client_secret,
            issuer: issuer,
            token_endpoint: token_endpoint,
            user_info_endpoint: user_info_endpoint,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_alb_listener.%s.default_action.authenticate_oidc.on_unauthenticated_request}' % rname,
            scope:: '${aws_alb_listener.%s.default_action.authenticate_oidc.scope}' % rname,
            session_cookie_name:: '${aws_alb_listener.%s.default_action.authenticate_oidc.session_cookie_name}' % rname,
            session_timeout:: '${aws_alb_listener.%s.default_action.authenticate_oidc.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_fixed_response(fixed_response):: self + {
          fixed_response: fixed_response,
        },
        fixed_response:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param content_type (required)
          // @param message_body (optional)
          new(rname, content_type, message_body=null):: {
            rname:: rname,
            content_type: content_type,
            [if message_body != null then 'message_body']: message_body,
            status_code:: '${aws_alb_listener.%s.default_action.fixed_response.status_code}' % rname,
          },
          with_status_code(status_code):: {
            status_code::: status_code,
          },
        },
        with_redirect(redirect):: self + {
          redirect: redirect,
        },
        redirect:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status_code (required)
          // @param host (optional)
          // @param path (optional)
          // @param port (optional)
          // @param protocol (optional)
          // @param query (optional)
          new(rname, status_code, host=null, path=null, port=null, protocol=null, query=null):: {
            rname:: rname,
            status_code: status_code,
            [if host != null then 'host']: host,
            [if path != null then 'path']: path,
            [if port != null then 'port']: port,
            [if protocol != null then 'protocol']: protocol,
            [if query != null then 'query']: query,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param read (optional)
        new(rname, read=null):: {
          rname:: rname,
          [if read != null then 'read']: read,
        },
      },
    },
    // aws_alb_listener_certificate - https://www.terraform.io/docs/providers/aws/r/alb_listener_certificate.html
    aws_alb_listener_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_arn (required)
      // @param listener_arn (required)
      new(rname, certificate_arn, listener_arn):: {
        rname:: rname,
        certificate_arn: certificate_arn,
        listener_arn: listener_arn,
        id:: '${aws_alb_listener_certificate.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_alb_listener_rule - https://www.terraform.io/docs/providers/aws/r/alb_listener_rule.html
    aws_alb_listener_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param listener_arn (required)
      // @param action (required)
      // @param condition (required)
      new(rname, listener_arn, action, condition):: {
        rname:: rname,
        listener_arn: listener_arn,
        arn:: '${aws_alb_listener_rule.%s.arn}' % rname,
        id:: '${aws_alb_listener_rule.%s.id}' % rname,
        priority:: '${aws_alb_listener_rule.%s.priority}' % rname,
        action: action,
        condition: condition,
      },
      with_id(id):: {
        id::: id,
      },
      with_priority(priority):: {
        priority::: priority,
      },
      action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param target_group_arn (optional)
        new(rname, type, target_group_arn=null):: {
          rname:: rname,
          type: type,
          [if target_group_arn != null then 'target_group_arn']: target_group_arn,
          order:: '${aws_alb_listener_rule.%s.action.order}' % rname,
          authenticate_cognito:: {},
          authenticate_oidc:: {},
          fixed_response:: {},
          redirect:: {},
        },
        with_order(order):: {
          order::: order,
        },
        with_authenticate_cognito(authenticate_cognito):: self + {
          authenticate_cognito: authenticate_cognito,
        },
        authenticate_cognito:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param user_pool_arn (required)
          // @param user_pool_client_id (required)
          // @param user_pool_domain (required)
          // @param authentication_request_extra_params (optional)
          new(rname, user_pool_arn, user_pool_client_id, user_pool_domain, authentication_request_extra_params=null):: {
            rname:: rname,
            user_pool_arn: user_pool_arn,
            user_pool_client_id: user_pool_client_id,
            user_pool_domain: user_pool_domain,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_alb_listener_rule.%s.action.authenticate_cognito.on_unauthenticated_request}' % rname,
            scope:: '${aws_alb_listener_rule.%s.action.authenticate_cognito.scope}' % rname,
            session_cookie_name:: '${aws_alb_listener_rule.%s.action.authenticate_cognito.session_cookie_name}' % rname,
            session_timeout:: '${aws_alb_listener_rule.%s.action.authenticate_cognito.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_authenticate_oidc(authenticate_oidc):: self + {
          authenticate_oidc: authenticate_oidc,
        },
        authenticate_oidc:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param authorization_endpoint (required)
          // @param client_id (required)
          // @param client_secret (required)
          // @param issuer (required)
          // @param token_endpoint (required)
          // @param user_info_endpoint (required)
          // @param authentication_request_extra_params (optional)
          new(rname, authorization_endpoint, client_id, client_secret, issuer, token_endpoint, user_info_endpoint, authentication_request_extra_params=null):: {
            rname:: rname,
            authorization_endpoint: authorization_endpoint,
            client_id: client_id,
            client_secret: client_secret,
            issuer: issuer,
            token_endpoint: token_endpoint,
            user_info_endpoint: user_info_endpoint,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_alb_listener_rule.%s.action.authenticate_oidc.on_unauthenticated_request}' % rname,
            scope:: '${aws_alb_listener_rule.%s.action.authenticate_oidc.scope}' % rname,
            session_cookie_name:: '${aws_alb_listener_rule.%s.action.authenticate_oidc.session_cookie_name}' % rname,
            session_timeout:: '${aws_alb_listener_rule.%s.action.authenticate_oidc.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_fixed_response(fixed_response):: self + {
          fixed_response: fixed_response,
        },
        fixed_response:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param content_type (required)
          // @param message_body (optional)
          new(rname, content_type, message_body=null):: {
            rname:: rname,
            content_type: content_type,
            [if message_body != null then 'message_body']: message_body,
            status_code:: '${aws_alb_listener_rule.%s.action.fixed_response.status_code}' % rname,
          },
          with_status_code(status_code):: {
            status_code::: status_code,
          },
        },
        with_redirect(redirect):: self + {
          redirect: redirect,
        },
        redirect:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status_code (required)
          // @param host (optional)
          // @param path (optional)
          // @param port (optional)
          // @param protocol (optional)
          // @param query (optional)
          new(rname, status_code, host=null, path=null, port=null, protocol=null, query=null):: {
            rname:: rname,
            status_code: status_code,
            [if host != null then 'host']: host,
            [if path != null then 'path']: path,
            [if port != null then 'port']: port,
            [if protocol != null then 'protocol']: protocol,
            [if query != null then 'query']: query,
          },
        },
      },
      condition:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          field:: '${aws_alb_listener_rule.%s.condition.field}' % rname,
          values:: '${aws_alb_listener_rule.%s.condition.values}' % rname,
          host_header:: {},
          http_header:: {},
          http_request_method:: {},
          path_pattern:: {},
          query_string:: {},
          source_ip:: {},
        },
        with_field(field):: {
          field::: field,
        },
        with_values(values):: {
          values::: values,
        },
        with_host_header(host_header):: self + {
          host_header: host_header,
        },
        host_header:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            values:: '${aws_alb_listener_rule.%s.condition.host_header.values}' % rname,
          },
          with_values(values):: {
            values::: values,
          },
        },
        with_http_header(http_header):: self + {
          http_header: http_header,
        },
        http_header:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param http_header_name (required)
          // @param values (required)
          new(rname, http_header_name, values):: {
            rname:: rname,
            http_header_name: http_header_name,
            values: values,
          },
        },
        with_http_request_method(http_request_method):: self + {
          http_request_method: http_request_method,
        },
        http_request_method:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param values (required)
          new(rname, values):: {
            rname:: rname,
            values: values,
          },
        },
        with_path_pattern(path_pattern):: self + {
          path_pattern: path_pattern,
        },
        path_pattern:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            values:: '${aws_alb_listener_rule.%s.condition.path_pattern.values}' % rname,
          },
          with_values(values):: {
            values::: values,
          },
        },
        with_query_string(query_string):: self + {
          query_string: query_string,
        },
        query_string:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param value (required)
          // @param key (optional)
          new(rname, value, key=null):: {
            rname:: rname,
            value: value,
            [if key != null then 'key']: key,
          },
        },
        with_source_ip(source_ip):: self + {
          source_ip: source_ip,
        },
        source_ip:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param values (required)
          new(rname, values):: {
            rname:: rname,
            values: values,
          },
        },
      },
    },
    // aws_alb_target_group - https://www.terraform.io/docs/providers/aws/r/alb_target_group.html
    aws_alb_target_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deregistration_delay (optional)
      // @param lambda_multi_value_headers_enabled (optional)
      // @param name_prefix (optional)
      // @param port (optional)
      // @param protocol (optional)
      // @param proxy_protocol_v2 (optional)
      // @param slow_start (optional)
      // @param tags (optional)
      // @param target_type (optional)
      // @param vpc_id (optional)
      new(rname, deregistration_delay=null, lambda_multi_value_headers_enabled=null, name_prefix=null, port=null, protocol=null, proxy_protocol_v2=null, slow_start=null, tags=null, target_type=null, vpc_id=null):: {
        rname:: rname,
        [if deregistration_delay != null then 'deregistration_delay']: deregistration_delay,
        [if lambda_multi_value_headers_enabled != null then 'lambda_multi_value_headers_enabled']: lambda_multi_value_headers_enabled,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if port != null then 'port']: port,
        [if protocol != null then 'protocol']: protocol,
        [if proxy_protocol_v2 != null then 'proxy_protocol_v2']: proxy_protocol_v2,
        [if slow_start != null then 'slow_start']: slow_start,
        [if tags != null then 'tags']: tags,
        [if target_type != null then 'target_type']: target_type,
        [if vpc_id != null then 'vpc_id']: vpc_id,
        arn:: '${aws_alb_target_group.%s.arn}' % rname,
        arn_suffix:: '${aws_alb_target_group.%s.arn_suffix}' % rname,
        id:: '${aws_alb_target_group.%s.id}' % rname,
        load_balancing_algorithm_type:: '${aws_alb_target_group.%s.load_balancing_algorithm_type}' % rname,
        name:: '${aws_alb_target_group.%s.name}' % rname,
        health_check:: {},
        stickiness:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_load_balancing_algorithm_type(load_balancing_algorithm_type):: {
        load_balancing_algorithm_type::: load_balancing_algorithm_type,
      },
      with_name(name):: {
        name::: name,
      },
      with_health_check(health_check):: self + {
        health_check: health_check,
      },
      health_check:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        // @param healthy_threshold (optional)
        // @param interval (optional)
        // @param port (optional)
        // @param protocol (optional)
        // @param unhealthy_threshold (optional)
        new(rname, enabled=null, healthy_threshold=null, interval=null, port=null, protocol=null, unhealthy_threshold=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
          [if healthy_threshold != null then 'healthy_threshold']: healthy_threshold,
          [if interval != null then 'interval']: interval,
          [if port != null then 'port']: port,
          [if protocol != null then 'protocol']: protocol,
          [if unhealthy_threshold != null then 'unhealthy_threshold']: unhealthy_threshold,
          matcher:: '${aws_alb_target_group.%s.health_check.matcher}' % rname,
          path:: '${aws_alb_target_group.%s.health_check.path}' % rname,
          timeout:: '${aws_alb_target_group.%s.health_check.timeout}' % rname,
        },
        with_matcher(matcher):: {
          matcher::: matcher,
        },
        with_path(path):: {
          path::: path,
        },
        with_timeout(timeout):: {
          timeout::: timeout,
        },
      },
      with_stickiness(stickiness):: self + {
        stickiness: stickiness,
      },
      stickiness:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param cookie_duration (optional)
        // @param enabled (optional)
        new(rname, type, cookie_duration=null, enabled=null):: {
          rname:: rname,
          type: type,
          [if cookie_duration != null then 'cookie_duration']: cookie_duration,
          [if enabled != null then 'enabled']: enabled,
        },
      },
    },
    // aws_alb_target_group_attachment - https://www.terraform.io/docs/providers/aws/r/alb_target_group_attachment.html
    aws_alb_target_group_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param target_group_arn (required)
      // @param target_id (required)
      // @param availability_zone (optional)
      // @param port (optional)
      new(rname, target_group_arn, target_id, availability_zone=null, port=null):: {
        rname:: rname,
        target_group_arn: target_group_arn,
        target_id: target_id,
        [if availability_zone != null then 'availability_zone']: availability_zone,
        [if port != null then 'port']: port,
        id:: '${aws_alb_target_group_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ami - https://www.terraform.io/docs/providers/aws/r/ami.html
    aws_ami:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param architecture (optional)
      // @param description (optional)
      // @param ena_support (optional)
      // @param kernel_id (optional)
      // @param ramdisk_id (optional)
      // @param root_device_name (optional)
      // @param sriov_net_support (optional)
      // @param tags (optional)
      // @param virtualization_type (optional)
      new(rname, name, architecture=null, description=null, ena_support=null, kernel_id=null, ramdisk_id=null, root_device_name=null, sriov_net_support=null, tags=null, virtualization_type=null):: {
        rname:: rname,
        name: name,
        [if architecture != null then 'architecture']: architecture,
        [if description != null then 'description']: description,
        [if ena_support != null then 'ena_support']: ena_support,
        [if kernel_id != null then 'kernel_id']: kernel_id,
        [if ramdisk_id != null then 'ramdisk_id']: ramdisk_id,
        [if root_device_name != null then 'root_device_name']: root_device_name,
        [if sriov_net_support != null then 'sriov_net_support']: sriov_net_support,
        [if tags != null then 'tags']: tags,
        [if virtualization_type != null then 'virtualization_type']: virtualization_type,
        id:: '${aws_ami.%s.id}' % rname,
        image_location:: '${aws_ami.%s.image_location}' % rname,
        manage_ebs_snapshots:: '${aws_ami.%s.manage_ebs_snapshots}' % rname,
        root_snapshot_id:: '${aws_ami.%s.root_snapshot_id}' % rname,
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_image_location(image_location):: {
        image_location::: image_location,
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param delete_on_termination (optional)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param snapshot_id (optional)
        // @param volume_type (optional)
        new(rname, device_name, delete_on_termination=null, encrypted=null, iops=null, snapshot_id=null, volume_type=null):: {
          rname:: rname,
          device_name: device_name,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if snapshot_id != null then 'snapshot_id']: snapshot_id,
          [if volume_type != null then 'volume_type']: volume_type,
          volume_size:: '${aws_ami.%s.ebs_block_device.volume_size}' % rname,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param virtual_name (required)
        new(rname, device_name, virtual_name):: {
          rname:: rname,
          device_name: device_name,
          virtual_name: virtual_name,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_ami_copy - https://www.terraform.io/docs/providers/aws/r/ami_copy.html
    aws_ami_copy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param source_ami_id (required)
      // @param source_ami_region (required)
      // @param description (optional)
      // @param encrypted (optional)
      // @param tags (optional)
      new(rname, name, source_ami_id, source_ami_region, description=null, encrypted=null, tags=null):: {
        rname:: rname,
        name: name,
        source_ami_id: source_ami_id,
        source_ami_region: source_ami_region,
        [if description != null then 'description']: description,
        [if encrypted != null then 'encrypted']: encrypted,
        [if tags != null then 'tags']: tags,
        architecture:: '${aws_ami_copy.%s.architecture}' % rname,
        ena_support:: '${aws_ami_copy.%s.ena_support}' % rname,
        id:: '${aws_ami_copy.%s.id}' % rname,
        image_location:: '${aws_ami_copy.%s.image_location}' % rname,
        kernel_id:: '${aws_ami_copy.%s.kernel_id}' % rname,
        kms_key_id:: '${aws_ami_copy.%s.kms_key_id}' % rname,
        manage_ebs_snapshots:: '${aws_ami_copy.%s.manage_ebs_snapshots}' % rname,
        ramdisk_id:: '${aws_ami_copy.%s.ramdisk_id}' % rname,
        root_device_name:: '${aws_ami_copy.%s.root_device_name}' % rname,
        root_snapshot_id:: '${aws_ami_copy.%s.root_snapshot_id}' % rname,
        sriov_net_support:: '${aws_ami_copy.%s.sriov_net_support}' % rname,
        virtualization_type:: '${aws_ami_copy.%s.virtualization_type}' % rname,
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          delete_on_termination:: '${aws_ami_copy.%s.ebs_block_device.delete_on_termination}' % rname,
          device_name:: '${aws_ami_copy.%s.ebs_block_device.device_name}' % rname,
          encrypted:: '${aws_ami_copy.%s.ebs_block_device.encrypted}' % rname,
          iops:: '${aws_ami_copy.%s.ebs_block_device.iops}' % rname,
          snapshot_id:: '${aws_ami_copy.%s.ebs_block_device.snapshot_id}' % rname,
          volume_size:: '${aws_ami_copy.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_ami_copy.%s.ebs_block_device.volume_type}' % rname,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          device_name:: '${aws_ami_copy.%s.ephemeral_block_device.device_name}' % rname,
          virtual_name:: '${aws_ami_copy.%s.ephemeral_block_device.virtual_name}' % rname,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_ami_from_instance - https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html
    aws_ami_from_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param source_instance_id (required)
      // @param description (optional)
      // @param snapshot_without_reboot (optional)
      // @param tags (optional)
      new(rname, name, source_instance_id, description=null, snapshot_without_reboot=null, tags=null):: {
        rname:: rname,
        name: name,
        source_instance_id: source_instance_id,
        [if description != null then 'description']: description,
        [if snapshot_without_reboot != null then 'snapshot_without_reboot']: snapshot_without_reboot,
        [if tags != null then 'tags']: tags,
        architecture:: '${aws_ami_from_instance.%s.architecture}' % rname,
        ena_support:: '${aws_ami_from_instance.%s.ena_support}' % rname,
        id:: '${aws_ami_from_instance.%s.id}' % rname,
        image_location:: '${aws_ami_from_instance.%s.image_location}' % rname,
        kernel_id:: '${aws_ami_from_instance.%s.kernel_id}' % rname,
        manage_ebs_snapshots:: '${aws_ami_from_instance.%s.manage_ebs_snapshots}' % rname,
        ramdisk_id:: '${aws_ami_from_instance.%s.ramdisk_id}' % rname,
        root_device_name:: '${aws_ami_from_instance.%s.root_device_name}' % rname,
        root_snapshot_id:: '${aws_ami_from_instance.%s.root_snapshot_id}' % rname,
        sriov_net_support:: '${aws_ami_from_instance.%s.sriov_net_support}' % rname,
        virtualization_type:: '${aws_ami_from_instance.%s.virtualization_type}' % rname,
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          delete_on_termination:: '${aws_ami_from_instance.%s.ebs_block_device.delete_on_termination}' % rname,
          device_name:: '${aws_ami_from_instance.%s.ebs_block_device.device_name}' % rname,
          encrypted:: '${aws_ami_from_instance.%s.ebs_block_device.encrypted}' % rname,
          iops:: '${aws_ami_from_instance.%s.ebs_block_device.iops}' % rname,
          snapshot_id:: '${aws_ami_from_instance.%s.ebs_block_device.snapshot_id}' % rname,
          volume_size:: '${aws_ami_from_instance.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_ami_from_instance.%s.ebs_block_device.volume_type}' % rname,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          device_name:: '${aws_ami_from_instance.%s.ephemeral_block_device.device_name}' % rname,
          virtual_name:: '${aws_ami_from_instance.%s.ephemeral_block_device.virtual_name}' % rname,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_ami_launch_permission - https://www.terraform.io/docs/providers/aws/r/ami_launch_permission.html
    aws_ami_launch_permission:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param account_id (required)
      // @param image_id (required)
      new(rname, account_id, image_id):: {
        rname:: rname,
        account_id: account_id,
        image_id: image_id,
        id:: '${aws_ami_launch_permission.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_account - https://www.terraform.io/docs/providers/aws/r/api_gateway_account.html
    aws_api_gateway_account:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cloudwatch_role_arn (optional)
      new(rname, cloudwatch_role_arn=null):: {
        rname:: rname,
        [if cloudwatch_role_arn != null then 'cloudwatch_role_arn']: cloudwatch_role_arn,
        id:: '${aws_api_gateway_account.%s.id}' % rname,
        throttle_settings:: '${aws_api_gateway_account.%s.throttle_settings}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_api_key - https://www.terraform.io/docs/providers/aws/r/api_gateway_api_key.html
    aws_api_gateway_api_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param enabled (optional)
      // @param tags (optional)
      new(rname, name, description=null, enabled=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if enabled != null then 'enabled']: enabled,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_api_key.%s.arn}' % rname,
        created_date:: '${aws_api_gateway_api_key.%s.created_date}' % rname,
        id:: '${aws_api_gateway_api_key.%s.id}' % rname,
        last_updated_date:: '${aws_api_gateway_api_key.%s.last_updated_date}' % rname,
        value:: '${aws_api_gateway_api_key.%s.value}' % rname,
        stage_key:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_value(value):: {
        value::: value,
      },
      with_stage_key(stage_key):: self + {
        stage_key: stage_key,
      },
      stage_key:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param rest_api_id (required)
        // @param stage_name (required)
        new(rname, rest_api_id, stage_name):: {
          rname:: rname,
          rest_api_id: rest_api_id,
          stage_name: stage_name,
        },
      },
    },
    // aws_api_gateway_authorizer - https://www.terraform.io/docs/providers/aws/r/api_gateway_authorizer.html
    aws_api_gateway_authorizer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param rest_api_id (required)
      // @param authorizer_credentials (optional)
      // @param authorizer_result_ttl_in_seconds (optional)
      // @param authorizer_uri (optional)
      // @param identity_source (optional)
      // @param identity_validation_expression (optional)
      // @param provider_arns (optional)
      // @param type (optional)
      new(rname, name, rest_api_id, authorizer_credentials=null, authorizer_result_ttl_in_seconds=null, authorizer_uri=null, identity_source=null, identity_validation_expression=null, provider_arns=null, type=null):: {
        rname:: rname,
        name: name,
        rest_api_id: rest_api_id,
        [if authorizer_credentials != null then 'authorizer_credentials']: authorizer_credentials,
        [if authorizer_result_ttl_in_seconds != null then 'authorizer_result_ttl_in_seconds']: authorizer_result_ttl_in_seconds,
        [if authorizer_uri != null then 'authorizer_uri']: authorizer_uri,
        [if identity_source != null then 'identity_source']: identity_source,
        [if identity_validation_expression != null then 'identity_validation_expression']: identity_validation_expression,
        [if provider_arns != null then 'provider_arns']: provider_arns,
        [if type != null then 'type']: type,
        id:: '${aws_api_gateway_authorizer.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_base_path_mapping - https://www.terraform.io/docs/providers/aws/r/api_gateway_base_path_mapping.html
    aws_api_gateway_base_path_mapping:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_id (required)
      // @param domain_name (required)
      // @param base_path (optional)
      // @param stage_name (optional)
      new(rname, api_id, domain_name, base_path=null, stage_name=null):: {
        rname:: rname,
        api_id: api_id,
        domain_name: domain_name,
        [if base_path != null then 'base_path']: base_path,
        [if stage_name != null then 'stage_name']: stage_name,
        id:: '${aws_api_gateway_base_path_mapping.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_client_certificate - https://www.terraform.io/docs/providers/aws/r/api_gateway_client_certificate.html
    aws_api_gateway_client_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param tags (optional)
      new(rname, description=null, tags=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_client_certificate.%s.arn}' % rname,
        created_date:: '${aws_api_gateway_client_certificate.%s.created_date}' % rname,
        expiration_date:: '${aws_api_gateway_client_certificate.%s.expiration_date}' % rname,
        id:: '${aws_api_gateway_client_certificate.%s.id}' % rname,
        pem_encoded_certificate:: '${aws_api_gateway_client_certificate.%s.pem_encoded_certificate}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_deployment - https://www.terraform.io/docs/providers/aws/r/api_gateway_deployment.html
    aws_api_gateway_deployment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param rest_api_id (required)
      // @param description (optional)
      // @param stage_description (optional)
      // @param stage_name (optional)
      // @param variables (optional)
      new(rname, rest_api_id, description=null, stage_description=null, stage_name=null, variables=null):: {
        rname:: rname,
        rest_api_id: rest_api_id,
        [if description != null then 'description']: description,
        [if stage_description != null then 'stage_description']: stage_description,
        [if stage_name != null then 'stage_name']: stage_name,
        [if variables != null then 'variables']: variables,
        created_date:: '${aws_api_gateway_deployment.%s.created_date}' % rname,
        execution_arn:: '${aws_api_gateway_deployment.%s.execution_arn}' % rname,
        id:: '${aws_api_gateway_deployment.%s.id}' % rname,
        invoke_url:: '${aws_api_gateway_deployment.%s.invoke_url}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_documentation_part - https://www.terraform.io/docs/providers/aws/r/api_gateway_documentation_part.html
    aws_api_gateway_documentation_part:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param properties (required)
      // @param rest_api_id (required)
      // @param location (required)
      new(rname, properties, rest_api_id, location):: {
        rname:: rname,
        properties: properties,
        rest_api_id: rest_api_id,
        id:: '${aws_api_gateway_documentation_part.%s.id}' % rname,
        location: location,
      },
      with_id(id):: {
        id::: id,
      },
      location:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param method (optional)
        // @param name (optional)
        // @param path (optional)
        // @param status_code (optional)
        new(rname, type, method=null, name=null, path=null, status_code=null):: {
          rname:: rname,
          type: type,
          [if method != null then 'method']: method,
          [if name != null then 'name']: name,
          [if path != null then 'path']: path,
          [if status_code != null then 'status_code']: status_code,
        },
      },
    },
    // aws_api_gateway_documentation_version - https://www.terraform.io/docs/providers/aws/r/api_gateway_documentation_version.html
    aws_api_gateway_documentation_version:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param rest_api_id (required)
      // @param version (required)
      // @param description (optional)
      new(rname, rest_api_id, version, description=null):: {
        rname:: rname,
        rest_api_id: rest_api_id,
        version: version,
        [if description != null then 'description']: description,
        id:: '${aws_api_gateway_documentation_version.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_domain_name - https://www.terraform.io/docs/providers/aws/r/api_gateway_domain_name.html
    aws_api_gateway_domain_name:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain_name (required)
      // @param certificate_arn (optional)
      // @param certificate_body (optional)
      // @param certificate_chain (optional)
      // @param certificate_name (optional)
      // @param certificate_private_key (optional)
      // @param regional_certificate_arn (optional)
      // @param regional_certificate_name (optional)
      // @param tags (optional)
      new(rname, domain_name, certificate_arn=null, certificate_body=null, certificate_chain=null, certificate_name=null, certificate_private_key=null, regional_certificate_arn=null, regional_certificate_name=null, tags=null):: {
        rname:: rname,
        domain_name: domain_name,
        [if certificate_arn != null then 'certificate_arn']: certificate_arn,
        [if certificate_body != null then 'certificate_body']: certificate_body,
        [if certificate_chain != null then 'certificate_chain']: certificate_chain,
        [if certificate_name != null then 'certificate_name']: certificate_name,
        [if certificate_private_key != null then 'certificate_private_key']: certificate_private_key,
        [if regional_certificate_arn != null then 'regional_certificate_arn']: regional_certificate_arn,
        [if regional_certificate_name != null then 'regional_certificate_name']: regional_certificate_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_domain_name.%s.arn}' % rname,
        certificate_upload_date:: '${aws_api_gateway_domain_name.%s.certificate_upload_date}' % rname,
        cloudfront_domain_name:: '${aws_api_gateway_domain_name.%s.cloudfront_domain_name}' % rname,
        cloudfront_zone_id:: '${aws_api_gateway_domain_name.%s.cloudfront_zone_id}' % rname,
        id:: '${aws_api_gateway_domain_name.%s.id}' % rname,
        regional_domain_name:: '${aws_api_gateway_domain_name.%s.regional_domain_name}' % rname,
        regional_zone_id:: '${aws_api_gateway_domain_name.%s.regional_zone_id}' % rname,
        security_policy:: '${aws_api_gateway_domain_name.%s.security_policy}' % rname,
        endpoint_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_security_policy(security_policy):: {
        security_policy::: security_policy,
      },
      with_endpoint_configuration(endpoint_configuration):: self + {
        endpoint_configuration: endpoint_configuration,
      },
      endpoint_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param types (required)
        new(rname, types):: {
          rname:: rname,
          types: types,
        },
      },
    },
    // aws_api_gateway_gateway_response - https://www.terraform.io/docs/providers/aws/r/api_gateway_gateway_response.html
    aws_api_gateway_gateway_response:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param response_type (required)
      // @param rest_api_id (required)
      // @param response_parameters (optional)
      // @param response_templates (optional)
      // @param status_code (optional)
      new(rname, response_type, rest_api_id, response_parameters=null, response_templates=null, status_code=null):: {
        rname:: rname,
        response_type: response_type,
        rest_api_id: rest_api_id,
        [if response_parameters != null then 'response_parameters']: response_parameters,
        [if response_templates != null then 'response_templates']: response_templates,
        [if status_code != null then 'status_code']: status_code,
        id:: '${aws_api_gateway_gateway_response.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_integration - https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html
    aws_api_gateway_integration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param http_method (required)
      // @param resource_id (required)
      // @param rest_api_id (required)
      // @param type (required)
      // @param cache_key_parameters (optional)
      // @param connection_id (optional)
      // @param connection_type (optional)
      // @param content_handling (optional)
      // @param credentials (optional)
      // @param integration_http_method (optional)
      // @param request_parameters (optional)
      // @param request_parameters_in_json (optional)
      // @param request_templates (optional)
      // @param timeout_milliseconds (optional)
      // @param uri (optional)
      new(rname, http_method, resource_id, rest_api_id, type, cache_key_parameters=null, connection_id=null, connection_type=null, content_handling=null, credentials=null, integration_http_method=null, request_parameters=null, request_parameters_in_json=null, request_templates=null, timeout_milliseconds=null, uri=null):: {
        rname:: rname,
        http_method: http_method,
        resource_id: resource_id,
        rest_api_id: rest_api_id,
        type: type,
        [if cache_key_parameters != null then 'cache_key_parameters']: cache_key_parameters,
        [if connection_id != null then 'connection_id']: connection_id,
        [if connection_type != null then 'connection_type']: connection_type,
        [if content_handling != null then 'content_handling']: content_handling,
        [if credentials != null then 'credentials']: credentials,
        [if integration_http_method != null then 'integration_http_method']: integration_http_method,
        [if request_parameters != null then 'request_parameters']: request_parameters,
        [if request_parameters_in_json != null then 'request_parameters_in_json']: request_parameters_in_json,
        [if request_templates != null then 'request_templates']: request_templates,
        [if timeout_milliseconds != null then 'timeout_milliseconds']: timeout_milliseconds,
        [if uri != null then 'uri']: uri,
        cache_namespace:: '${aws_api_gateway_integration.%s.cache_namespace}' % rname,
        id:: '${aws_api_gateway_integration.%s.id}' % rname,
        passthrough_behavior:: '${aws_api_gateway_integration.%s.passthrough_behavior}' % rname,
      },
      with_cache_namespace(cache_namespace):: {
        cache_namespace::: cache_namespace,
      },
      with_id(id):: {
        id::: id,
      },
      with_passthrough_behavior(passthrough_behavior):: {
        passthrough_behavior::: passthrough_behavior,
      },
    },
    // aws_api_gateway_integration_response - https://www.terraform.io/docs/providers/aws/r/api_gateway_integration_response.html
    aws_api_gateway_integration_response:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param http_method (required)
      // @param resource_id (required)
      // @param rest_api_id (required)
      // @param status_code (required)
      // @param content_handling (optional)
      // @param response_parameters (optional)
      // @param response_parameters_in_json (optional)
      // @param response_templates (optional)
      // @param selection_pattern (optional)
      new(rname, http_method, resource_id, rest_api_id, status_code, content_handling=null, response_parameters=null, response_parameters_in_json=null, response_templates=null, selection_pattern=null):: {
        rname:: rname,
        http_method: http_method,
        resource_id: resource_id,
        rest_api_id: rest_api_id,
        status_code: status_code,
        [if content_handling != null then 'content_handling']: content_handling,
        [if response_parameters != null then 'response_parameters']: response_parameters,
        [if response_parameters_in_json != null then 'response_parameters_in_json']: response_parameters_in_json,
        [if response_templates != null then 'response_templates']: response_templates,
        [if selection_pattern != null then 'selection_pattern']: selection_pattern,
        id:: '${aws_api_gateway_integration_response.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_method - https://www.terraform.io/docs/providers/aws/r/api_gateway_method.html
    aws_api_gateway_method:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param authorization (required)
      // @param http_method (required)
      // @param resource_id (required)
      // @param rest_api_id (required)
      // @param api_key_required (optional)
      // @param authorization_scopes (optional)
      // @param authorizer_id (optional)
      // @param request_models (optional)
      // @param request_parameters (optional)
      // @param request_parameters_in_json (optional)
      // @param request_validator_id (optional)
      new(rname, authorization, http_method, resource_id, rest_api_id, api_key_required=null, authorization_scopes=null, authorizer_id=null, request_models=null, request_parameters=null, request_parameters_in_json=null, request_validator_id=null):: {
        rname:: rname,
        authorization: authorization,
        http_method: http_method,
        resource_id: resource_id,
        rest_api_id: rest_api_id,
        [if api_key_required != null then 'api_key_required']: api_key_required,
        [if authorization_scopes != null then 'authorization_scopes']: authorization_scopes,
        [if authorizer_id != null then 'authorizer_id']: authorizer_id,
        [if request_models != null then 'request_models']: request_models,
        [if request_parameters != null then 'request_parameters']: request_parameters,
        [if request_parameters_in_json != null then 'request_parameters_in_json']: request_parameters_in_json,
        [if request_validator_id != null then 'request_validator_id']: request_validator_id,
        id:: '${aws_api_gateway_method.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_method_response - https://www.terraform.io/docs/providers/aws/r/api_gateway_method_response.html
    aws_api_gateway_method_response:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param http_method (required)
      // @param resource_id (required)
      // @param rest_api_id (required)
      // @param status_code (required)
      // @param response_models (optional)
      // @param response_parameters (optional)
      // @param response_parameters_in_json (optional)
      new(rname, http_method, resource_id, rest_api_id, status_code, response_models=null, response_parameters=null, response_parameters_in_json=null):: {
        rname:: rname,
        http_method: http_method,
        resource_id: resource_id,
        rest_api_id: rest_api_id,
        status_code: status_code,
        [if response_models != null then 'response_models']: response_models,
        [if response_parameters != null then 'response_parameters']: response_parameters,
        [if response_parameters_in_json != null then 'response_parameters_in_json']: response_parameters_in_json,
        id:: '${aws_api_gateway_method_response.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_method_settings - https://www.terraform.io/docs/providers/aws/r/api_gateway_method_settings.html
    aws_api_gateway_method_settings:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param method_path (required)
      // @param rest_api_id (required)
      // @param stage_name (required)
      // @param settings (required)
      new(rname, method_path, rest_api_id, stage_name, settings):: {
        rname:: rname,
        method_path: method_path,
        rest_api_id: rest_api_id,
        stage_name: stage_name,
        id:: '${aws_api_gateway_method_settings.%s.id}' % rname,
        settings: settings,
      },
      with_id(id):: {
        id::: id,
      },
      settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cache_data_encrypted (optional)
        // @param cache_ttl_in_seconds (optional)
        // @param caching_enabled (optional)
        // @param data_trace_enabled (optional)
        // @param logging_level (optional)
        // @param metrics_enabled (optional)
        // @param require_authorization_for_cache_control (optional)
        // @param throttling_burst_limit (optional)
        // @param throttling_rate_limit (optional)
        // @param unauthorized_cache_control_header_strategy (optional)
        new(rname, cache_data_encrypted=null, cache_ttl_in_seconds=null, caching_enabled=null, data_trace_enabled=null, logging_level=null, metrics_enabled=null, require_authorization_for_cache_control=null, throttling_burst_limit=null, throttling_rate_limit=null, unauthorized_cache_control_header_strategy=null):: {
          rname:: rname,
          [if cache_data_encrypted != null then 'cache_data_encrypted']: cache_data_encrypted,
          [if cache_ttl_in_seconds != null then 'cache_ttl_in_seconds']: cache_ttl_in_seconds,
          [if caching_enabled != null then 'caching_enabled']: caching_enabled,
          [if data_trace_enabled != null then 'data_trace_enabled']: data_trace_enabled,
          [if logging_level != null then 'logging_level']: logging_level,
          [if metrics_enabled != null then 'metrics_enabled']: metrics_enabled,
          [if require_authorization_for_cache_control != null then 'require_authorization_for_cache_control']: require_authorization_for_cache_control,
          [if throttling_burst_limit != null then 'throttling_burst_limit']: throttling_burst_limit,
          [if throttling_rate_limit != null then 'throttling_rate_limit']: throttling_rate_limit,
          [if unauthorized_cache_control_header_strategy != null then 'unauthorized_cache_control_header_strategy']: unauthorized_cache_control_header_strategy,
        },
      },
    },
    // aws_api_gateway_model - https://www.terraform.io/docs/providers/aws/r/api_gateway_model.html
    aws_api_gateway_model:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param content_type (required)
      // @param name (required)
      // @param rest_api_id (required)
      // @param description (optional)
      // @param schema (optional)
      new(rname, content_type, name, rest_api_id, description=null, schema=null):: {
        rname:: rname,
        content_type: content_type,
        name: name,
        rest_api_id: rest_api_id,
        [if description != null then 'description']: description,
        [if schema != null then 'schema']: schema,
        id:: '${aws_api_gateway_model.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_request_validator - https://www.terraform.io/docs/providers/aws/r/api_gateway_request_validator.html
    aws_api_gateway_request_validator:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param rest_api_id (required)
      // @param validate_request_body (optional)
      // @param validate_request_parameters (optional)
      new(rname, name, rest_api_id, validate_request_body=null, validate_request_parameters=null):: {
        rname:: rname,
        name: name,
        rest_api_id: rest_api_id,
        [if validate_request_body != null then 'validate_request_body']: validate_request_body,
        [if validate_request_parameters != null then 'validate_request_parameters']: validate_request_parameters,
        id:: '${aws_api_gateway_request_validator.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_resource - https://www.terraform.io/docs/providers/aws/r/api_gateway_resource.html
    aws_api_gateway_resource:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param parent_id (required)
      // @param path_part (required)
      // @param rest_api_id (required)
      new(rname, parent_id, path_part, rest_api_id):: {
        rname:: rname,
        parent_id: parent_id,
        path_part: path_part,
        rest_api_id: rest_api_id,
        id:: '${aws_api_gateway_resource.%s.id}' % rname,
        path:: '${aws_api_gateway_resource.%s.path}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_rest_api - https://www.terraform.io/docs/providers/aws/r/api_gateway_rest_api.html
    aws_api_gateway_rest_api:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param api_key_source (optional)
      // @param binary_media_types (optional)
      // @param body (optional)
      // @param description (optional)
      // @param minimum_compression_size (optional)
      // @param policy (optional)
      // @param tags (optional)
      new(rname, name, api_key_source=null, binary_media_types=null, body=null, description=null, minimum_compression_size=null, policy=null, tags=null):: {
        rname:: rname,
        name: name,
        [if api_key_source != null then 'api_key_source']: api_key_source,
        [if binary_media_types != null then 'binary_media_types']: binary_media_types,
        [if body != null then 'body']: body,
        [if description != null then 'description']: description,
        [if minimum_compression_size != null then 'minimum_compression_size']: minimum_compression_size,
        [if policy != null then 'policy']: policy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_rest_api.%s.arn}' % rname,
        created_date:: '${aws_api_gateway_rest_api.%s.created_date}' % rname,
        execution_arn:: '${aws_api_gateway_rest_api.%s.execution_arn}' % rname,
        id:: '${aws_api_gateway_rest_api.%s.id}' % rname,
        root_resource_id:: '${aws_api_gateway_rest_api.%s.root_resource_id}' % rname,
        endpoint_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_endpoint_configuration(endpoint_configuration):: self + {
        endpoint_configuration: endpoint_configuration,
      },
      endpoint_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param types (required)
        // @param vpc_endpoint_ids (optional)
        new(rname, types, vpc_endpoint_ids=null):: {
          rname:: rname,
          types: types,
          [if vpc_endpoint_ids != null then 'vpc_endpoint_ids']: vpc_endpoint_ids,
        },
      },
    },
    // aws_api_gateway_stage - https://www.terraform.io/docs/providers/aws/r/api_gateway_stage.html
    aws_api_gateway_stage:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deployment_id (required)
      // @param rest_api_id (required)
      // @param stage_name (required)
      // @param cache_cluster_enabled (optional)
      // @param cache_cluster_size (optional)
      // @param client_certificate_id (optional)
      // @param description (optional)
      // @param documentation_version (optional)
      // @param tags (optional)
      // @param variables (optional)
      // @param xray_tracing_enabled (optional)
      new(rname, deployment_id, rest_api_id, stage_name, cache_cluster_enabled=null, cache_cluster_size=null, client_certificate_id=null, description=null, documentation_version=null, tags=null, variables=null, xray_tracing_enabled=null):: {
        rname:: rname,
        deployment_id: deployment_id,
        rest_api_id: rest_api_id,
        stage_name: stage_name,
        [if cache_cluster_enabled != null then 'cache_cluster_enabled']: cache_cluster_enabled,
        [if cache_cluster_size != null then 'cache_cluster_size']: cache_cluster_size,
        [if client_certificate_id != null then 'client_certificate_id']: client_certificate_id,
        [if description != null then 'description']: description,
        [if documentation_version != null then 'documentation_version']: documentation_version,
        [if tags != null then 'tags']: tags,
        [if variables != null then 'variables']: variables,
        [if xray_tracing_enabled != null then 'xray_tracing_enabled']: xray_tracing_enabled,
        arn:: '${aws_api_gateway_stage.%s.arn}' % rname,
        execution_arn:: '${aws_api_gateway_stage.%s.execution_arn}' % rname,
        id:: '${aws_api_gateway_stage.%s.id}' % rname,
        invoke_url:: '${aws_api_gateway_stage.%s.invoke_url}' % rname,
        access_log_settings:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_access_log_settings(access_log_settings):: self + {
        access_log_settings: access_log_settings,
      },
      access_log_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param destination_arn (required)
        // @param format (required)
        new(rname, destination_arn, format):: {
          rname:: rname,
          destination_arn: destination_arn,
          format: format,
        },
      },
    },
    // aws_api_gateway_usage_plan - https://www.terraform.io/docs/providers/aws/r/api_gateway_usage_plan.html
    aws_api_gateway_usage_plan:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param product_code (optional)
      // @param tags (optional)
      new(rname, name, description=null, product_code=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if product_code != null then 'product_code']: product_code,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_usage_plan.%s.arn}' % rname,
        id:: '${aws_api_gateway_usage_plan.%s.id}' % rname,
        api_stages:: {},
        quota_settings:: {},
        throttle_settings:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_api_stages(api_stages):: self + {
        api_stages: api_stages,
      },
      api_stages:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param api_id (required)
        // @param stage (required)
        new(rname, api_id, stage):: {
          rname:: rname,
          api_id: api_id,
          stage: stage,
        },
      },
      with_quota_settings(quota_settings):: self + {
        quota_settings: quota_settings,
      },
      quota_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param limit (required)
        // @param period (required)
        // @param offset (optional)
        new(rname, limit, period, offset=null):: {
          rname:: rname,
          limit: limit,
          period: period,
          [if offset != null then 'offset']: offset,
        },
      },
      with_throttle_settings(throttle_settings):: self + {
        throttle_settings: throttle_settings,
      },
      throttle_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param burst_limit (optional)
        // @param rate_limit (optional)
        new(rname, burst_limit=null, rate_limit=null):: {
          rname:: rname,
          [if burst_limit != null then 'burst_limit']: burst_limit,
          [if rate_limit != null then 'rate_limit']: rate_limit,
        },
      },
    },
    // aws_api_gateway_usage_plan_key - https://www.terraform.io/docs/providers/aws/r/api_gateway_usage_plan_key.html
    aws_api_gateway_usage_plan_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param key_id (required)
      // @param key_type (required)
      // @param usage_plan_id (required)
      new(rname, key_id, key_type, usage_plan_id):: {
        rname:: rname,
        key_id: key_id,
        key_type: key_type,
        usage_plan_id: usage_plan_id,
        id:: '${aws_api_gateway_usage_plan_key.%s.id}' % rname,
        name:: '${aws_api_gateway_usage_plan_key.%s.name}' % rname,
        value:: '${aws_api_gateway_usage_plan_key.%s.value}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_api_gateway_vpc_link - https://www.terraform.io/docs/providers/aws/r/api_gateway_vpc_link.html
    aws_api_gateway_vpc_link:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param target_arns (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, target_arns, description=null, tags=null):: {
        rname:: rname,
        name: name,
        target_arns: target_arns,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_api_gateway_vpc_link.%s.arn}' % rname,
        id:: '${aws_api_gateway_vpc_link.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_app_cookie_stickiness_policy - https://www.terraform.io/docs/providers/aws/r/app_cookie_stickiness_policy.html
    aws_app_cookie_stickiness_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cookie_name (required)
      // @param lb_port (required)
      // @param load_balancer (required)
      // @param name (required)
      new(rname, cookie_name, lb_port, load_balancer, name):: {
        rname:: rname,
        cookie_name: cookie_name,
        lb_port: lb_port,
        load_balancer: load_balancer,
        name: name,
        id:: '${aws_app_cookie_stickiness_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_appautoscaling_policy - https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html
    aws_appautoscaling_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param resource_id (required)
      // @param scalable_dimension (required)
      // @param service_namespace (required)
      // @param adjustment_type (optional)
      // @param cooldown (optional)
      // @param metric_aggregation_type (optional)
      // @param min_adjustment_magnitude (optional)
      // @param policy_type (optional)
      new(rname, name, resource_id, scalable_dimension, service_namespace, adjustment_type=null, cooldown=null, metric_aggregation_type=null, min_adjustment_magnitude=null, policy_type=null):: {
        rname:: rname,
        name: name,
        resource_id: resource_id,
        scalable_dimension: scalable_dimension,
        service_namespace: service_namespace,
        [if adjustment_type != null then 'adjustment_type']: adjustment_type,
        [if cooldown != null then 'cooldown']: cooldown,
        [if metric_aggregation_type != null then 'metric_aggregation_type']: metric_aggregation_type,
        [if min_adjustment_magnitude != null then 'min_adjustment_magnitude']: min_adjustment_magnitude,
        [if policy_type != null then 'policy_type']: policy_type,
        arn:: '${aws_appautoscaling_policy.%s.arn}' % rname,
        id:: '${aws_appautoscaling_policy.%s.id}' % rname,
        step_adjustment:: {},
        step_scaling_policy_configuration:: {},
        target_tracking_scaling_policy_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_step_adjustment(step_adjustment):: self + {
        step_adjustment: step_adjustment,
      },
      step_adjustment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param scaling_adjustment (required)
        // @param metric_interval_lower_bound (optional)
        // @param metric_interval_upper_bound (optional)
        new(rname, scaling_adjustment, metric_interval_lower_bound=null, metric_interval_upper_bound=null):: {
          rname:: rname,
          scaling_adjustment: scaling_adjustment,
          [if metric_interval_lower_bound != null then 'metric_interval_lower_bound']: metric_interval_lower_bound,
          [if metric_interval_upper_bound != null then 'metric_interval_upper_bound']: metric_interval_upper_bound,
        },
      },
      with_step_scaling_policy_configuration(step_scaling_policy_configuration):: self + {
        step_scaling_policy_configuration: step_scaling_policy_configuration,
      },
      step_scaling_policy_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param adjustment_type (optional)
        // @param cooldown (optional)
        // @param metric_aggregation_type (optional)
        // @param min_adjustment_magnitude (optional)
        new(rname, adjustment_type=null, cooldown=null, metric_aggregation_type=null, min_adjustment_magnitude=null):: {
          rname:: rname,
          [if adjustment_type != null then 'adjustment_type']: adjustment_type,
          [if cooldown != null then 'cooldown']: cooldown,
          [if metric_aggregation_type != null then 'metric_aggregation_type']: metric_aggregation_type,
          [if min_adjustment_magnitude != null then 'min_adjustment_magnitude']: min_adjustment_magnitude,
          step_adjustment:: {},
        },
        with_step_adjustment(step_adjustment):: self + {
          step_adjustment: step_adjustment,
        },
        step_adjustment:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param scaling_adjustment (required)
          // @param metric_interval_lower_bound (optional)
          // @param metric_interval_upper_bound (optional)
          new(rname, scaling_adjustment, metric_interval_lower_bound=null, metric_interval_upper_bound=null):: {
            rname:: rname,
            scaling_adjustment: scaling_adjustment,
            [if metric_interval_lower_bound != null then 'metric_interval_lower_bound']: metric_interval_lower_bound,
            [if metric_interval_upper_bound != null then 'metric_interval_upper_bound']: metric_interval_upper_bound,
          },
        },
      },
      with_target_tracking_scaling_policy_configuration(target_tracking_scaling_policy_configuration):: self + {
        target_tracking_scaling_policy_configuration: target_tracking_scaling_policy_configuration,
      },
      target_tracking_scaling_policy_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param target_value (required)
        // @param disable_scale_in (optional)
        // @param scale_in_cooldown (optional)
        // @param scale_out_cooldown (optional)
        new(rname, target_value, disable_scale_in=null, scale_in_cooldown=null, scale_out_cooldown=null):: {
          rname:: rname,
          target_value: target_value,
          [if disable_scale_in != null then 'disable_scale_in']: disable_scale_in,
          [if scale_in_cooldown != null then 'scale_in_cooldown']: scale_in_cooldown,
          [if scale_out_cooldown != null then 'scale_out_cooldown']: scale_out_cooldown,
          customized_metric_specification:: {},
          predefined_metric_specification:: {},
        },
        with_customized_metric_specification(customized_metric_specification):: self + {
          customized_metric_specification: customized_metric_specification,
        },
        customized_metric_specification:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param metric_name (required)
          // @param namespace (required)
          // @param statistic (required)
          // @param unit (optional)
          new(rname, metric_name, namespace, statistic, unit=null):: {
            rname:: rname,
            metric_name: metric_name,
            namespace: namespace,
            statistic: statistic,
            [if unit != null then 'unit']: unit,
            dimensions:: {},
          },
          with_dimensions(dimensions):: self + {
            dimensions: dimensions,
          },
          dimensions:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param value (required)
            new(rname, name, value):: {
              rname:: rname,
              name: name,
              value: value,
            },
          },
        },
        with_predefined_metric_specification(predefined_metric_specification):: self + {
          predefined_metric_specification: predefined_metric_specification,
        },
        predefined_metric_specification:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param predefined_metric_type (required)
          // @param resource_label (optional)
          new(rname, predefined_metric_type, resource_label=null):: {
            rname:: rname,
            predefined_metric_type: predefined_metric_type,
            [if resource_label != null then 'resource_label']: resource_label,
          },
        },
      },
    },
    // aws_appautoscaling_scheduled_action - https://www.terraform.io/docs/providers/aws/r/appautoscaling_scheduled_action.html
    aws_appautoscaling_scheduled_action:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param resource_id (required)
      // @param service_namespace (required)
      // @param end_time (optional)
      // @param scalable_dimension (optional)
      // @param schedule (optional)
      // @param start_time (optional)
      new(rname, name, resource_id, service_namespace, end_time=null, scalable_dimension=null, schedule=null, start_time=null):: {
        rname:: rname,
        name: name,
        resource_id: resource_id,
        service_namespace: service_namespace,
        [if end_time != null then 'end_time']: end_time,
        [if scalable_dimension != null then 'scalable_dimension']: scalable_dimension,
        [if schedule != null then 'schedule']: schedule,
        [if start_time != null then 'start_time']: start_time,
        arn:: '${aws_appautoscaling_scheduled_action.%s.arn}' % rname,
        id:: '${aws_appautoscaling_scheduled_action.%s.id}' % rname,
        scalable_target_action:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_scalable_target_action(scalable_target_action):: self + {
        scalable_target_action: scalable_target_action,
      },
      scalable_target_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param max_capacity (optional)
        // @param min_capacity (optional)
        new(rname, max_capacity=null, min_capacity=null):: {
          rname:: rname,
          [if max_capacity != null then 'max_capacity']: max_capacity,
          [if min_capacity != null then 'min_capacity']: min_capacity,
        },
      },
    },
    // aws_appautoscaling_target - https://www.terraform.io/docs/providers/aws/r/appautoscaling_target.html
    aws_appautoscaling_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param max_capacity (required)
      // @param min_capacity (required)
      // @param resource_id (required)
      // @param scalable_dimension (required)
      // @param service_namespace (required)
      new(rname, max_capacity, min_capacity, resource_id, scalable_dimension, service_namespace):: {
        rname:: rname,
        max_capacity: max_capacity,
        min_capacity: min_capacity,
        resource_id: resource_id,
        scalable_dimension: scalable_dimension,
        service_namespace: service_namespace,
        id:: '${aws_appautoscaling_target.%s.id}' % rname,
        role_arn:: '${aws_appautoscaling_target.%s.role_arn}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_role_arn(role_arn):: {
        role_arn::: role_arn,
      },
    },
    // aws_appmesh_mesh - https://www.terraform.io/docs/providers/aws/r/appmesh_mesh.html
    aws_appmesh_mesh:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      new(rname, name, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appmesh_mesh.%s.arn}' % rname,
        created_date:: '${aws_appmesh_mesh.%s.created_date}' % rname,
        id:: '${aws_appmesh_mesh.%s.id}' % rname,
        last_updated_date:: '${aws_appmesh_mesh.%s.last_updated_date}' % rname,
        spec:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_spec(spec):: self + {
        spec: spec,
      },
      spec:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          egress_filter:: {},
        },
        with_egress_filter(egress_filter):: self + {
          egress_filter: egress_filter,
        },
        egress_filter:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (optional)
          new(rname, type=null):: {
            rname:: rname,
            [if type != null then 'type']: type,
          },
        },
      },
    },
    // aws_appmesh_route - https://www.terraform.io/docs/providers/aws/r/appmesh_route.html
    aws_appmesh_route:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param mesh_name (required)
      // @param name (required)
      // @param virtual_router_name (required)
      // @param tags (optional)
      // @param spec (required)
      new(rname, mesh_name, name, virtual_router_name, spec, tags=null):: {
        rname:: rname,
        mesh_name: mesh_name,
        name: name,
        virtual_router_name: virtual_router_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appmesh_route.%s.arn}' % rname,
        created_date:: '${aws_appmesh_route.%s.created_date}' % rname,
        id:: '${aws_appmesh_route.%s.id}' % rname,
        last_updated_date:: '${aws_appmesh_route.%s.last_updated_date}' % rname,
        spec: spec,
      },
      with_id(id):: {
        id::: id,
      },
      spec:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param priority (optional)
        new(rname, priority=null):: {
          rname:: rname,
          [if priority != null then 'priority']: priority,
          http_route:: {},
          tcp_route:: {},
        },
        with_http_route(http_route):: self + {
          http_route: http_route,
        },
        http_route:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param action (required)
          // @param match (required)
          new(rname, action, match):: {
            rname:: rname,
            action: action,
            match: match,
          },
          action:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param weighted_target (required)
            new(rname, weighted_target):: {
              rname:: rname,
              weighted_target: weighted_target,
            },
            weighted_target:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param virtual_node (required)
              // @param weight (required)
              new(rname, virtual_node, weight):: {
                rname:: rname,
                virtual_node: virtual_node,
                weight: weight,
              },
            },
          },
          match:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param prefix (required)
            // @param method (optional)
            // @param scheme (optional)
            new(rname, prefix, method=null, scheme=null):: {
              rname:: rname,
              prefix: prefix,
              [if method != null then 'method']: method,
              [if scheme != null then 'scheme']: scheme,
              header:: {},
            },
            with_header(header):: self + {
              header: header,
            },
            header:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param name (required)
              // @param invert (optional)
              new(rname, name, invert=null):: {
                rname:: rname,
                name: name,
                [if invert != null then 'invert']: invert,
                match:: {},
              },
              with_match(match):: self + {
                match: match,
              },
              match:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param exact (optional)
                // @param prefix (optional)
                // @param regex (optional)
                // @param suffix (optional)
                new(rname, exact=null, prefix=null, regex=null, suffix=null):: {
                  rname:: rname,
                  [if exact != null then 'exact']: exact,
                  [if prefix != null then 'prefix']: prefix,
                  [if regex != null then 'regex']: regex,
                  [if suffix != null then 'suffix']: suffix,
                  range:: {},
                },
                with_range(range):: self + {
                  range: range,
                },
                range:: {
                  // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                  // @param end (required)
                  // @param start (required)
                  new(rname, end, start):: {
                    rname:: rname,
                    end: end,
                    start: start,
                  },
                },
              },
            },
          },
        },
        with_tcp_route(tcp_route):: self + {
          tcp_route: tcp_route,
        },
        tcp_route:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param action (required)
          new(rname, action):: {
            rname:: rname,
            action: action,
          },
          action:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param weighted_target (required)
            new(rname, weighted_target):: {
              rname:: rname,
              weighted_target: weighted_target,
            },
            weighted_target:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param virtual_node (required)
              // @param weight (required)
              new(rname, virtual_node, weight):: {
                rname:: rname,
                virtual_node: virtual_node,
                weight: weight,
              },
            },
          },
        },
      },
    },
    // aws_appmesh_virtual_node - https://www.terraform.io/docs/providers/aws/r/appmesh_virtual_node.html
    aws_appmesh_virtual_node:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param mesh_name (required)
      // @param name (required)
      // @param tags (optional)
      // @param spec (required)
      new(rname, mesh_name, name, spec, tags=null):: {
        rname:: rname,
        mesh_name: mesh_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appmesh_virtual_node.%s.arn}' % rname,
        created_date:: '${aws_appmesh_virtual_node.%s.created_date}' % rname,
        id:: '${aws_appmesh_virtual_node.%s.id}' % rname,
        last_updated_date:: '${aws_appmesh_virtual_node.%s.last_updated_date}' % rname,
        spec: spec,
      },
      with_id(id):: {
        id::: id,
      },
      spec:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          backends:: '${aws_appmesh_virtual_node.%s.spec.backends}' % rname,
          backend:: {},
          listener:: {},
          logging:: {},
          service_discovery:: {},
        },
        with_backends(backends):: {
          backends::: backends,
        },
        with_backend(backend):: self + {
          backend: backend,
        },
        backend:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            virtual_service:: {},
          },
          with_virtual_service(virtual_service):: self + {
            virtual_service: virtual_service,
          },
          virtual_service:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param virtual_service_name (required)
            new(rname, virtual_service_name):: {
              rname:: rname,
              virtual_service_name: virtual_service_name,
            },
          },
        },
        with_listener(listener):: self + {
          listener: listener,
        },
        listener:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param port_mapping (required)
          new(rname, port_mapping):: {
            rname:: rname,
            health_check:: {},
            port_mapping: port_mapping,
          },
          with_health_check(health_check):: self + {
            health_check: health_check,
          },
          health_check:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param healthy_threshold (required)
            // @param interval_millis (required)
            // @param protocol (required)
            // @param timeout_millis (required)
            // @param unhealthy_threshold (required)
            // @param path (optional)
            new(rname, healthy_threshold, interval_millis, protocol, timeout_millis, unhealthy_threshold, path=null):: {
              rname:: rname,
              healthy_threshold: healthy_threshold,
              interval_millis: interval_millis,
              protocol: protocol,
              timeout_millis: timeout_millis,
              unhealthy_threshold: unhealthy_threshold,
              [if path != null then 'path']: path,
              port:: '${aws_appmesh_virtual_node.%s.spec.listener.health_check.port}' % rname,
            },
            with_port(port):: {
              port::: port,
            },
          },
          port_mapping:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param port (required)
            // @param protocol (required)
            new(rname, port, protocol):: {
              rname:: rname,
              port: port,
              protocol: protocol,
            },
          },
        },
        with_logging(logging):: self + {
          logging: logging,
        },
        logging:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            access_log:: {},
          },
          with_access_log(access_log):: self + {
            access_log: access_log,
          },
          access_log:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            new(rname):: {
              rname:: rname,
              file:: {},
            },
            with_file(file):: self + {
              file: file,
            },
            file:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param path (required)
              new(rname, path):: {
                rname:: rname,
                path: path,
              },
            },
          },
        },
        with_service_discovery(service_discovery):: self + {
          service_discovery: service_discovery,
        },
        service_discovery:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            aws_cloud_map:: {},
            dns:: {},
          },
          with_aws_cloud_map(aws_cloud_map):: self + {
            aws_cloud_map: aws_cloud_map,
          },
          aws_cloud_map:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param namespace_name (required)
            // @param service_name (required)
            // @param attributes (optional)
            new(rname, namespace_name, service_name, attributes=null):: {
              rname:: rname,
              namespace_name: namespace_name,
              service_name: service_name,
              [if attributes != null then 'attributes']: attributes,
            },
          },
          with_dns(dns):: self + {
            dns: dns,
          },
          dns:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param hostname (required)
            new(rname, hostname):: {
              rname:: rname,
              hostname: hostname,
              service_name:: '${aws_appmesh_virtual_node.%s.spec.service_discovery.dns.service_name}' % rname,
            },
            with_service_name(service_name):: {
              service_name::: service_name,
            },
          },
        },
      },
    },
    // aws_appmesh_virtual_router - https://www.terraform.io/docs/providers/aws/r/appmesh_virtual_router.html
    aws_appmesh_virtual_router:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param mesh_name (required)
      // @param name (required)
      // @param tags (optional)
      // @param spec (required)
      new(rname, mesh_name, name, spec, tags=null):: {
        rname:: rname,
        mesh_name: mesh_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appmesh_virtual_router.%s.arn}' % rname,
        created_date:: '${aws_appmesh_virtual_router.%s.created_date}' % rname,
        id:: '${aws_appmesh_virtual_router.%s.id}' % rname,
        last_updated_date:: '${aws_appmesh_virtual_router.%s.last_updated_date}' % rname,
        spec: spec,
      },
      with_id(id):: {
        id::: id,
      },
      spec:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param listener (required)
        new(rname, listener):: {
          rname:: rname,
          service_names:: '${aws_appmesh_virtual_router.%s.spec.service_names}' % rname,
          listener: listener,
        },
        with_service_names(service_names):: {
          service_names::: service_names,
        },
        listener:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param port_mapping (required)
          new(rname, port_mapping):: {
            rname:: rname,
            port_mapping: port_mapping,
          },
          port_mapping:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param port (required)
            // @param protocol (required)
            new(rname, port, protocol):: {
              rname:: rname,
              port: port,
              protocol: protocol,
            },
          },
        },
      },
    },
    // aws_appmesh_virtual_service - https://www.terraform.io/docs/providers/aws/r/appmesh_virtual_service.html
    aws_appmesh_virtual_service:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param mesh_name (required)
      // @param name (required)
      // @param tags (optional)
      // @param spec (required)
      new(rname, mesh_name, name, spec, tags=null):: {
        rname:: rname,
        mesh_name: mesh_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appmesh_virtual_service.%s.arn}' % rname,
        created_date:: '${aws_appmesh_virtual_service.%s.created_date}' % rname,
        id:: '${aws_appmesh_virtual_service.%s.id}' % rname,
        last_updated_date:: '${aws_appmesh_virtual_service.%s.last_updated_date}' % rname,
        spec: spec,
      },
      with_id(id):: {
        id::: id,
      },
      spec:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          provider:: {},
        },
        with_provider(provider):: self + {
          provider: provider,
        },
        provider:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            virtual_node:: {},
            virtual_router:: {},
          },
          with_virtual_node(virtual_node):: self + {
            virtual_node: virtual_node,
          },
          virtual_node:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param virtual_node_name (required)
            new(rname, virtual_node_name):: {
              rname:: rname,
              virtual_node_name: virtual_node_name,
            },
          },
          with_virtual_router(virtual_router):: self + {
            virtual_router: virtual_router,
          },
          virtual_router:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param virtual_router_name (required)
            new(rname, virtual_router_name):: {
              rname:: rname,
              virtual_router_name: virtual_router_name,
            },
          },
        },
      },
    },
    // aws_appsync_api_key - https://www.terraform.io/docs/providers/aws/r/appsync_api_key.html
    aws_appsync_api_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_id (required)
      // @param description (optional)
      // @param expires (optional)
      new(rname, api_id, description=null, expires=null):: {
        rname:: rname,
        api_id: api_id,
        [if description != null then 'description']: description,
        [if expires != null then 'expires']: expires,
        id:: '${aws_appsync_api_key.%s.id}' % rname,
        key:: '${aws_appsync_api_key.%s.key}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_appsync_datasource - https://www.terraform.io/docs/providers/aws/r/appsync_datasource.html
    aws_appsync_datasource:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_id (required)
      // @param name (required)
      // @param type (required)
      // @param description (optional)
      // @param service_role_arn (optional)
      new(rname, api_id, name, type, description=null, service_role_arn=null):: {
        rname:: rname,
        api_id: api_id,
        name: name,
        type: type,
        [if description != null then 'description']: description,
        [if service_role_arn != null then 'service_role_arn']: service_role_arn,
        arn:: '${aws_appsync_datasource.%s.arn}' % rname,
        id:: '${aws_appsync_datasource.%s.id}' % rname,
        dynamodb_config:: {},
        elasticsearch_config:: {},
        http_config:: {},
        lambda_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_dynamodb_config(dynamodb_config):: self + {
        dynamodb_config: dynamodb_config,
      },
      dynamodb_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param table_name (required)
        // @param use_caller_credentials (optional)
        new(rname, table_name, use_caller_credentials=null):: {
          rname:: rname,
          table_name: table_name,
          [if use_caller_credentials != null then 'use_caller_credentials']: use_caller_credentials,
          region:: '${aws_appsync_datasource.%s.dynamodb_config.region}' % rname,
        },
        with_region(region):: {
          region::: region,
        },
      },
      with_elasticsearch_config(elasticsearch_config):: self + {
        elasticsearch_config: elasticsearch_config,
      },
      elasticsearch_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param endpoint (required)
        new(rname, endpoint):: {
          rname:: rname,
          endpoint: endpoint,
          region:: '${aws_appsync_datasource.%s.elasticsearch_config.region}' % rname,
        },
        with_region(region):: {
          region::: region,
        },
      },
      with_http_config(http_config):: self + {
        http_config: http_config,
      },
      http_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param endpoint (required)
        new(rname, endpoint):: {
          rname:: rname,
          endpoint: endpoint,
        },
      },
      with_lambda_config(lambda_config):: self + {
        lambda_config: lambda_config,
      },
      lambda_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param function_arn (required)
        new(rname, function_arn):: {
          rname:: rname,
          function_arn: function_arn,
        },
      },
    },
    // aws_appsync_function - https://www.terraform.io/docs/providers/aws/r/appsync_function.html
    aws_appsync_function:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_id (required)
      // @param data_source (required)
      // @param name (required)
      // @param request_mapping_template (required)
      // @param response_mapping_template (required)
      // @param description (optional)
      // @param function_version (optional)
      new(rname, api_id, data_source, name, request_mapping_template, response_mapping_template, description=null, function_version=null):: {
        rname:: rname,
        api_id: api_id,
        data_source: data_source,
        name: name,
        request_mapping_template: request_mapping_template,
        response_mapping_template: response_mapping_template,
        [if description != null then 'description']: description,
        [if function_version != null then 'function_version']: function_version,
        arn:: '${aws_appsync_function.%s.arn}' % rname,
        function_id:: '${aws_appsync_function.%s.function_id}' % rname,
        id:: '${aws_appsync_function.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_appsync_graphql_api - https://www.terraform.io/docs/providers/aws/r/appsync_graphql_api.html
    aws_appsync_graphql_api:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param authentication_type (required)
      // @param name (required)
      // @param schema (optional)
      // @param tags (optional)
      new(rname, authentication_type, name, schema=null, tags=null):: {
        rname:: rname,
        authentication_type: authentication_type,
        name: name,
        [if schema != null then 'schema']: schema,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_appsync_graphql_api.%s.arn}' % rname,
        id:: '${aws_appsync_graphql_api.%s.id}' % rname,
        uris:: '${aws_appsync_graphql_api.%s.uris}' % rname,
        additional_authentication_provider:: {},
        log_config:: {},
        openid_connect_config:: {},
        user_pool_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_additional_authentication_provider(additional_authentication_provider):: self + {
        additional_authentication_provider: additional_authentication_provider,
      },
      additional_authentication_provider:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param authentication_type (required)
        new(rname, authentication_type):: {
          rname:: rname,
          authentication_type: authentication_type,
          openid_connect_config:: {},
          user_pool_config:: {},
        },
        with_openid_connect_config(openid_connect_config):: self + {
          openid_connect_config: openid_connect_config,
        },
        openid_connect_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param issuer (required)
          // @param auth_ttl (optional)
          // @param client_id (optional)
          // @param iat_ttl (optional)
          new(rname, issuer, auth_ttl=null, client_id=null, iat_ttl=null):: {
            rname:: rname,
            issuer: issuer,
            [if auth_ttl != null then 'auth_ttl']: auth_ttl,
            [if client_id != null then 'client_id']: client_id,
            [if iat_ttl != null then 'iat_ttl']: iat_ttl,
          },
        },
        with_user_pool_config(user_pool_config):: self + {
          user_pool_config: user_pool_config,
        },
        user_pool_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param user_pool_id (required)
          // @param app_id_client_regex (optional)
          new(rname, user_pool_id, app_id_client_regex=null):: {
            rname:: rname,
            user_pool_id: user_pool_id,
            [if app_id_client_regex != null then 'app_id_client_regex']: app_id_client_regex,
            aws_region:: '${aws_appsync_graphql_api.%s.additional_authentication_provider.user_pool_config.aws_region}' % rname,
          },
          with_aws_region(aws_region):: {
            aws_region::: aws_region,
          },
        },
      },
      with_log_config(log_config):: self + {
        log_config: log_config,
      },
      log_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cloudwatch_logs_role_arn (required)
        // @param field_log_level (required)
        new(rname, cloudwatch_logs_role_arn, field_log_level):: {
          rname:: rname,
          cloudwatch_logs_role_arn: cloudwatch_logs_role_arn,
          field_log_level: field_log_level,
        },
      },
      with_openid_connect_config(openid_connect_config):: self + {
        openid_connect_config: openid_connect_config,
      },
      openid_connect_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param issuer (required)
        // @param auth_ttl (optional)
        // @param client_id (optional)
        // @param iat_ttl (optional)
        new(rname, issuer, auth_ttl=null, client_id=null, iat_ttl=null):: {
          rname:: rname,
          issuer: issuer,
          [if auth_ttl != null then 'auth_ttl']: auth_ttl,
          [if client_id != null then 'client_id']: client_id,
          [if iat_ttl != null then 'iat_ttl']: iat_ttl,
        },
      },
      with_user_pool_config(user_pool_config):: self + {
        user_pool_config: user_pool_config,
      },
      user_pool_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param default_action (required)
        // @param user_pool_id (required)
        // @param app_id_client_regex (optional)
        new(rname, default_action, user_pool_id, app_id_client_regex=null):: {
          rname:: rname,
          default_action: default_action,
          user_pool_id: user_pool_id,
          [if app_id_client_regex != null then 'app_id_client_regex']: app_id_client_regex,
          aws_region:: '${aws_appsync_graphql_api.%s.user_pool_config.aws_region}' % rname,
        },
        with_aws_region(aws_region):: {
          aws_region::: aws_region,
        },
      },
    },
    // aws_appsync_resolver - https://www.terraform.io/docs/providers/aws/r/appsync_resolver.html
    aws_appsync_resolver:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_id (required)
      // @param field (required)
      // @param request_template (required)
      // @param response_template (required)
      // @param type (required)
      // @param data_source (optional)
      // @param kind (optional)
      new(rname, api_id, field, request_template, response_template, type, data_source=null, kind=null):: {
        rname:: rname,
        api_id: api_id,
        field: field,
        request_template: request_template,
        response_template: response_template,
        type: type,
        [if data_source != null then 'data_source']: data_source,
        [if kind != null then 'kind']: kind,
        arn:: '${aws_appsync_resolver.%s.arn}' % rname,
        id:: '${aws_appsync_resolver.%s.id}' % rname,
        pipeline_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_pipeline_config(pipeline_config):: self + {
        pipeline_config: pipeline_config,
      },
      pipeline_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param functions (optional)
        new(rname, functions=null):: {
          rname:: rname,
          [if functions != null then 'functions']: functions,
        },
      },
    },
    // aws_athena_database - https://www.terraform.io/docs/providers/aws/r/athena_database.html
    aws_athena_database:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param name (required)
      // @param force_destroy (optional)
      new(rname, bucket, name, force_destroy=null):: {
        rname:: rname,
        bucket: bucket,
        name: name,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        id:: '${aws_athena_database.%s.id}' % rname,
        encryption_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_encryption_configuration(encryption_configuration):: self + {
        encryption_configuration: encryption_configuration,
      },
      encryption_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param encryption_option (required)
        // @param kms_key (optional)
        new(rname, encryption_option, kms_key=null):: {
          rname:: rname,
          encryption_option: encryption_option,
          [if kms_key != null then 'kms_key']: kms_key,
        },
      },
    },
    // aws_athena_named_query - https://www.terraform.io/docs/providers/aws/r/athena_named_query.html
    aws_athena_named_query:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param database (required)
      // @param name (required)
      // @param query (required)
      // @param description (optional)
      // @param workgroup (optional)
      new(rname, database, name, query, description=null, workgroup=null):: {
        rname:: rname,
        database: database,
        name: name,
        query: query,
        [if description != null then 'description']: description,
        [if workgroup != null then 'workgroup']: workgroup,
        id:: '${aws_athena_named_query.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_athena_workgroup - https://www.terraform.io/docs/providers/aws/r/athena_workgroup.html
    aws_athena_workgroup:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param state (optional)
      // @param tags (optional)
      new(rname, name, description=null, state=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if state != null then 'state']: state,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_athena_workgroup.%s.arn}' % rname,
        id:: '${aws_athena_workgroup.%s.id}' % rname,
        configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_configuration(configuration):: self + {
        configuration: configuration,
      },
      configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bytes_scanned_cutoff_per_query (optional)
        // @param enforce_workgroup_configuration (optional)
        // @param publish_cloudwatch_metrics_enabled (optional)
        new(rname, bytes_scanned_cutoff_per_query=null, enforce_workgroup_configuration=null, publish_cloudwatch_metrics_enabled=null):: {
          rname:: rname,
          [if bytes_scanned_cutoff_per_query != null then 'bytes_scanned_cutoff_per_query']: bytes_scanned_cutoff_per_query,
          [if enforce_workgroup_configuration != null then 'enforce_workgroup_configuration']: enforce_workgroup_configuration,
          [if publish_cloudwatch_metrics_enabled != null then 'publish_cloudwatch_metrics_enabled']: publish_cloudwatch_metrics_enabled,
          result_configuration:: {},
        },
        with_result_configuration(result_configuration):: self + {
          result_configuration: result_configuration,
        },
        result_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param output_location (optional)
          new(rname, output_location=null):: {
            rname:: rname,
            [if output_location != null then 'output_location']: output_location,
            encryption_configuration:: {},
          },
          with_encryption_configuration(encryption_configuration):: self + {
            encryption_configuration: encryption_configuration,
          },
          encryption_configuration:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param encryption_option (optional)
            // @param kms_key_arn (optional)
            new(rname, encryption_option=null, kms_key_arn=null):: {
              rname:: rname,
              [if encryption_option != null then 'encryption_option']: encryption_option,
              [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
            },
          },
        },
      },
    },
    // aws_autoscaling_attachment - https://www.terraform.io/docs/providers/aws/r/autoscaling_attachment.html
    aws_autoscaling_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param autoscaling_group_name (required)
      // @param alb_target_group_arn (optional)
      // @param elb (optional)
      new(rname, autoscaling_group_name, alb_target_group_arn=null, elb=null):: {
        rname:: rname,
        autoscaling_group_name: autoscaling_group_name,
        [if alb_target_group_arn != null then 'alb_target_group_arn']: alb_target_group_arn,
        [if elb != null then 'elb']: elb,
        id:: '${aws_autoscaling_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_autoscaling_group - https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html
    aws_autoscaling_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param max_size (required)
      // @param min_size (required)
      // @param enabled_metrics (optional)
      // @param force_delete (optional)
      // @param health_check_grace_period (optional)
      // @param launch_configuration (optional)
      // @param max_instance_lifetime (optional)
      // @param metrics_granularity (optional)
      // @param min_elb_capacity (optional)
      // @param name_prefix (optional)
      // @param placement_group (optional)
      // @param protect_from_scale_in (optional)
      // @param suspended_processes (optional)
      // @param tags (optional)
      // @param termination_policies (optional)
      // @param wait_for_capacity_timeout (optional)
      // @param wait_for_elb_capacity (optional)
      new(rname, max_size, min_size, enabled_metrics=null, force_delete=null, health_check_grace_period=null, launch_configuration=null, max_instance_lifetime=null, metrics_granularity=null, min_elb_capacity=null, name_prefix=null, placement_group=null, protect_from_scale_in=null, suspended_processes=null, tags=null, termination_policies=null, wait_for_capacity_timeout=null, wait_for_elb_capacity=null):: {
        rname:: rname,
        max_size: max_size,
        min_size: min_size,
        [if enabled_metrics != null then 'enabled_metrics']: enabled_metrics,
        [if force_delete != null then 'force_delete']: force_delete,
        [if health_check_grace_period != null then 'health_check_grace_period']: health_check_grace_period,
        [if launch_configuration != null then 'launch_configuration']: launch_configuration,
        [if max_instance_lifetime != null then 'max_instance_lifetime']: max_instance_lifetime,
        [if metrics_granularity != null then 'metrics_granularity']: metrics_granularity,
        [if min_elb_capacity != null then 'min_elb_capacity']: min_elb_capacity,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if placement_group != null then 'placement_group']: placement_group,
        [if protect_from_scale_in != null then 'protect_from_scale_in']: protect_from_scale_in,
        [if suspended_processes != null then 'suspended_processes']: suspended_processes,
        [if tags != null then 'tags']: tags,
        [if termination_policies != null then 'termination_policies']: termination_policies,
        [if wait_for_capacity_timeout != null then 'wait_for_capacity_timeout']: wait_for_capacity_timeout,
        [if wait_for_elb_capacity != null then 'wait_for_elb_capacity']: wait_for_elb_capacity,
        arn:: '${aws_autoscaling_group.%s.arn}' % rname,
        availability_zones:: '${aws_autoscaling_group.%s.availability_zones}' % rname,
        default_cooldown:: '${aws_autoscaling_group.%s.default_cooldown}' % rname,
        desired_capacity:: '${aws_autoscaling_group.%s.desired_capacity}' % rname,
        health_check_type:: '${aws_autoscaling_group.%s.health_check_type}' % rname,
        id:: '${aws_autoscaling_group.%s.id}' % rname,
        load_balancers:: '${aws_autoscaling_group.%s.load_balancers}' % rname,
        name:: '${aws_autoscaling_group.%s.name}' % rname,
        service_linked_role_arn:: '${aws_autoscaling_group.%s.service_linked_role_arn}' % rname,
        target_group_arns:: '${aws_autoscaling_group.%s.target_group_arns}' % rname,
        vpc_zone_identifier:: '${aws_autoscaling_group.%s.vpc_zone_identifier}' % rname,
        initial_lifecycle_hook:: {},
        launch_template:: {},
        mixed_instances_policy:: {},
        tag:: {},
        timeouts:: {},
      },
      with_availability_zones(availability_zones):: {
        availability_zones::: availability_zones,
      },
      with_default_cooldown(default_cooldown):: {
        default_cooldown::: default_cooldown,
      },
      with_desired_capacity(desired_capacity):: {
        desired_capacity::: desired_capacity,
      },
      with_health_check_type(health_check_type):: {
        health_check_type::: health_check_type,
      },
      with_id(id):: {
        id::: id,
      },
      with_load_balancers(load_balancers):: {
        load_balancers::: load_balancers,
      },
      with_name(name):: {
        name::: name,
      },
      with_service_linked_role_arn(service_linked_role_arn):: {
        service_linked_role_arn::: service_linked_role_arn,
      },
      with_target_group_arns(target_group_arns):: {
        target_group_arns::: target_group_arns,
      },
      with_vpc_zone_identifier(vpc_zone_identifier):: {
        vpc_zone_identifier::: vpc_zone_identifier,
      },
      with_initial_lifecycle_hook(initial_lifecycle_hook):: self + {
        initial_lifecycle_hook: initial_lifecycle_hook,
      },
      initial_lifecycle_hook:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param lifecycle_transition (required)
        // @param name (required)
        // @param heartbeat_timeout (optional)
        // @param notification_metadata (optional)
        // @param notification_target_arn (optional)
        // @param role_arn (optional)
        new(rname, lifecycle_transition, name, heartbeat_timeout=null, notification_metadata=null, notification_target_arn=null, role_arn=null):: {
          rname:: rname,
          lifecycle_transition: lifecycle_transition,
          name: name,
          [if heartbeat_timeout != null then 'heartbeat_timeout']: heartbeat_timeout,
          [if notification_metadata != null then 'notification_metadata']: notification_metadata,
          [if notification_target_arn != null then 'notification_target_arn']: notification_target_arn,
          [if role_arn != null then 'role_arn']: role_arn,
          default_result:: '${aws_autoscaling_group.%s.initial_lifecycle_hook.default_result}' % rname,
        },
        with_default_result(default_result):: {
          default_result::: default_result,
        },
      },
      with_launch_template(launch_template):: self + {
        launch_template: launch_template,
      },
      launch_template:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param version (optional)
        new(rname, version=null):: {
          rname:: rname,
          [if version != null then 'version']: version,
          id:: '${aws_autoscaling_group.%s.launch_template.id}' % rname,
          name:: '${aws_autoscaling_group.%s.launch_template.name}' % rname,
        },
        with_id(id):: {
          id::: id,
        },
        with_name(name):: {
          name::: name,
        },
      },
      with_mixed_instances_policy(mixed_instances_policy):: self + {
        mixed_instances_policy: mixed_instances_policy,
      },
      mixed_instances_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param launch_template (required)
        new(rname, launch_template):: {
          rname:: rname,
          instances_distribution:: {},
          launch_template: launch_template,
        },
        with_instances_distribution(instances_distribution):: self + {
          instances_distribution: instances_distribution,
        },
        instances_distribution:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param on_demand_allocation_strategy (optional)
          // @param on_demand_base_capacity (optional)
          // @param on_demand_percentage_above_base_capacity (optional)
          // @param spot_allocation_strategy (optional)
          // @param spot_max_price (optional)
          new(rname, on_demand_allocation_strategy=null, on_demand_base_capacity=null, on_demand_percentage_above_base_capacity=null, spot_allocation_strategy=null, spot_max_price=null):: {
            rname:: rname,
            [if on_demand_allocation_strategy != null then 'on_demand_allocation_strategy']: on_demand_allocation_strategy,
            [if on_demand_base_capacity != null then 'on_demand_base_capacity']: on_demand_base_capacity,
            [if on_demand_percentage_above_base_capacity != null then 'on_demand_percentage_above_base_capacity']: on_demand_percentage_above_base_capacity,
            [if spot_allocation_strategy != null then 'spot_allocation_strategy']: spot_allocation_strategy,
            [if spot_max_price != null then 'spot_max_price']: spot_max_price,
            spot_instance_pools:: '${aws_autoscaling_group.%s.mixed_instances_policy.instances_distribution.spot_instance_pools}' % rname,
          },
          with_spot_instance_pools(spot_instance_pools):: {
            spot_instance_pools::: spot_instance_pools,
          },
        },
        launch_template:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param launch_template_specification (required)
          new(rname, launch_template_specification):: {
            rname:: rname,
            launch_template_specification: launch_template_specification,
            override:: {},
          },
          launch_template_specification:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param version (optional)
            new(rname, version=null):: {
              rname:: rname,
              [if version != null then 'version']: version,
              launch_template_id:: '${aws_autoscaling_group.%s.mixed_instances_policy.launch_template.launch_template_specification.launch_template_id}' % rname,
              launch_template_name:: '${aws_autoscaling_group.%s.mixed_instances_policy.launch_template.launch_template_specification.launch_template_name}' % rname,
            },
            with_launch_template_id(launch_template_id):: {
              launch_template_id::: launch_template_id,
            },
            with_launch_template_name(launch_template_name):: {
              launch_template_name::: launch_template_name,
            },
          },
          with_override(override):: self + {
            override: override,
          },
          override:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param instance_type (optional)
            // @param weighted_capacity (optional)
            new(rname, instance_type=null, weighted_capacity=null):: {
              rname:: rname,
              [if instance_type != null then 'instance_type']: instance_type,
              [if weighted_capacity != null then 'weighted_capacity']: weighted_capacity,
            },
          },
        },
      },
      with_tag(tag):: self + {
        tag: tag,
      },
      tag:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param propagate_at_launch (required)
        // @param value (required)
        new(rname, key, propagate_at_launch, value):: {
          rname:: rname,
          key: key,
          propagate_at_launch: propagate_at_launch,
          value: value,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete (optional)
        new(rname, delete=null):: {
          rname:: rname,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_autoscaling_lifecycle_hook - https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hook.html
    aws_autoscaling_lifecycle_hook:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param autoscaling_group_name (required)
      // @param lifecycle_transition (required)
      // @param name (required)
      // @param heartbeat_timeout (optional)
      // @param notification_metadata (optional)
      // @param notification_target_arn (optional)
      // @param role_arn (optional)
      new(rname, autoscaling_group_name, lifecycle_transition, name, heartbeat_timeout=null, notification_metadata=null, notification_target_arn=null, role_arn=null):: {
        rname:: rname,
        autoscaling_group_name: autoscaling_group_name,
        lifecycle_transition: lifecycle_transition,
        name: name,
        [if heartbeat_timeout != null then 'heartbeat_timeout']: heartbeat_timeout,
        [if notification_metadata != null then 'notification_metadata']: notification_metadata,
        [if notification_target_arn != null then 'notification_target_arn']: notification_target_arn,
        [if role_arn != null then 'role_arn']: role_arn,
        default_result:: '${aws_autoscaling_lifecycle_hook.%s.default_result}' % rname,
        id:: '${aws_autoscaling_lifecycle_hook.%s.id}' % rname,
      },
      with_default_result(default_result):: {
        default_result::: default_result,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_autoscaling_notification - https://www.terraform.io/docs/providers/aws/r/autoscaling_notification.html
    aws_autoscaling_notification:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param group_names (required)
      // @param notifications (required)
      // @param topic_arn (required)
      new(rname, group_names, notifications, topic_arn):: {
        rname:: rname,
        group_names: group_names,
        notifications: notifications,
        topic_arn: topic_arn,
        id:: '${aws_autoscaling_notification.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_autoscaling_policy - https://www.terraform.io/docs/providers/aws/r/autoscaling_policy.html
    aws_autoscaling_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param autoscaling_group_name (required)
      // @param name (required)
      // @param adjustment_type (optional)
      // @param cooldown (optional)
      // @param estimated_instance_warmup (optional)
      // @param min_adjustment_magnitude (optional)
      // @param min_adjustment_step (optional)
      // @param policy_type (optional)
      // @param scaling_adjustment (optional)
      new(rname, autoscaling_group_name, name, adjustment_type=null, cooldown=null, estimated_instance_warmup=null, min_adjustment_magnitude=null, min_adjustment_step=null, policy_type=null, scaling_adjustment=null):: {
        rname:: rname,
        autoscaling_group_name: autoscaling_group_name,
        name: name,
        [if adjustment_type != null then 'adjustment_type']: adjustment_type,
        [if cooldown != null then 'cooldown']: cooldown,
        [if estimated_instance_warmup != null then 'estimated_instance_warmup']: estimated_instance_warmup,
        [if min_adjustment_magnitude != null then 'min_adjustment_magnitude']: min_adjustment_magnitude,
        [if min_adjustment_step != null then 'min_adjustment_step']: min_adjustment_step,
        [if policy_type != null then 'policy_type']: policy_type,
        [if scaling_adjustment != null then 'scaling_adjustment']: scaling_adjustment,
        arn:: '${aws_autoscaling_policy.%s.arn}' % rname,
        id:: '${aws_autoscaling_policy.%s.id}' % rname,
        metric_aggregation_type:: '${aws_autoscaling_policy.%s.metric_aggregation_type}' % rname,
        step_adjustment:: {},
        target_tracking_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_metric_aggregation_type(metric_aggregation_type):: {
        metric_aggregation_type::: metric_aggregation_type,
      },
      with_step_adjustment(step_adjustment):: self + {
        step_adjustment: step_adjustment,
      },
      step_adjustment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param scaling_adjustment (required)
        // @param metric_interval_lower_bound (optional)
        // @param metric_interval_upper_bound (optional)
        new(rname, scaling_adjustment, metric_interval_lower_bound=null, metric_interval_upper_bound=null):: {
          rname:: rname,
          scaling_adjustment: scaling_adjustment,
          [if metric_interval_lower_bound != null then 'metric_interval_lower_bound']: metric_interval_lower_bound,
          [if metric_interval_upper_bound != null then 'metric_interval_upper_bound']: metric_interval_upper_bound,
        },
      },
      with_target_tracking_configuration(target_tracking_configuration):: self + {
        target_tracking_configuration: target_tracking_configuration,
      },
      target_tracking_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param target_value (required)
        // @param disable_scale_in (optional)
        new(rname, target_value, disable_scale_in=null):: {
          rname:: rname,
          target_value: target_value,
          [if disable_scale_in != null then 'disable_scale_in']: disable_scale_in,
          customized_metric_specification:: {},
          predefined_metric_specification:: {},
        },
        with_customized_metric_specification(customized_metric_specification):: self + {
          customized_metric_specification: customized_metric_specification,
        },
        customized_metric_specification:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param metric_name (required)
          // @param namespace (required)
          // @param statistic (required)
          // @param unit (optional)
          new(rname, metric_name, namespace, statistic, unit=null):: {
            rname:: rname,
            metric_name: metric_name,
            namespace: namespace,
            statistic: statistic,
            [if unit != null then 'unit']: unit,
            metric_dimension:: {},
          },
          with_metric_dimension(metric_dimension):: self + {
            metric_dimension: metric_dimension,
          },
          metric_dimension:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param value (required)
            new(rname, name, value):: {
              rname:: rname,
              name: name,
              value: value,
            },
          },
        },
        with_predefined_metric_specification(predefined_metric_specification):: self + {
          predefined_metric_specification: predefined_metric_specification,
        },
        predefined_metric_specification:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param predefined_metric_type (required)
          // @param resource_label (optional)
          new(rname, predefined_metric_type, resource_label=null):: {
            rname:: rname,
            predefined_metric_type: predefined_metric_type,
            [if resource_label != null then 'resource_label']: resource_label,
          },
        },
      },
    },
    // aws_autoscaling_schedule - https://www.terraform.io/docs/providers/aws/r/autoscaling_schedule.html
    aws_autoscaling_schedule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param autoscaling_group_name (required)
      // @param scheduled_action_name (required)
      new(rname, autoscaling_group_name, scheduled_action_name):: {
        rname:: rname,
        autoscaling_group_name: autoscaling_group_name,
        scheduled_action_name: scheduled_action_name,
        arn:: '${aws_autoscaling_schedule.%s.arn}' % rname,
        desired_capacity:: '${aws_autoscaling_schedule.%s.desired_capacity}' % rname,
        end_time:: '${aws_autoscaling_schedule.%s.end_time}' % rname,
        id:: '${aws_autoscaling_schedule.%s.id}' % rname,
        max_size:: '${aws_autoscaling_schedule.%s.max_size}' % rname,
        min_size:: '${aws_autoscaling_schedule.%s.min_size}' % rname,
        recurrence:: '${aws_autoscaling_schedule.%s.recurrence}' % rname,
        start_time:: '${aws_autoscaling_schedule.%s.start_time}' % rname,
      },
      with_desired_capacity(desired_capacity):: {
        desired_capacity::: desired_capacity,
      },
      with_end_time(end_time):: {
        end_time::: end_time,
      },
      with_id(id):: {
        id::: id,
      },
      with_max_size(max_size):: {
        max_size::: max_size,
      },
      with_min_size(min_size):: {
        min_size::: min_size,
      },
      with_recurrence(recurrence):: {
        recurrence::: recurrence,
      },
      with_start_time(start_time):: {
        start_time::: start_time,
      },
    },
    // aws_backup_plan - https://www.terraform.io/docs/providers/aws/r/backup_plan.html
    aws_backup_plan:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      // @param rule (required)
      new(rname, name, rule, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_backup_plan.%s.arn}' % rname,
        id:: '${aws_backup_plan.%s.id}' % rname,
        version:: '${aws_backup_plan.%s.version}' % rname,
        rule: rule,
      },
      with_id(id):: {
        id::: id,
      },
      rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param rule_name (required)
        // @param target_vault_name (required)
        // @param completion_window (optional)
        // @param recovery_point_tags (optional)
        // @param schedule (optional)
        // @param start_window (optional)
        new(rname, rule_name, target_vault_name, completion_window=null, recovery_point_tags=null, schedule=null, start_window=null):: {
          rname:: rname,
          rule_name: rule_name,
          target_vault_name: target_vault_name,
          [if completion_window != null then 'completion_window']: completion_window,
          [if recovery_point_tags != null then 'recovery_point_tags']: recovery_point_tags,
          [if schedule != null then 'schedule']: schedule,
          [if start_window != null then 'start_window']: start_window,
          lifecycle:: {},
        },
        with_lifecycle(lifecycle):: self + {
          lifecycle: lifecycle,
        },
        lifecycle:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param cold_storage_after (optional)
          // @param delete_after (optional)
          new(rname, cold_storage_after=null, delete_after=null):: {
            rname:: rname,
            [if cold_storage_after != null then 'cold_storage_after']: cold_storage_after,
            [if delete_after != null then 'delete_after']: delete_after,
          },
        },
      },
    },
    // aws_backup_selection - https://www.terraform.io/docs/providers/aws/r/backup_selection.html
    aws_backup_selection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param iam_role_arn (required)
      // @param name (required)
      // @param plan_id (required)
      // @param resources (optional)
      new(rname, iam_role_arn, name, plan_id, resources=null):: {
        rname:: rname,
        iam_role_arn: iam_role_arn,
        name: name,
        plan_id: plan_id,
        [if resources != null then 'resources']: resources,
        id:: '${aws_backup_selection.%s.id}' % rname,
        selection_tag:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_selection_tag(selection_tag):: self + {
        selection_tag: selection_tag,
      },
      selection_tag:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param type (required)
        // @param value (required)
        new(rname, key, type, value):: {
          rname:: rname,
          key: key,
          type: type,
          value: value,
        },
      },
    },
    // aws_backup_vault - https://www.terraform.io/docs/providers/aws/r/backup_vault.html
    aws_backup_vault:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      new(rname, name, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_backup_vault.%s.arn}' % rname,
        id:: '${aws_backup_vault.%s.id}' % rname,
        kms_key_arn:: '${aws_backup_vault.%s.kms_key_arn}' % rname,
        recovery_points:: '${aws_backup_vault.%s.recovery_points}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_arn(kms_key_arn):: {
        kms_key_arn::: kms_key_arn,
      },
    },
    // aws_batch_compute_environment - https://www.terraform.io/docs/providers/aws/r/batch_compute_environment.html
    aws_batch_compute_environment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param service_role (required)
      // @param type (required)
      // @param compute_environment_name_prefix (optional)
      // @param state (optional)
      new(rname, service_role, type, compute_environment_name_prefix=null, state=null):: {
        rname:: rname,
        service_role: service_role,
        type: type,
        [if compute_environment_name_prefix != null then 'compute_environment_name_prefix']: compute_environment_name_prefix,
        [if state != null then 'state']: state,
        arn:: '${aws_batch_compute_environment.%s.arn}' % rname,
        compute_environment_name:: '${aws_batch_compute_environment.%s.compute_environment_name}' % rname,
        ecc_cluster_arn:: '${aws_batch_compute_environment.%s.ecc_cluster_arn}' % rname,
        ecs_cluster_arn:: '${aws_batch_compute_environment.%s.ecs_cluster_arn}' % rname,
        id:: '${aws_batch_compute_environment.%s.id}' % rname,
        status:: '${aws_batch_compute_environment.%s.status}' % rname,
        status_reason:: '${aws_batch_compute_environment.%s.status_reason}' % rname,
        compute_resources:: {},
      },
      with_compute_environment_name(compute_environment_name):: {
        compute_environment_name::: compute_environment_name,
      },
      with_id(id):: {
        id::: id,
      },
      with_compute_resources(compute_resources):: self + {
        compute_resources: compute_resources,
      },
      compute_resources:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_role (required)
        // @param instance_type (required)
        // @param max_vcpus (required)
        // @param min_vcpus (required)
        // @param security_group_ids (required)
        // @param subnets (required)
        // @param type (required)
        // @param allocation_strategy (optional)
        // @param bid_percentage (optional)
        // @param desired_vcpus (optional)
        // @param ec2_key_pair (optional)
        // @param image_id (optional)
        // @param spot_iam_fleet_role (optional)
        // @param tags (optional)
        new(rname, instance_role, instance_type, max_vcpus, min_vcpus, security_group_ids, subnets, type, allocation_strategy=null, bid_percentage=null, desired_vcpus=null, ec2_key_pair=null, image_id=null, spot_iam_fleet_role=null, tags=null):: {
          rname:: rname,
          instance_role: instance_role,
          instance_type: instance_type,
          max_vcpus: max_vcpus,
          min_vcpus: min_vcpus,
          security_group_ids: security_group_ids,
          subnets: subnets,
          type: type,
          [if allocation_strategy != null then 'allocation_strategy']: allocation_strategy,
          [if bid_percentage != null then 'bid_percentage']: bid_percentage,
          [if desired_vcpus != null then 'desired_vcpus']: desired_vcpus,
          [if ec2_key_pair != null then 'ec2_key_pair']: ec2_key_pair,
          [if image_id != null then 'image_id']: image_id,
          [if spot_iam_fleet_role != null then 'spot_iam_fleet_role']: spot_iam_fleet_role,
          [if tags != null then 'tags']: tags,
          launch_template:: {},
        },
        with_launch_template(launch_template):: self + {
          launch_template: launch_template,
        },
        launch_template:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param launch_template_id (optional)
          // @param launch_template_name (optional)
          // @param version (optional)
          new(rname, launch_template_id=null, launch_template_name=null, version=null):: {
            rname:: rname,
            [if launch_template_id != null then 'launch_template_id']: launch_template_id,
            [if launch_template_name != null then 'launch_template_name']: launch_template_name,
            [if version != null then 'version']: version,
          },
        },
      },
    },
    // aws_batch_job_definition - https://www.terraform.io/docs/providers/aws/r/batch_job_definition.html
    aws_batch_job_definition:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param type (required)
      // @param container_properties (optional)
      // @param parameters (optional)
      new(rname, name, type, container_properties=null, parameters=null):: {
        rname:: rname,
        name: name,
        type: type,
        [if container_properties != null then 'container_properties']: container_properties,
        [if parameters != null then 'parameters']: parameters,
        arn:: '${aws_batch_job_definition.%s.arn}' % rname,
        id:: '${aws_batch_job_definition.%s.id}' % rname,
        revision:: '${aws_batch_job_definition.%s.revision}' % rname,
        retry_strategy:: {},
        timeout:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_retry_strategy(retry_strategy):: self + {
        retry_strategy: retry_strategy,
      },
      retry_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param attempts (optional)
        new(rname, attempts=null):: {
          rname:: rname,
          [if attempts != null then 'attempts']: attempts,
        },
      },
      with_timeout(timeout):: self + {
        timeout: timeout,
      },
      timeout:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param attempt_duration_seconds (optional)
        new(rname, attempt_duration_seconds=null):: {
          rname:: rname,
          [if attempt_duration_seconds != null then 'attempt_duration_seconds']: attempt_duration_seconds,
        },
      },
    },
    // aws_batch_job_queue - https://www.terraform.io/docs/providers/aws/r/batch_job_queue.html
    aws_batch_job_queue:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param compute_environments (required)
      // @param name (required)
      // @param priority (required)
      // @param state (required)
      new(rname, compute_environments, name, priority, state):: {
        rname:: rname,
        compute_environments: compute_environments,
        name: name,
        priority: priority,
        state: state,
        arn:: '${aws_batch_job_queue.%s.arn}' % rname,
        id:: '${aws_batch_job_queue.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_budgets_budget - https://www.terraform.io/docs/providers/aws/r/budgets_budget.html
    aws_budgets_budget:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param budget_type (required)
      // @param limit_amount (required)
      // @param limit_unit (required)
      // @param time_period_start (required)
      // @param time_unit (required)
      // @param time_period_end (optional)
      new(rname, budget_type, limit_amount, limit_unit, time_period_start, time_unit, time_period_end=null):: {
        rname:: rname,
        budget_type: budget_type,
        limit_amount: limit_amount,
        limit_unit: limit_unit,
        time_period_start: time_period_start,
        time_unit: time_unit,
        [if time_period_end != null then 'time_period_end']: time_period_end,
        account_id:: '${aws_budgets_budget.%s.account_id}' % rname,
        cost_filters:: '${aws_budgets_budget.%s.cost_filters}' % rname,
        id:: '${aws_budgets_budget.%s.id}' % rname,
        name:: '${aws_budgets_budget.%s.name}' % rname,
        name_prefix:: '${aws_budgets_budget.%s.name_prefix}' % rname,
        cost_types:: {},
        notification:: {},
      },
      with_account_id(account_id):: {
        account_id::: account_id,
      },
      with_cost_filters(cost_filters):: {
        cost_filters::: cost_filters,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_cost_types(cost_types):: self + {
        cost_types: cost_types,
      },
      cost_types:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param include_credit (optional)
        // @param include_discount (optional)
        // @param include_other_subscription (optional)
        // @param include_recurring (optional)
        // @param include_refund (optional)
        // @param include_subscription (optional)
        // @param include_support (optional)
        // @param include_tax (optional)
        // @param include_upfront (optional)
        // @param use_amortized (optional)
        // @param use_blended (optional)
        new(rname, include_credit=null, include_discount=null, include_other_subscription=null, include_recurring=null, include_refund=null, include_subscription=null, include_support=null, include_tax=null, include_upfront=null, use_amortized=null, use_blended=null):: {
          rname:: rname,
          [if include_credit != null then 'include_credit']: include_credit,
          [if include_discount != null then 'include_discount']: include_discount,
          [if include_other_subscription != null then 'include_other_subscription']: include_other_subscription,
          [if include_recurring != null then 'include_recurring']: include_recurring,
          [if include_refund != null then 'include_refund']: include_refund,
          [if include_subscription != null then 'include_subscription']: include_subscription,
          [if include_support != null then 'include_support']: include_support,
          [if include_tax != null then 'include_tax']: include_tax,
          [if include_upfront != null then 'include_upfront']: include_upfront,
          [if use_amortized != null then 'use_amortized']: use_amortized,
          [if use_blended != null then 'use_blended']: use_blended,
        },
      },
      with_notification(notification):: self + {
        notification: notification,
      },
      notification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param comparison_operator (required)
        // @param notification_type (required)
        // @param threshold (required)
        // @param threshold_type (required)
        // @param subscriber_email_addresses (optional)
        // @param subscriber_sns_topic_arns (optional)
        new(rname, comparison_operator, notification_type, threshold, threshold_type, subscriber_email_addresses=null, subscriber_sns_topic_arns=null):: {
          rname:: rname,
          comparison_operator: comparison_operator,
          notification_type: notification_type,
          threshold: threshold,
          threshold_type: threshold_type,
          [if subscriber_email_addresses != null then 'subscriber_email_addresses']: subscriber_email_addresses,
          [if subscriber_sns_topic_arns != null then 'subscriber_sns_topic_arns']: subscriber_sns_topic_arns,
        },
      },
    },
    // aws_cloud9_environment_ec2 - https://www.terraform.io/docs/providers/aws/r/cloud9_environment_ec2.html
    aws_cloud9_environment_ec2:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_type (required)
      // @param name (required)
      // @param automatic_stop_time_minutes (optional)
      // @param description (optional)
      // @param subnet_id (optional)
      new(rname, instance_type, name, automatic_stop_time_minutes=null, description=null, subnet_id=null):: {
        rname:: rname,
        instance_type: instance_type,
        name: name,
        [if automatic_stop_time_minutes != null then 'automatic_stop_time_minutes']: automatic_stop_time_minutes,
        [if description != null then 'description']: description,
        [if subnet_id != null then 'subnet_id']: subnet_id,
        arn:: '${aws_cloud9_environment_ec2.%s.arn}' % rname,
        id:: '${aws_cloud9_environment_ec2.%s.id}' % rname,
        owner_arn:: '${aws_cloud9_environment_ec2.%s.owner_arn}' % rname,
        type:: '${aws_cloud9_environment_ec2.%s.type}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_owner_arn(owner_arn):: {
        owner_arn::: owner_arn,
      },
    },
    // aws_cloudformation_stack - https://www.terraform.io/docs/providers/aws/r/cloudformation_stack.html
    aws_cloudformation_stack:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param capabilities (optional)
      // @param disable_rollback (optional)
      // @param iam_role_arn (optional)
      // @param notification_arns (optional)
      // @param on_failure (optional)
      // @param policy_url (optional)
      // @param tags (optional)
      // @param template_url (optional)
      // @param timeout_in_minutes (optional)
      new(rname, name, capabilities=null, disable_rollback=null, iam_role_arn=null, notification_arns=null, on_failure=null, policy_url=null, tags=null, template_url=null, timeout_in_minutes=null):: {
        rname:: rname,
        name: name,
        [if capabilities != null then 'capabilities']: capabilities,
        [if disable_rollback != null then 'disable_rollback']: disable_rollback,
        [if iam_role_arn != null then 'iam_role_arn']: iam_role_arn,
        [if notification_arns != null then 'notification_arns']: notification_arns,
        [if on_failure != null then 'on_failure']: on_failure,
        [if policy_url != null then 'policy_url']: policy_url,
        [if tags != null then 'tags']: tags,
        [if template_url != null then 'template_url']: template_url,
        [if timeout_in_minutes != null then 'timeout_in_minutes']: timeout_in_minutes,
        id:: '${aws_cloudformation_stack.%s.id}' % rname,
        outputs:: '${aws_cloudformation_stack.%s.outputs}' % rname,
        parameters:: '${aws_cloudformation_stack.%s.parameters}' % rname,
        policy_body:: '${aws_cloudformation_stack.%s.policy_body}' % rname,
        template_body:: '${aws_cloudformation_stack.%s.template_body}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_parameters(parameters):: {
        parameters::: parameters,
      },
      with_policy_body(policy_body):: {
        policy_body::: policy_body,
      },
      with_template_body(template_body):: {
        template_body::: template_body,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cloudformation_stack_set - https://www.terraform.io/docs/providers/aws/r/cloudformation_stack_set.html
    aws_cloudformation_stack_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param administration_role_arn (required)
      // @param name (required)
      // @param capabilities (optional)
      // @param description (optional)
      // @param execution_role_name (optional)
      // @param parameters (optional)
      // @param tags (optional)
      // @param template_url (optional)
      new(rname, administration_role_arn, name, capabilities=null, description=null, execution_role_name=null, parameters=null, tags=null, template_url=null):: {
        rname:: rname,
        administration_role_arn: administration_role_arn,
        name: name,
        [if capabilities != null then 'capabilities']: capabilities,
        [if description != null then 'description']: description,
        [if execution_role_name != null then 'execution_role_name']: execution_role_name,
        [if parameters != null then 'parameters']: parameters,
        [if tags != null then 'tags']: tags,
        [if template_url != null then 'template_url']: template_url,
        arn:: '${aws_cloudformation_stack_set.%s.arn}' % rname,
        id:: '${aws_cloudformation_stack_set.%s.id}' % rname,
        stack_set_id:: '${aws_cloudformation_stack_set.%s.stack_set_id}' % rname,
        template_body:: '${aws_cloudformation_stack_set.%s.template_body}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_template_body(template_body):: {
        template_body::: template_body,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param update (optional)
        new(rname, update=null):: {
          rname:: rname,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cloudformation_stack_set_instance - https://www.terraform.io/docs/providers/aws/r/cloudformation_stack_set_instance.html
    aws_cloudformation_stack_set_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_set_name (required)
      // @param parameter_overrides (optional)
      // @param retain_stack (optional)
      new(rname, stack_set_name, parameter_overrides=null, retain_stack=null):: {
        rname:: rname,
        stack_set_name: stack_set_name,
        [if parameter_overrides != null then 'parameter_overrides']: parameter_overrides,
        [if retain_stack != null then 'retain_stack']: retain_stack,
        account_id:: '${aws_cloudformation_stack_set_instance.%s.account_id}' % rname,
        id:: '${aws_cloudformation_stack_set_instance.%s.id}' % rname,
        region:: '${aws_cloudformation_stack_set_instance.%s.region}' % rname,
        stack_id:: '${aws_cloudformation_stack_set_instance.%s.stack_id}' % rname,
        timeouts:: {},
      },
      with_account_id(account_id):: {
        account_id::: account_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_region(region):: {
        region::: region,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cloudfront_distribution - https://www.terraform.io/docs/providers/aws/r/cloudfront_distribution.html
    aws_cloudfront_distribution:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enabled (required)
      // @param aliases (optional)
      // @param comment (optional)
      // @param default_root_object (optional)
      // @param http_version (optional)
      // @param is_ipv6_enabled (optional)
      // @param price_class (optional)
      // @param retain_on_delete (optional)
      // @param tags (optional)
      // @param wait_for_deployment (optional)
      // @param web_acl_id (optional)
      // @param default_cache_behavior (required)
      // @param origin (required)
      // @param restrictions (required)
      // @param viewer_certificate (required)
      new(rname, enabled, default_cache_behavior, origin, restrictions, viewer_certificate, aliases=null, comment=null, default_root_object=null, http_version=null, is_ipv6_enabled=null, price_class=null, retain_on_delete=null, tags=null, wait_for_deployment=null, web_acl_id=null):: {
        rname:: rname,
        enabled: enabled,
        [if aliases != null then 'aliases']: aliases,
        [if comment != null then 'comment']: comment,
        [if default_root_object != null then 'default_root_object']: default_root_object,
        [if http_version != null then 'http_version']: http_version,
        [if is_ipv6_enabled != null then 'is_ipv6_enabled']: is_ipv6_enabled,
        [if price_class != null then 'price_class']: price_class,
        [if retain_on_delete != null then 'retain_on_delete']: retain_on_delete,
        [if tags != null then 'tags']: tags,
        [if wait_for_deployment != null then 'wait_for_deployment']: wait_for_deployment,
        [if web_acl_id != null then 'web_acl_id']: web_acl_id,
        active_trusted_signers:: '${aws_cloudfront_distribution.%s.active_trusted_signers}' % rname,
        arn:: '${aws_cloudfront_distribution.%s.arn}' % rname,
        caller_reference:: '${aws_cloudfront_distribution.%s.caller_reference}' % rname,
        domain_name:: '${aws_cloudfront_distribution.%s.domain_name}' % rname,
        etag:: '${aws_cloudfront_distribution.%s.etag}' % rname,
        hosted_zone_id:: '${aws_cloudfront_distribution.%s.hosted_zone_id}' % rname,
        id:: '${aws_cloudfront_distribution.%s.id}' % rname,
        in_progress_validation_batches:: '${aws_cloudfront_distribution.%s.in_progress_validation_batches}' % rname,
        last_modified_time:: '${aws_cloudfront_distribution.%s.last_modified_time}' % rname,
        status:: '${aws_cloudfront_distribution.%s.status}' % rname,
        cache_behavior:: {},
        custom_error_response:: {},
        default_cache_behavior: default_cache_behavior,
        logging_config:: {},
        ordered_cache_behavior:: {},
        origin: origin,
        origin_group:: {},
        restrictions: restrictions,
        viewer_certificate: viewer_certificate,
      },
      with_id(id):: {
        id::: id,
      },
      with_cache_behavior(cache_behavior):: self + {
        cache_behavior: cache_behavior,
      },
      cache_behavior:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allowed_methods (required)
        // @param cached_methods (required)
        // @param path_pattern (required)
        // @param target_origin_id (required)
        // @param viewer_protocol_policy (required)
        // @param compress (optional)
        // @param default_ttl (optional)
        // @param field_level_encryption_id (optional)
        // @param max_ttl (optional)
        // @param min_ttl (optional)
        // @param smooth_streaming (optional)
        // @param trusted_signers (optional)
        // @param forwarded_values (required)
        new(rname, allowed_methods, cached_methods, path_pattern, target_origin_id, viewer_protocol_policy, forwarded_values, compress=null, default_ttl=null, field_level_encryption_id=null, max_ttl=null, min_ttl=null, smooth_streaming=null, trusted_signers=null):: {
          rname:: rname,
          allowed_methods: allowed_methods,
          cached_methods: cached_methods,
          path_pattern: path_pattern,
          target_origin_id: target_origin_id,
          viewer_protocol_policy: viewer_protocol_policy,
          [if compress != null then 'compress']: compress,
          [if default_ttl != null then 'default_ttl']: default_ttl,
          [if field_level_encryption_id != null then 'field_level_encryption_id']: field_level_encryption_id,
          [if max_ttl != null then 'max_ttl']: max_ttl,
          [if min_ttl != null then 'min_ttl']: min_ttl,
          [if smooth_streaming != null then 'smooth_streaming']: smooth_streaming,
          [if trusted_signers != null then 'trusted_signers']: trusted_signers,
          forwarded_values: forwarded_values,
          lambda_function_association:: {},
        },
        forwarded_values:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param query_string (required)
          // @param headers (optional)
          // @param query_string_cache_keys (optional)
          // @param cookies (required)
          new(rname, query_string, cookies, headers=null, query_string_cache_keys=null):: {
            rname:: rname,
            query_string: query_string,
            [if headers != null then 'headers']: headers,
            [if query_string_cache_keys != null then 'query_string_cache_keys']: query_string_cache_keys,
            cookies: cookies,
          },
          cookies:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param forward (required)
            // @param whitelisted_names (optional)
            new(rname, forward, whitelisted_names=null):: {
              rname:: rname,
              forward: forward,
              [if whitelisted_names != null then 'whitelisted_names']: whitelisted_names,
            },
          },
        },
        with_lambda_function_association(lambda_function_association):: self + {
          lambda_function_association: lambda_function_association,
        },
        lambda_function_association:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param event_type (required)
          // @param lambda_arn (required)
          // @param include_body (optional)
          new(rname, event_type, lambda_arn, include_body=null):: {
            rname:: rname,
            event_type: event_type,
            lambda_arn: lambda_arn,
            [if include_body != null then 'include_body']: include_body,
          },
        },
      },
      with_custom_error_response(custom_error_response):: self + {
        custom_error_response: custom_error_response,
      },
      custom_error_response:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param error_code (required)
        // @param error_caching_min_ttl (optional)
        // @param response_code (optional)
        // @param response_page_path (optional)
        new(rname, error_code, error_caching_min_ttl=null, response_code=null, response_page_path=null):: {
          rname:: rname,
          error_code: error_code,
          [if error_caching_min_ttl != null then 'error_caching_min_ttl']: error_caching_min_ttl,
          [if response_code != null then 'response_code']: response_code,
          [if response_page_path != null then 'response_page_path']: response_page_path,
        },
      },
      default_cache_behavior:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allowed_methods (required)
        // @param cached_methods (required)
        // @param target_origin_id (required)
        // @param viewer_protocol_policy (required)
        // @param compress (optional)
        // @param default_ttl (optional)
        // @param field_level_encryption_id (optional)
        // @param max_ttl (optional)
        // @param min_ttl (optional)
        // @param smooth_streaming (optional)
        // @param trusted_signers (optional)
        // @param forwarded_values (required)
        new(rname, allowed_methods, cached_methods, target_origin_id, viewer_protocol_policy, forwarded_values, compress=null, default_ttl=null, field_level_encryption_id=null, max_ttl=null, min_ttl=null, smooth_streaming=null, trusted_signers=null):: {
          rname:: rname,
          allowed_methods: allowed_methods,
          cached_methods: cached_methods,
          target_origin_id: target_origin_id,
          viewer_protocol_policy: viewer_protocol_policy,
          [if compress != null then 'compress']: compress,
          [if default_ttl != null then 'default_ttl']: default_ttl,
          [if field_level_encryption_id != null then 'field_level_encryption_id']: field_level_encryption_id,
          [if max_ttl != null then 'max_ttl']: max_ttl,
          [if min_ttl != null then 'min_ttl']: min_ttl,
          [if smooth_streaming != null then 'smooth_streaming']: smooth_streaming,
          [if trusted_signers != null then 'trusted_signers']: trusted_signers,
          forwarded_values: forwarded_values,
          lambda_function_association:: {},
        },
        forwarded_values:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param query_string (required)
          // @param headers (optional)
          // @param query_string_cache_keys (optional)
          // @param cookies (required)
          new(rname, query_string, cookies, headers=null, query_string_cache_keys=null):: {
            rname:: rname,
            query_string: query_string,
            [if headers != null then 'headers']: headers,
            [if query_string_cache_keys != null then 'query_string_cache_keys']: query_string_cache_keys,
            cookies: cookies,
          },
          cookies:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param forward (required)
            // @param whitelisted_names (optional)
            new(rname, forward, whitelisted_names=null):: {
              rname:: rname,
              forward: forward,
              [if whitelisted_names != null then 'whitelisted_names']: whitelisted_names,
            },
          },
        },
        with_lambda_function_association(lambda_function_association):: self + {
          lambda_function_association: lambda_function_association,
        },
        lambda_function_association:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param event_type (required)
          // @param lambda_arn (required)
          // @param include_body (optional)
          new(rname, event_type, lambda_arn, include_body=null):: {
            rname:: rname,
            event_type: event_type,
            lambda_arn: lambda_arn,
            [if include_body != null then 'include_body']: include_body,
          },
        },
      },
      with_logging_config(logging_config):: self + {
        logging_config: logging_config,
      },
      logging_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        // @param include_cookies (optional)
        // @param prefix (optional)
        new(rname, bucket, include_cookies=null, prefix=null):: {
          rname:: rname,
          bucket: bucket,
          [if include_cookies != null then 'include_cookies']: include_cookies,
          [if prefix != null then 'prefix']: prefix,
        },
      },
      with_ordered_cache_behavior(ordered_cache_behavior):: self + {
        ordered_cache_behavior: ordered_cache_behavior,
      },
      ordered_cache_behavior:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allowed_methods (required)
        // @param cached_methods (required)
        // @param path_pattern (required)
        // @param target_origin_id (required)
        // @param viewer_protocol_policy (required)
        // @param compress (optional)
        // @param default_ttl (optional)
        // @param field_level_encryption_id (optional)
        // @param max_ttl (optional)
        // @param min_ttl (optional)
        // @param smooth_streaming (optional)
        // @param trusted_signers (optional)
        // @param forwarded_values (required)
        new(rname, allowed_methods, cached_methods, path_pattern, target_origin_id, viewer_protocol_policy, forwarded_values, compress=null, default_ttl=null, field_level_encryption_id=null, max_ttl=null, min_ttl=null, smooth_streaming=null, trusted_signers=null):: {
          rname:: rname,
          allowed_methods: allowed_methods,
          cached_methods: cached_methods,
          path_pattern: path_pattern,
          target_origin_id: target_origin_id,
          viewer_protocol_policy: viewer_protocol_policy,
          [if compress != null then 'compress']: compress,
          [if default_ttl != null then 'default_ttl']: default_ttl,
          [if field_level_encryption_id != null then 'field_level_encryption_id']: field_level_encryption_id,
          [if max_ttl != null then 'max_ttl']: max_ttl,
          [if min_ttl != null then 'min_ttl']: min_ttl,
          [if smooth_streaming != null then 'smooth_streaming']: smooth_streaming,
          [if trusted_signers != null then 'trusted_signers']: trusted_signers,
          forwarded_values: forwarded_values,
          lambda_function_association:: {},
        },
        forwarded_values:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param query_string (required)
          // @param headers (optional)
          // @param query_string_cache_keys (optional)
          // @param cookies (required)
          new(rname, query_string, cookies, headers=null, query_string_cache_keys=null):: {
            rname:: rname,
            query_string: query_string,
            [if headers != null then 'headers']: headers,
            [if query_string_cache_keys != null then 'query_string_cache_keys']: query_string_cache_keys,
            cookies: cookies,
          },
          cookies:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param forward (required)
            // @param whitelisted_names (optional)
            new(rname, forward, whitelisted_names=null):: {
              rname:: rname,
              forward: forward,
              [if whitelisted_names != null then 'whitelisted_names']: whitelisted_names,
            },
          },
        },
        with_lambda_function_association(lambda_function_association):: self + {
          lambda_function_association: lambda_function_association,
        },
        lambda_function_association:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param event_type (required)
          // @param lambda_arn (required)
          // @param include_body (optional)
          new(rname, event_type, lambda_arn, include_body=null):: {
            rname:: rname,
            event_type: event_type,
            lambda_arn: lambda_arn,
            [if include_body != null then 'include_body']: include_body,
          },
        },
      },
      origin:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param domain_name (required)
        // @param origin_id (required)
        // @param origin_path (optional)
        new(rname, domain_name, origin_id, origin_path=null):: {
          rname:: rname,
          domain_name: domain_name,
          origin_id: origin_id,
          [if origin_path != null then 'origin_path']: origin_path,
          custom_header:: {},
          custom_origin_config:: {},
          s3_origin_config:: {},
        },
        with_custom_header(custom_header):: self + {
          custom_header: custom_header,
        },
        custom_header:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (required)
          // @param value (required)
          new(rname, name, value):: {
            rname:: rname,
            name: name,
            value: value,
          },
        },
        with_custom_origin_config(custom_origin_config):: self + {
          custom_origin_config: custom_origin_config,
        },
        custom_origin_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param http_port (required)
          // @param https_port (required)
          // @param origin_protocol_policy (required)
          // @param origin_ssl_protocols (required)
          // @param origin_keepalive_timeout (optional)
          // @param origin_read_timeout (optional)
          new(rname, http_port, https_port, origin_protocol_policy, origin_ssl_protocols, origin_keepalive_timeout=null, origin_read_timeout=null):: {
            rname:: rname,
            http_port: http_port,
            https_port: https_port,
            origin_protocol_policy: origin_protocol_policy,
            origin_ssl_protocols: origin_ssl_protocols,
            [if origin_keepalive_timeout != null then 'origin_keepalive_timeout']: origin_keepalive_timeout,
            [if origin_read_timeout != null then 'origin_read_timeout']: origin_read_timeout,
          },
        },
        with_s3_origin_config(s3_origin_config):: self + {
          s3_origin_config: s3_origin_config,
        },
        s3_origin_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param origin_access_identity (required)
          new(rname, origin_access_identity):: {
            rname:: rname,
            origin_access_identity: origin_access_identity,
          },
        },
      },
      with_origin_group(origin_group):: self + {
        origin_group: origin_group,
      },
      origin_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param origin_id (required)
        // @param failover_criteria (required)
        // @param member (required)
        new(rname, origin_id, failover_criteria, member):: {
          rname:: rname,
          origin_id: origin_id,
          failover_criteria: failover_criteria,
          member: member,
        },
        failover_criteria:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status_codes (required)
          new(rname, status_codes):: {
            rname:: rname,
            status_codes: status_codes,
          },
        },
        member:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param origin_id (required)
          new(rname, origin_id):: {
            rname:: rname,
            origin_id: origin_id,
          },
        },
      },
      restrictions:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param geo_restriction (required)
        new(rname, geo_restriction):: {
          rname:: rname,
          geo_restriction: geo_restriction,
        },
        geo_restriction:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param restriction_type (required)
          // @param locations (optional)
          new(rname, restriction_type, locations=null):: {
            rname:: rname,
            restriction_type: restriction_type,
            [if locations != null then 'locations']: locations,
          },
        },
      },
      viewer_certificate:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param acm_certificate_arn (optional)
        // @param cloudfront_default_certificate (optional)
        // @param iam_certificate_id (optional)
        // @param minimum_protocol_version (optional)
        // @param ssl_support_method (optional)
        new(rname, acm_certificate_arn=null, cloudfront_default_certificate=null, iam_certificate_id=null, minimum_protocol_version=null, ssl_support_method=null):: {
          rname:: rname,
          [if acm_certificate_arn != null then 'acm_certificate_arn']: acm_certificate_arn,
          [if cloudfront_default_certificate != null then 'cloudfront_default_certificate']: cloudfront_default_certificate,
          [if iam_certificate_id != null then 'iam_certificate_id']: iam_certificate_id,
          [if minimum_protocol_version != null then 'minimum_protocol_version']: minimum_protocol_version,
          [if ssl_support_method != null then 'ssl_support_method']: ssl_support_method,
        },
      },
    },
    // aws_cloudfront_origin_access_identity - https://www.terraform.io/docs/providers/aws/r/cloudfront_origin_access_identity.html
    aws_cloudfront_origin_access_identity:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param comment (optional)
      new(rname, comment=null):: {
        rname:: rname,
        [if comment != null then 'comment']: comment,
        caller_reference:: '${aws_cloudfront_origin_access_identity.%s.caller_reference}' % rname,
        cloudfront_access_identity_path:: '${aws_cloudfront_origin_access_identity.%s.cloudfront_access_identity_path}' % rname,
        etag:: '${aws_cloudfront_origin_access_identity.%s.etag}' % rname,
        iam_arn:: '${aws_cloudfront_origin_access_identity.%s.iam_arn}' % rname,
        id:: '${aws_cloudfront_origin_access_identity.%s.id}' % rname,
        s3_canonical_user_id:: '${aws_cloudfront_origin_access_identity.%s.s3_canonical_user_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudfront_public_key - https://www.terraform.io/docs/providers/aws/r/cloudfront_public_key.html
    aws_cloudfront_public_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param encoded_key (required)
      // @param comment (optional)
      new(rname, encoded_key, comment=null):: {
        rname:: rname,
        encoded_key: encoded_key,
        [if comment != null then 'comment']: comment,
        caller_reference:: '${aws_cloudfront_public_key.%s.caller_reference}' % rname,
        etag:: '${aws_cloudfront_public_key.%s.etag}' % rname,
        id:: '${aws_cloudfront_public_key.%s.id}' % rname,
        name:: '${aws_cloudfront_public_key.%s.name}' % rname,
        name_prefix:: '${aws_cloudfront_public_key.%s.name_prefix}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
    },
    // aws_cloudhsm_v2_cluster - https://www.terraform.io/docs/providers/aws/r/cloudhsm_v2_cluster.html
    aws_cloudhsm_v2_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param hsm_type (required)
      // @param subnet_ids (required)
      // @param source_backup_identifier (optional)
      // @param tags (optional)
      new(rname, hsm_type, subnet_ids, source_backup_identifier=null, tags=null):: {
        rname:: rname,
        hsm_type: hsm_type,
        subnet_ids: subnet_ids,
        [if source_backup_identifier != null then 'source_backup_identifier']: source_backup_identifier,
        [if tags != null then 'tags']: tags,
        cluster_certificates:: '${aws_cloudhsm_v2_cluster.%s.cluster_certificates}' % rname,
        cluster_id:: '${aws_cloudhsm_v2_cluster.%s.cluster_id}' % rname,
        cluster_state:: '${aws_cloudhsm_v2_cluster.%s.cluster_state}' % rname,
        id:: '${aws_cloudhsm_v2_cluster.%s.id}' % rname,
        security_group_id:: '${aws_cloudhsm_v2_cluster.%s.security_group_id}' % rname,
        vpc_id:: '${aws_cloudhsm_v2_cluster.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cloudhsm_v2_hsm - https://www.terraform.io/docs/providers/aws/r/cloudhsm_v2_hsm.html
    aws_cloudhsm_v2_hsm:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_id (required)
      new(rname, cluster_id):: {
        rname:: rname,
        cluster_id: cluster_id,
        availability_zone:: '${aws_cloudhsm_v2_hsm.%s.availability_zone}' % rname,
        hsm_eni_id:: '${aws_cloudhsm_v2_hsm.%s.hsm_eni_id}' % rname,
        hsm_id:: '${aws_cloudhsm_v2_hsm.%s.hsm_id}' % rname,
        hsm_state:: '${aws_cloudhsm_v2_hsm.%s.hsm_state}' % rname,
        id:: '${aws_cloudhsm_v2_hsm.%s.id}' % rname,
        ip_address:: '${aws_cloudhsm_v2_hsm.%s.ip_address}' % rname,
        subnet_id:: '${aws_cloudhsm_v2_hsm.%s.subnet_id}' % rname,
        timeouts:: {},
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_id(id):: {
        id::: id,
      },
      with_ip_address(ip_address):: {
        ip_address::: ip_address,
      },
      with_subnet_id(subnet_id):: {
        subnet_id::: subnet_id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cloudtrail - https://www.terraform.io/docs/providers/aws/r/cloudtrail.html
    aws_cloudtrail:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param s3_bucket_name (required)
      // @param cloud_watch_logs_group_arn (optional)
      // @param cloud_watch_logs_role_arn (optional)
      // @param enable_log_file_validation (optional)
      // @param enable_logging (optional)
      // @param include_global_service_events (optional)
      // @param is_multi_region_trail (optional)
      // @param is_organization_trail (optional)
      // @param kms_key_id (optional)
      // @param s3_key_prefix (optional)
      // @param sns_topic_name (optional)
      // @param tags (optional)
      new(rname, name, s3_bucket_name, cloud_watch_logs_group_arn=null, cloud_watch_logs_role_arn=null, enable_log_file_validation=null, enable_logging=null, include_global_service_events=null, is_multi_region_trail=null, is_organization_trail=null, kms_key_id=null, s3_key_prefix=null, sns_topic_name=null, tags=null):: {
        rname:: rname,
        name: name,
        s3_bucket_name: s3_bucket_name,
        [if cloud_watch_logs_group_arn != null then 'cloud_watch_logs_group_arn']: cloud_watch_logs_group_arn,
        [if cloud_watch_logs_role_arn != null then 'cloud_watch_logs_role_arn']: cloud_watch_logs_role_arn,
        [if enable_log_file_validation != null then 'enable_log_file_validation']: enable_log_file_validation,
        [if enable_logging != null then 'enable_logging']: enable_logging,
        [if include_global_service_events != null then 'include_global_service_events']: include_global_service_events,
        [if is_multi_region_trail != null then 'is_multi_region_trail']: is_multi_region_trail,
        [if is_organization_trail != null then 'is_organization_trail']: is_organization_trail,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if s3_key_prefix != null then 's3_key_prefix']: s3_key_prefix,
        [if sns_topic_name != null then 'sns_topic_name']: sns_topic_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_cloudtrail.%s.arn}' % rname,
        home_region:: '${aws_cloudtrail.%s.home_region}' % rname,
        id:: '${aws_cloudtrail.%s.id}' % rname,
        event_selector:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_event_selector(event_selector):: self + {
        event_selector: event_selector,
      },
      event_selector:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param include_management_events (optional)
        // @param read_write_type (optional)
        new(rname, include_management_events=null, read_write_type=null):: {
          rname:: rname,
          [if include_management_events != null then 'include_management_events']: include_management_events,
          [if read_write_type != null then 'read_write_type']: read_write_type,
          data_resource:: {},
        },
        with_data_resource(data_resource):: self + {
          data_resource: data_resource,
        },
        data_resource:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param values (required)
          new(rname, type, values):: {
            rname:: rname,
            type: type,
            values: values,
          },
        },
      },
    },
    // aws_cloudwatch_dashboard - https://www.terraform.io/docs/providers/aws/r/cloudwatch_dashboard.html
    aws_cloudwatch_dashboard:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param dashboard_body (required)
      // @param dashboard_name (required)
      new(rname, dashboard_body, dashboard_name):: {
        rname:: rname,
        dashboard_body: dashboard_body,
        dashboard_name: dashboard_name,
        dashboard_arn:: '${aws_cloudwatch_dashboard.%s.dashboard_arn}' % rname,
        id:: '${aws_cloudwatch_dashboard.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudwatch_event_permission - https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_permission.html
    aws_cloudwatch_event_permission:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param principal (required)
      // @param statement_id (required)
      // @param action (optional)
      new(rname, principal, statement_id, action=null):: {
        rname:: rname,
        principal: principal,
        statement_id: statement_id,
        [if action != null then 'action']: action,
        id:: '${aws_cloudwatch_event_permission.%s.id}' % rname,
        condition:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_condition(condition):: self + {
        condition: condition,
      },
      condition:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param type (required)
        // @param value (required)
        new(rname, key, type, value):: {
          rname:: rname,
          key: key,
          type: type,
          value: value,
        },
      },
    },
    // aws_cloudwatch_event_rule - https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_rule.html
    aws_cloudwatch_event_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param event_pattern (optional)
      // @param is_enabled (optional)
      // @param name_prefix (optional)
      // @param role_arn (optional)
      // @param schedule_expression (optional)
      // @param tags (optional)
      new(rname, description=null, event_pattern=null, is_enabled=null, name_prefix=null, role_arn=null, schedule_expression=null, tags=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if event_pattern != null then 'event_pattern']: event_pattern,
        [if is_enabled != null then 'is_enabled']: is_enabled,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if role_arn != null then 'role_arn']: role_arn,
        [if schedule_expression != null then 'schedule_expression']: schedule_expression,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_cloudwatch_event_rule.%s.arn}' % rname,
        id:: '${aws_cloudwatch_event_rule.%s.id}' % rname,
        name:: '${aws_cloudwatch_event_rule.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_cloudwatch_event_target - https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_target.html
    aws_cloudwatch_event_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param arn (required)
      // @param rule (required)
      // @param input (optional)
      // @param input_path (optional)
      // @param role_arn (optional)
      new(rname, arn, rule, input=null, input_path=null, role_arn=null):: {
        rname:: rname,
        arn: arn,
        rule: rule,
        [if input != null then 'input']: input,
        [if input_path != null then 'input_path']: input_path,
        [if role_arn != null then 'role_arn']: role_arn,
        id:: '${aws_cloudwatch_event_target.%s.id}' % rname,
        target_id:: '${aws_cloudwatch_event_target.%s.target_id}' % rname,
        batch_target:: {},
        ecs_target:: {},
        input_transformer:: {},
        kinesis_target:: {},
        run_command_targets:: {},
        sqs_target:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_target_id(target_id):: {
        target_id::: target_id,
      },
      with_batch_target(batch_target):: self + {
        batch_target: batch_target,
      },
      batch_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param job_definition (required)
        // @param job_name (required)
        // @param array_size (optional)
        // @param job_attempts (optional)
        new(rname, job_definition, job_name, array_size=null, job_attempts=null):: {
          rname:: rname,
          job_definition: job_definition,
          job_name: job_name,
          [if array_size != null then 'array_size']: array_size,
          [if job_attempts != null then 'job_attempts']: job_attempts,
        },
      },
      with_ecs_target(ecs_target):: self + {
        ecs_target: ecs_target,
      },
      ecs_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param task_definition_arn (required)
        // @param group (optional)
        // @param launch_type (optional)
        // @param platform_version (optional)
        // @param task_count (optional)
        new(rname, task_definition_arn, group=null, launch_type=null, platform_version=null, task_count=null):: {
          rname:: rname,
          task_definition_arn: task_definition_arn,
          [if group != null then 'group']: group,
          [if launch_type != null then 'launch_type']: launch_type,
          [if platform_version != null then 'platform_version']: platform_version,
          [if task_count != null then 'task_count']: task_count,
          network_configuration:: {},
        },
        with_network_configuration(network_configuration):: self + {
          network_configuration: network_configuration,
        },
        network_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param subnets (required)
          // @param assign_public_ip (optional)
          // @param security_groups (optional)
          new(rname, subnets, assign_public_ip=null, security_groups=null):: {
            rname:: rname,
            subnets: subnets,
            [if assign_public_ip != null then 'assign_public_ip']: assign_public_ip,
            [if security_groups != null then 'security_groups']: security_groups,
          },
        },
      },
      with_input_transformer(input_transformer):: self + {
        input_transformer: input_transformer,
      },
      input_transformer:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param input_template (required)
        // @param input_paths (optional)
        new(rname, input_template, input_paths=null):: {
          rname:: rname,
          input_template: input_template,
          [if input_paths != null then 'input_paths']: input_paths,
        },
      },
      with_kinesis_target(kinesis_target):: self + {
        kinesis_target: kinesis_target,
      },
      kinesis_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param partition_key_path (optional)
        new(rname, partition_key_path=null):: {
          rname:: rname,
          [if partition_key_path != null then 'partition_key_path']: partition_key_path,
        },
      },
      with_run_command_targets(run_command_targets):: self + {
        run_command_targets: run_command_targets,
      },
      run_command_targets:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        new(rname, key, values):: {
          rname:: rname,
          key: key,
          values: values,
        },
      },
      with_sqs_target(sqs_target):: self + {
        sqs_target: sqs_target,
      },
      sqs_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param message_group_id (optional)
        new(rname, message_group_id=null):: {
          rname:: rname,
          [if message_group_id != null then 'message_group_id']: message_group_id,
        },
      },
    },
    // aws_cloudwatch_log_destination - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_destination.html
    aws_cloudwatch_log_destination:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param role_arn (required)
      // @param target_arn (required)
      new(rname, name, role_arn, target_arn):: {
        rname:: rname,
        name: name,
        role_arn: role_arn,
        target_arn: target_arn,
        arn:: '${aws_cloudwatch_log_destination.%s.arn}' % rname,
        id:: '${aws_cloudwatch_log_destination.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudwatch_log_destination_policy - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_destination_policy.html
    aws_cloudwatch_log_destination_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param access_policy (required)
      // @param destination_name (required)
      new(rname, access_policy, destination_name):: {
        rname:: rname,
        access_policy: access_policy,
        destination_name: destination_name,
        id:: '${aws_cloudwatch_log_destination_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudwatch_log_group - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html
    aws_cloudwatch_log_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param kms_key_id (optional)
      // @param name_prefix (optional)
      // @param retention_in_days (optional)
      // @param tags (optional)
      new(rname, kms_key_id=null, name_prefix=null, retention_in_days=null, tags=null):: {
        rname:: rname,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if retention_in_days != null then 'retention_in_days']: retention_in_days,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_cloudwatch_log_group.%s.arn}' % rname,
        id:: '${aws_cloudwatch_log_group.%s.id}' % rname,
        name:: '${aws_cloudwatch_log_group.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_cloudwatch_log_metric_filter - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_metric_filter.html
    aws_cloudwatch_log_metric_filter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param log_group_name (required)
      // @param name (required)
      // @param pattern (required)
      // @param metric_transformation (required)
      new(rname, log_group_name, name, pattern, metric_transformation):: {
        rname:: rname,
        log_group_name: log_group_name,
        name: name,
        pattern: pattern,
        id:: '${aws_cloudwatch_log_metric_filter.%s.id}' % rname,
        metric_transformation: metric_transformation,
      },
      with_id(id):: {
        id::: id,
      },
      metric_transformation:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param namespace (required)
        // @param value (required)
        // @param default_value (optional)
        new(rname, name, namespace, value, default_value=null):: {
          rname:: rname,
          name: name,
          namespace: namespace,
          value: value,
          [if default_value != null then 'default_value']: default_value,
        },
      },
    },
    // aws_cloudwatch_log_resource_policy - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_resource_policy.html
    aws_cloudwatch_log_resource_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy_document (required)
      // @param policy_name (required)
      new(rname, policy_document, policy_name):: {
        rname:: rname,
        policy_document: policy_document,
        policy_name: policy_name,
        id:: '${aws_cloudwatch_log_resource_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudwatch_log_stream - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_stream.html
    aws_cloudwatch_log_stream:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param log_group_name (required)
      // @param name (required)
      new(rname, log_group_name, name):: {
        rname:: rname,
        log_group_name: log_group_name,
        name: name,
        arn:: '${aws_cloudwatch_log_stream.%s.arn}' % rname,
        id:: '${aws_cloudwatch_log_stream.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cloudwatch_log_subscription_filter - https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_subscription_filter.html
    aws_cloudwatch_log_subscription_filter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination_arn (required)
      // @param filter_pattern (required)
      // @param log_group_name (required)
      // @param name (required)
      // @param distribution (optional)
      new(rname, destination_arn, filter_pattern, log_group_name, name, distribution=null):: {
        rname:: rname,
        destination_arn: destination_arn,
        filter_pattern: filter_pattern,
        log_group_name: log_group_name,
        name: name,
        [if distribution != null then 'distribution']: distribution,
        id:: '${aws_cloudwatch_log_subscription_filter.%s.id}' % rname,
        role_arn:: '${aws_cloudwatch_log_subscription_filter.%s.role_arn}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_role_arn(role_arn):: {
        role_arn::: role_arn,
      },
    },
    // aws_cloudwatch_metric_alarm - https://www.terraform.io/docs/providers/aws/r/cloudwatch_metric_alarm.html
    aws_cloudwatch_metric_alarm:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param alarm_name (required)
      // @param comparison_operator (required)
      // @param evaluation_periods (required)
      // @param actions_enabled (optional)
      // @param alarm_actions (optional)
      // @param alarm_description (optional)
      // @param datapoints_to_alarm (optional)
      // @param dimensions (optional)
      // @param extended_statistic (optional)
      // @param insufficient_data_actions (optional)
      // @param metric_name (optional)
      // @param namespace (optional)
      // @param ok_actions (optional)
      // @param period (optional)
      // @param statistic (optional)
      // @param tags (optional)
      // @param threshold (optional)
      // @param threshold_metric_id (optional)
      // @param treat_missing_data (optional)
      // @param unit (optional)
      new(rname, alarm_name, comparison_operator, evaluation_periods, actions_enabled=null, alarm_actions=null, alarm_description=null, datapoints_to_alarm=null, dimensions=null, extended_statistic=null, insufficient_data_actions=null, metric_name=null, namespace=null, ok_actions=null, period=null, statistic=null, tags=null, threshold=null, threshold_metric_id=null, treat_missing_data=null, unit=null):: {
        rname:: rname,
        alarm_name: alarm_name,
        comparison_operator: comparison_operator,
        evaluation_periods: evaluation_periods,
        [if actions_enabled != null then 'actions_enabled']: actions_enabled,
        [if alarm_actions != null then 'alarm_actions']: alarm_actions,
        [if alarm_description != null then 'alarm_description']: alarm_description,
        [if datapoints_to_alarm != null then 'datapoints_to_alarm']: datapoints_to_alarm,
        [if dimensions != null then 'dimensions']: dimensions,
        [if extended_statistic != null then 'extended_statistic']: extended_statistic,
        [if insufficient_data_actions != null then 'insufficient_data_actions']: insufficient_data_actions,
        [if metric_name != null then 'metric_name']: metric_name,
        [if namespace != null then 'namespace']: namespace,
        [if ok_actions != null then 'ok_actions']: ok_actions,
        [if period != null then 'period']: period,
        [if statistic != null then 'statistic']: statistic,
        [if tags != null then 'tags']: tags,
        [if threshold != null then 'threshold']: threshold,
        [if threshold_metric_id != null then 'threshold_metric_id']: threshold_metric_id,
        [if treat_missing_data != null then 'treat_missing_data']: treat_missing_data,
        [if unit != null then 'unit']: unit,
        arn:: '${aws_cloudwatch_metric_alarm.%s.arn}' % rname,
        evaluate_low_sample_count_percentiles:: '${aws_cloudwatch_metric_alarm.%s.evaluate_low_sample_count_percentiles}' % rname,
        id:: '${aws_cloudwatch_metric_alarm.%s.id}' % rname,
        metric_query:: {},
      },
      with_evaluate_low_sample_count_percentiles(evaluate_low_sample_count_percentiles):: {
        evaluate_low_sample_count_percentiles::: evaluate_low_sample_count_percentiles,
      },
      with_id(id):: {
        id::: id,
      },
      with_metric_query(metric_query):: self + {
        metric_query: metric_query,
      },
      metric_query:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param id (required)
        // @param expression (optional)
        // @param label (optional)
        // @param return_data (optional)
        new(rname, id, expression=null, label=null, return_data=null):: {
          rname:: rname,
          id: id,
          [if expression != null then 'expression']: expression,
          [if label != null then 'label']: label,
          [if return_data != null then 'return_data']: return_data,
          metric:: {},
        },
        with_metric(metric):: self + {
          metric: metric,
        },
        metric:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param metric_name (required)
          // @param period (required)
          // @param stat (required)
          // @param dimensions (optional)
          // @param namespace (optional)
          // @param unit (optional)
          new(rname, metric_name, period, stat, dimensions=null, namespace=null, unit=null):: {
            rname:: rname,
            metric_name: metric_name,
            period: period,
            stat: stat,
            [if dimensions != null then 'dimensions']: dimensions,
            [if namespace != null then 'namespace']: namespace,
            [if unit != null then 'unit']: unit,
          },
        },
      },
    },
    // aws_codebuild_project - https://www.terraform.io/docs/providers/aws/r/codebuild_project.html
    aws_codebuild_project:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param service_role (required)
      // @param badge_enabled (optional)
      // @param build_timeout (optional)
      // @param queued_timeout (optional)
      // @param source_version (optional)
      // @param tags (optional)
      // @param artifacts (required)
      // @param environment (required)
      // @param source (required)
      new(rname, name, service_role, artifacts, environment, source, badge_enabled=null, build_timeout=null, queued_timeout=null, source_version=null, tags=null):: {
        rname:: rname,
        name: name,
        service_role: service_role,
        [if badge_enabled != null then 'badge_enabled']: badge_enabled,
        [if build_timeout != null then 'build_timeout']: build_timeout,
        [if queued_timeout != null then 'queued_timeout']: queued_timeout,
        [if source_version != null then 'source_version']: source_version,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_codebuild_project.%s.arn}' % rname,
        badge_url:: '${aws_codebuild_project.%s.badge_url}' % rname,
        description:: '${aws_codebuild_project.%s.description}' % rname,
        encryption_key:: '${aws_codebuild_project.%s.encryption_key}' % rname,
        id:: '${aws_codebuild_project.%s.id}' % rname,
        artifacts: artifacts,
        cache:: {},
        environment: environment,
        logs_config:: {},
        secondary_artifacts:: {},
        secondary_sources:: {},
        source: source,
        vpc_config:: {},
      },
      with_description(description):: {
        description::: description,
      },
      with_encryption_key(encryption_key):: {
        encryption_key::: encryption_key,
      },
      with_id(id):: {
        id::: id,
      },
      artifacts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param artifact_identifier (optional)
        // @param encryption_disabled (optional)
        // @param location (optional)
        // @param name (optional)
        // @param namespace_type (optional)
        // @param override_artifact_name (optional)
        // @param packaging (optional)
        // @param path (optional)
        new(rname, type, artifact_identifier=null, encryption_disabled=null, location=null, name=null, namespace_type=null, override_artifact_name=null, packaging=null, path=null):: {
          rname:: rname,
          type: type,
          [if artifact_identifier != null then 'artifact_identifier']: artifact_identifier,
          [if encryption_disabled != null then 'encryption_disabled']: encryption_disabled,
          [if location != null then 'location']: location,
          [if name != null then 'name']: name,
          [if namespace_type != null then 'namespace_type']: namespace_type,
          [if override_artifact_name != null then 'override_artifact_name']: override_artifact_name,
          [if packaging != null then 'packaging']: packaging,
          [if path != null then 'path']: path,
        },
      },
      with_cache(cache):: self + {
        cache: cache,
      },
      cache:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param location (optional)
        // @param modes (optional)
        // @param type (optional)
        new(rname, location=null, modes=null, type=null):: {
          rname:: rname,
          [if location != null then 'location']: location,
          [if modes != null then 'modes']: modes,
          [if type != null then 'type']: type,
        },
      },
      environment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param compute_type (required)
        // @param image (required)
        // @param type (required)
        // @param certificate (optional)
        // @param image_pull_credentials_type (optional)
        // @param privileged_mode (optional)
        new(rname, compute_type, image, type, certificate=null, image_pull_credentials_type=null, privileged_mode=null):: {
          rname:: rname,
          compute_type: compute_type,
          image: image,
          type: type,
          [if certificate != null then 'certificate']: certificate,
          [if image_pull_credentials_type != null then 'image_pull_credentials_type']: image_pull_credentials_type,
          [if privileged_mode != null then 'privileged_mode']: privileged_mode,
          environment_variable:: {},
          registry_credential:: {},
        },
        with_environment_variable(environment_variable):: self + {
          environment_variable: environment_variable,
        },
        environment_variable:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (required)
          // @param value (required)
          // @param type (optional)
          new(rname, name, value, type=null):: {
            rname:: rname,
            name: name,
            value: value,
            [if type != null then 'type']: type,
          },
        },
        with_registry_credential(registry_credential):: self + {
          registry_credential: registry_credential,
        },
        registry_credential:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param credential (required)
          // @param credential_provider (required)
          new(rname, credential, credential_provider):: {
            rname:: rname,
            credential: credential,
            credential_provider: credential_provider,
          },
        },
      },
      with_logs_config(logs_config):: self + {
        logs_config: logs_config,
      },
      logs_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          cloudwatch_logs:: {},
          s3_logs:: {},
        },
        with_cloudwatch_logs(cloudwatch_logs):: self + {
          cloudwatch_logs: cloudwatch_logs,
        },
        cloudwatch_logs:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param group_name (optional)
          // @param status (optional)
          // @param stream_name (optional)
          new(rname, group_name=null, status=null, stream_name=null):: {
            rname:: rname,
            [if group_name != null then 'group_name']: group_name,
            [if status != null then 'status']: status,
            [if stream_name != null then 'stream_name']: stream_name,
          },
        },
        with_s3_logs(s3_logs):: self + {
          s3_logs: s3_logs,
        },
        s3_logs:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param encryption_disabled (optional)
          // @param location (optional)
          // @param status (optional)
          new(rname, encryption_disabled=null, location=null, status=null):: {
            rname:: rname,
            [if encryption_disabled != null then 'encryption_disabled']: encryption_disabled,
            [if location != null then 'location']: location,
            [if status != null then 'status']: status,
          },
        },
      },
      with_secondary_artifacts(secondary_artifacts):: self + {
        secondary_artifacts: secondary_artifacts,
      },
      secondary_artifacts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param artifact_identifier (required)
        // @param type (required)
        // @param encryption_disabled (optional)
        // @param location (optional)
        // @param name (optional)
        // @param namespace_type (optional)
        // @param override_artifact_name (optional)
        // @param packaging (optional)
        // @param path (optional)
        new(rname, artifact_identifier, type, encryption_disabled=null, location=null, name=null, namespace_type=null, override_artifact_name=null, packaging=null, path=null):: {
          rname:: rname,
          artifact_identifier: artifact_identifier,
          type: type,
          [if encryption_disabled != null then 'encryption_disabled']: encryption_disabled,
          [if location != null then 'location']: location,
          [if name != null then 'name']: name,
          [if namespace_type != null then 'namespace_type']: namespace_type,
          [if override_artifact_name != null then 'override_artifact_name']: override_artifact_name,
          [if packaging != null then 'packaging']: packaging,
          [if path != null then 'path']: path,
        },
      },
      with_secondary_sources(secondary_sources):: self + {
        secondary_sources: secondary_sources,
      },
      secondary_sources:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param source_identifier (required)
        // @param type (required)
        // @param buildspec (optional)
        // @param git_clone_depth (optional)
        // @param insecure_ssl (optional)
        // @param location (optional)
        // @param report_build_status (optional)
        new(rname, source_identifier, type, buildspec=null, git_clone_depth=null, insecure_ssl=null, location=null, report_build_status=null):: {
          rname:: rname,
          source_identifier: source_identifier,
          type: type,
          [if buildspec != null then 'buildspec']: buildspec,
          [if git_clone_depth != null then 'git_clone_depth']: git_clone_depth,
          [if insecure_ssl != null then 'insecure_ssl']: insecure_ssl,
          [if location != null then 'location']: location,
          [if report_build_status != null then 'report_build_status']: report_build_status,
          auth:: {},
          git_submodules_config:: {},
        },
        with_auth(auth):: self + {
          auth: auth,
        },
        auth:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param resource (optional)
          new(rname, type, resource=null):: {
            rname:: rname,
            type: type,
            [if resource != null then 'resource']: resource,
          },
        },
        with_git_submodules_config(git_submodules_config):: self + {
          git_submodules_config: git_submodules_config,
        },
        git_submodules_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param fetch_submodules (required)
          new(rname, fetch_submodules):: {
            rname:: rname,
            fetch_submodules: fetch_submodules,
          },
        },
      },
      source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param buildspec (optional)
        // @param git_clone_depth (optional)
        // @param insecure_ssl (optional)
        // @param location (optional)
        // @param report_build_status (optional)
        new(rname, type, buildspec=null, git_clone_depth=null, insecure_ssl=null, location=null, report_build_status=null):: {
          rname:: rname,
          type: type,
          [if buildspec != null then 'buildspec']: buildspec,
          [if git_clone_depth != null then 'git_clone_depth']: git_clone_depth,
          [if insecure_ssl != null then 'insecure_ssl']: insecure_ssl,
          [if location != null then 'location']: location,
          [if report_build_status != null then 'report_build_status']: report_build_status,
          auth:: {},
          git_submodules_config:: {},
        },
        with_auth(auth):: self + {
          auth: auth,
        },
        auth:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param resource (optional)
          new(rname, type, resource=null):: {
            rname:: rname,
            type: type,
            [if resource != null then 'resource']: resource,
          },
        },
        with_git_submodules_config(git_submodules_config):: self + {
          git_submodules_config: git_submodules_config,
        },
        git_submodules_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param fetch_submodules (required)
          new(rname, fetch_submodules):: {
            rname:: rname,
            fetch_submodules: fetch_submodules,
          },
        },
      },
      with_vpc_config(vpc_config):: self + {
        vpc_config: vpc_config,
      },
      vpc_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_ids (required)
        // @param subnets (required)
        // @param vpc_id (required)
        new(rname, security_group_ids, subnets, vpc_id):: {
          rname:: rname,
          security_group_ids: security_group_ids,
          subnets: subnets,
          vpc_id: vpc_id,
        },
      },
    },
    // aws_codebuild_source_credential - https://www.terraform.io/docs/providers/aws/r/codebuild_source_credential.html
    aws_codebuild_source_credential:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param auth_type (required)
      // @param server_type (required)
      // @param token (required)
      // @param user_name (optional)
      new(rname, auth_type, server_type, token, user_name=null):: {
        rname:: rname,
        auth_type: auth_type,
        server_type: server_type,
        token: token,
        [if user_name != null then 'user_name']: user_name,
        arn:: '${aws_codebuild_source_credential.%s.arn}' % rname,
        id:: '${aws_codebuild_source_credential.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_codebuild_webhook - https://www.terraform.io/docs/providers/aws/r/codebuild_webhook.html
    aws_codebuild_webhook:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param project_name (required)
      // @param branch_filter (optional)
      new(rname, project_name, branch_filter=null):: {
        rname:: rname,
        project_name: project_name,
        [if branch_filter != null then 'branch_filter']: branch_filter,
        id:: '${aws_codebuild_webhook.%s.id}' % rname,
        payload_url:: '${aws_codebuild_webhook.%s.payload_url}' % rname,
        secret:: '${aws_codebuild_webhook.%s.secret}' % rname,
        url:: '${aws_codebuild_webhook.%s.url}' % rname,
        filter_group:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_filter_group(filter_group):: self + {
        filter_group: filter_group,
      },
      filter_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          filter:: {},
        },
        with_filter(filter):: self + {
          filter: filter,
        },
        filter:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param pattern (required)
          // @param type (required)
          // @param exclude_matched_pattern (optional)
          new(rname, pattern, type, exclude_matched_pattern=null):: {
            rname:: rname,
            pattern: pattern,
            type: type,
            [if exclude_matched_pattern != null then 'exclude_matched_pattern']: exclude_matched_pattern,
          },
        },
      },
    },
    // aws_codecommit_repository - https://www.terraform.io/docs/providers/aws/r/codecommit_repository.html
    aws_codecommit_repository:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param repository_name (required)
      // @param default_branch (optional)
      // @param description (optional)
      // @param tags (optional)
      new(rname, repository_name, default_branch=null, description=null, tags=null):: {
        rname:: rname,
        repository_name: repository_name,
        [if default_branch != null then 'default_branch']: default_branch,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_codecommit_repository.%s.arn}' % rname,
        clone_url_http:: '${aws_codecommit_repository.%s.clone_url_http}' % rname,
        clone_url_ssh:: '${aws_codecommit_repository.%s.clone_url_ssh}' % rname,
        id:: '${aws_codecommit_repository.%s.id}' % rname,
        repository_id:: '${aws_codecommit_repository.%s.repository_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_codecommit_trigger - https://www.terraform.io/docs/providers/aws/r/codecommit_trigger.html
    aws_codecommit_trigger:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param repository_name (required)
      // @param trigger (required)
      new(rname, repository_name, trigger):: {
        rname:: rname,
        repository_name: repository_name,
        configuration_id:: '${aws_codecommit_trigger.%s.configuration_id}' % rname,
        id:: '${aws_codecommit_trigger.%s.id}' % rname,
        trigger: trigger,
      },
      with_id(id):: {
        id::: id,
      },
      trigger:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param destination_arn (required)
        // @param events (required)
        // @param name (required)
        // @param branches (optional)
        // @param custom_data (optional)
        new(rname, destination_arn, events, name, branches=null, custom_data=null):: {
          rname:: rname,
          destination_arn: destination_arn,
          events: events,
          name: name,
          [if branches != null then 'branches']: branches,
          [if custom_data != null then 'custom_data']: custom_data,
        },
      },
    },
    // aws_codedeploy_app - https://www.terraform.io/docs/providers/aws/r/codedeploy_app.html
    aws_codedeploy_app:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param compute_platform (optional)
      new(rname, name, compute_platform=null):: {
        rname:: rname,
        name: name,
        [if compute_platform != null then 'compute_platform']: compute_platform,
        id:: '${aws_codedeploy_app.%s.id}' % rname,
        unique_id:: '${aws_codedeploy_app.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_unique_id(unique_id):: {
        unique_id::: unique_id,
      },
    },
    // aws_codedeploy_deployment_config - https://www.terraform.io/docs/providers/aws/r/codedeploy_deployment_config.html
    aws_codedeploy_deployment_config:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deployment_config_name (required)
      // @param compute_platform (optional)
      new(rname, deployment_config_name, compute_platform=null):: {
        rname:: rname,
        deployment_config_name: deployment_config_name,
        [if compute_platform != null then 'compute_platform']: compute_platform,
        deployment_config_id:: '${aws_codedeploy_deployment_config.%s.deployment_config_id}' % rname,
        id:: '${aws_codedeploy_deployment_config.%s.id}' % rname,
        minimum_healthy_hosts:: {},
        traffic_routing_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_minimum_healthy_hosts(minimum_healthy_hosts):: self + {
        minimum_healthy_hosts: minimum_healthy_hosts,
      },
      minimum_healthy_hosts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (optional)
        // @param value (optional)
        new(rname, type=null, value=null):: {
          rname:: rname,
          [if type != null then 'type']: type,
          [if value != null then 'value']: value,
        },
      },
      with_traffic_routing_config(traffic_routing_config):: self + {
        traffic_routing_config: traffic_routing_config,
      },
      traffic_routing_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (optional)
        new(rname, type=null):: {
          rname:: rname,
          [if type != null then 'type']: type,
          time_based_canary:: {},
          time_based_linear:: {},
        },
        with_time_based_canary(time_based_canary):: self + {
          time_based_canary: time_based_canary,
        },
        time_based_canary:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param interval (optional)
          // @param percentage (optional)
          new(rname, interval=null, percentage=null):: {
            rname:: rname,
            [if interval != null then 'interval']: interval,
            [if percentage != null then 'percentage']: percentage,
          },
        },
        with_time_based_linear(time_based_linear):: self + {
          time_based_linear: time_based_linear,
        },
        time_based_linear:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param interval (optional)
          // @param percentage (optional)
          new(rname, interval=null, percentage=null):: {
            rname:: rname,
            [if interval != null then 'interval']: interval,
            [if percentage != null then 'percentage']: percentage,
          },
        },
      },
    },
    // aws_codedeploy_deployment_group - https://www.terraform.io/docs/providers/aws/r/codedeploy_deployment_group.html
    aws_codedeploy_deployment_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param app_name (required)
      // @param deployment_group_name (required)
      // @param service_role_arn (required)
      // @param autoscaling_groups (optional)
      // @param deployment_config_name (optional)
      new(rname, app_name, deployment_group_name, service_role_arn, autoscaling_groups=null, deployment_config_name=null):: {
        rname:: rname,
        app_name: app_name,
        deployment_group_name: deployment_group_name,
        service_role_arn: service_role_arn,
        [if autoscaling_groups != null then 'autoscaling_groups']: autoscaling_groups,
        [if deployment_config_name != null then 'deployment_config_name']: deployment_config_name,
        id:: '${aws_codedeploy_deployment_group.%s.id}' % rname,
        alarm_configuration:: {},
        auto_rollback_configuration:: {},
        blue_green_deployment_config:: {},
        deployment_style:: {},
        ec2_tag_filter:: {},
        ec2_tag_set:: {},
        ecs_service:: {},
        load_balancer_info:: {},
        on_premises_instance_tag_filter:: {},
        trigger_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_alarm_configuration(alarm_configuration):: self + {
        alarm_configuration: alarm_configuration,
      },
      alarm_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param alarms (optional)
        // @param enabled (optional)
        // @param ignore_poll_alarm_failure (optional)
        new(rname, alarms=null, enabled=null, ignore_poll_alarm_failure=null):: {
          rname:: rname,
          [if alarms != null then 'alarms']: alarms,
          [if enabled != null then 'enabled']: enabled,
          [if ignore_poll_alarm_failure != null then 'ignore_poll_alarm_failure']: ignore_poll_alarm_failure,
        },
      },
      with_auto_rollback_configuration(auto_rollback_configuration):: self + {
        auto_rollback_configuration: auto_rollback_configuration,
      },
      auto_rollback_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        // @param events (optional)
        new(rname, enabled=null, events=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
          [if events != null then 'events']: events,
        },
      },
      with_blue_green_deployment_config(blue_green_deployment_config):: self + {
        blue_green_deployment_config: blue_green_deployment_config,
      },
      blue_green_deployment_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          deployment_ready_option:: {},
          green_fleet_provisioning_option:: {},
          terminate_blue_instances_on_deployment_success:: {},
        },
        with_deployment_ready_option(deployment_ready_option):: self + {
          deployment_ready_option: deployment_ready_option,
        },
        deployment_ready_option:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param action_on_timeout (optional)
          // @param wait_time_in_minutes (optional)
          new(rname, action_on_timeout=null, wait_time_in_minutes=null):: {
            rname:: rname,
            [if action_on_timeout != null then 'action_on_timeout']: action_on_timeout,
            [if wait_time_in_minutes != null then 'wait_time_in_minutes']: wait_time_in_minutes,
          },
        },
        with_green_fleet_provisioning_option(green_fleet_provisioning_option):: self + {
          green_fleet_provisioning_option: green_fleet_provisioning_option,
        },
        green_fleet_provisioning_option:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param action (optional)
          new(rname, action=null):: {
            rname:: rname,
            [if action != null then 'action']: action,
          },
        },
        with_terminate_blue_instances_on_deployment_success(terminate_blue_instances_on_deployment_success):: self + {
          terminate_blue_instances_on_deployment_success: terminate_blue_instances_on_deployment_success,
        },
        terminate_blue_instances_on_deployment_success:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param action (optional)
          // @param termination_wait_time_in_minutes (optional)
          new(rname, action=null, termination_wait_time_in_minutes=null):: {
            rname:: rname,
            [if action != null then 'action']: action,
            [if termination_wait_time_in_minutes != null then 'termination_wait_time_in_minutes']: termination_wait_time_in_minutes,
          },
        },
      },
      with_deployment_style(deployment_style):: self + {
        deployment_style: deployment_style,
      },
      deployment_style:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param deployment_option (optional)
        // @param deployment_type (optional)
        new(rname, deployment_option=null, deployment_type=null):: {
          rname:: rname,
          [if deployment_option != null then 'deployment_option']: deployment_option,
          [if deployment_type != null then 'deployment_type']: deployment_type,
        },
      },
      with_ec2_tag_filter(ec2_tag_filter):: self + {
        ec2_tag_filter: ec2_tag_filter,
      },
      ec2_tag_filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (optional)
        // @param type (optional)
        // @param value (optional)
        new(rname, key=null, type=null, value=null):: {
          rname:: rname,
          [if key != null then 'key']: key,
          [if type != null then 'type']: type,
          [if value != null then 'value']: value,
        },
      },
      with_ec2_tag_set(ec2_tag_set):: self + {
        ec2_tag_set: ec2_tag_set,
      },
      ec2_tag_set:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          ec2_tag_filter:: {},
        },
        with_ec2_tag_filter(ec2_tag_filter):: self + {
          ec2_tag_filter: ec2_tag_filter,
        },
        ec2_tag_filter:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param key (optional)
          // @param type (optional)
          // @param value (optional)
          new(rname, key=null, type=null, value=null):: {
            rname:: rname,
            [if key != null then 'key']: key,
            [if type != null then 'type']: type,
            [if value != null then 'value']: value,
          },
        },
      },
      with_ecs_service(ecs_service):: self + {
        ecs_service: ecs_service,
      },
      ecs_service:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cluster_name (required)
        // @param service_name (required)
        new(rname, cluster_name, service_name):: {
          rname:: rname,
          cluster_name: cluster_name,
          service_name: service_name,
        },
      },
      with_load_balancer_info(load_balancer_info):: self + {
        load_balancer_info: load_balancer_info,
      },
      load_balancer_info:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          elb_info:: {},
          target_group_info:: {},
          target_group_pair_info:: {},
        },
        with_elb_info(elb_info):: self + {
          elb_info: elb_info,
        },
        elb_info:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (optional)
          new(rname, name=null):: {
            rname:: rname,
            [if name != null then 'name']: name,
          },
        },
        with_target_group_info(target_group_info):: self + {
          target_group_info: target_group_info,
        },
        target_group_info:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (optional)
          new(rname, name=null):: {
            rname:: rname,
            [if name != null then 'name']: name,
          },
        },
        with_target_group_pair_info(target_group_pair_info):: self + {
          target_group_pair_info: target_group_pair_info,
        },
        target_group_pair_info:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param prod_traffic_route (required)
          // @param target_group (required)
          new(rname, prod_traffic_route, target_group):: {
            rname:: rname,
            prod_traffic_route: prod_traffic_route,
            target_group: target_group,
            test_traffic_route:: {},
          },
          prod_traffic_route:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param listener_arns (required)
            new(rname, listener_arns):: {
              rname:: rname,
              listener_arns: listener_arns,
            },
          },
          target_group:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            new(rname, name):: {
              rname:: rname,
              name: name,
            },
          },
          with_test_traffic_route(test_traffic_route):: self + {
            test_traffic_route: test_traffic_route,
          },
          test_traffic_route:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param listener_arns (required)
            new(rname, listener_arns):: {
              rname:: rname,
              listener_arns: listener_arns,
            },
          },
        },
      },
      with_on_premises_instance_tag_filter(on_premises_instance_tag_filter):: self + {
        on_premises_instance_tag_filter: on_premises_instance_tag_filter,
      },
      on_premises_instance_tag_filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (optional)
        // @param type (optional)
        // @param value (optional)
        new(rname, key=null, type=null, value=null):: {
          rname:: rname,
          [if key != null then 'key']: key,
          [if type != null then 'type']: type,
          [if value != null then 'value']: value,
        },
      },
      with_trigger_configuration(trigger_configuration):: self + {
        trigger_configuration: trigger_configuration,
      },
      trigger_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param trigger_events (required)
        // @param trigger_name (required)
        // @param trigger_target_arn (required)
        new(rname, trigger_events, trigger_name, trigger_target_arn):: {
          rname:: rname,
          trigger_events: trigger_events,
          trigger_name: trigger_name,
          trigger_target_arn: trigger_target_arn,
        },
      },
    },
    // aws_codepipeline - https://www.terraform.io/docs/providers/aws/r/codepipeline.html
    aws_codepipeline:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param role_arn (required)
      // @param tags (optional)
      // @param artifact_store (required)
      // @param stage (required)
      new(rname, name, role_arn, artifact_store, stage, tags=null):: {
        rname:: rname,
        name: name,
        role_arn: role_arn,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_codepipeline.%s.arn}' % rname,
        id:: '${aws_codepipeline.%s.id}' % rname,
        artifact_store: artifact_store,
        stage: stage,
      },
      with_id(id):: {
        id::: id,
      },
      artifact_store:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param location (required)
        // @param type (required)
        new(rname, location, type):: {
          rname:: rname,
          location: location,
          type: type,
          encryption_key:: {},
        },
        with_encryption_key(encryption_key):: self + {
          encryption_key: encryption_key,
        },
        encryption_key:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param id (required)
          // @param type (required)
          new(rname, id, type):: {
            rname:: rname,
            id: id,
            type: type,
          },
        },
      },
      stage:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param action (required)
        new(rname, name, action):: {
          rname:: rname,
          name: name,
          action: action,
        },
        action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param category (required)
          // @param name (required)
          // @param owner (required)
          // @param provider (required)
          // @param version (required)
          // @param configuration (optional)
          // @param input_artifacts (optional)
          // @param output_artifacts (optional)
          // @param role_arn (optional)
          new(rname, category, name, owner, provider, version, configuration=null, input_artifacts=null, output_artifacts=null, role_arn=null):: {
            rname:: rname,
            category: category,
            name: name,
            owner: owner,
            provider: provider,
            version: version,
            [if configuration != null then 'configuration']: configuration,
            [if input_artifacts != null then 'input_artifacts']: input_artifacts,
            [if output_artifacts != null then 'output_artifacts']: output_artifacts,
            [if role_arn != null then 'role_arn']: role_arn,
            run_order:: '${aws_codepipeline.%s.stage.action.run_order}' % rname,
          },
          with_run_order(run_order):: {
            run_order::: run_order,
          },
        },
      },
    },
    // aws_codepipeline_webhook - https://www.terraform.io/docs/providers/aws/r/codepipeline_webhook.html
    aws_codepipeline_webhook:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param authentication (required)
      // @param name (required)
      // @param target_action (required)
      // @param target_pipeline (required)
      // @param tags (optional)
      // @param filter (required)
      new(rname, authentication, name, target_action, target_pipeline, filter, tags=null):: {
        rname:: rname,
        authentication: authentication,
        name: name,
        target_action: target_action,
        target_pipeline: target_pipeline,
        [if tags != null then 'tags']: tags,
        id:: '${aws_codepipeline_webhook.%s.id}' % rname,
        url:: '${aws_codepipeline_webhook.%s.url}' % rname,
        authentication_configuration:: {},
        filter: filter,
      },
      with_id(id):: {
        id::: id,
      },
      with_authentication_configuration(authentication_configuration):: self + {
        authentication_configuration: authentication_configuration,
      },
      authentication_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allowed_ip_range (optional)
        // @param secret_token (optional)
        new(rname, allowed_ip_range=null, secret_token=null):: {
          rname:: rname,
          [if allowed_ip_range != null then 'allowed_ip_range']: allowed_ip_range,
          [if secret_token != null then 'secret_token']: secret_token,
        },
      },
      filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param json_path (required)
        // @param match_equals (required)
        new(rname, json_path, match_equals):: {
          rname:: rname,
          json_path: json_path,
          match_equals: match_equals,
        },
      },
    },
    // aws_codestarnotifications_notification_rule - https://www.terraform.io/docs/providers/aws/r/codestarnotifications_notification_rule.html
    aws_codestarnotifications_notification_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param detail_type (required)
      // @param event_type_ids (required)
      // @param name (required)
      // @param resource (required)
      // @param status (optional)
      // @param tags (optional)
      new(rname, detail_type, event_type_ids, name, resource, status=null, tags=null):: {
        rname:: rname,
        detail_type: detail_type,
        event_type_ids: event_type_ids,
        name: name,
        resource: resource,
        [if status != null then 'status']: status,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_codestarnotifications_notification_rule.%s.arn}' % rname,
        id:: '${aws_codestarnotifications_notification_rule.%s.id}' % rname,
        target:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_target(target):: self + {
        target: target,
      },
      target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param address (required)
        // @param type (optional)
        new(rname, address, type=null):: {
          rname:: rname,
          address: address,
          [if type != null then 'type']: type,
          status:: '${aws_codestarnotifications_notification_rule.%s.target.status}' % rname,
        },
      },
    },
    // aws_cognito_identity_pool - https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool.html
    aws_cognito_identity_pool:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param identity_pool_name (required)
      // @param allow_unauthenticated_identities (optional)
      // @param developer_provider_name (optional)
      // @param openid_connect_provider_arns (optional)
      // @param saml_provider_arns (optional)
      // @param supported_login_providers (optional)
      // @param tags (optional)
      new(rname, identity_pool_name, allow_unauthenticated_identities=null, developer_provider_name=null, openid_connect_provider_arns=null, saml_provider_arns=null, supported_login_providers=null, tags=null):: {
        rname:: rname,
        identity_pool_name: identity_pool_name,
        [if allow_unauthenticated_identities != null then 'allow_unauthenticated_identities']: allow_unauthenticated_identities,
        [if developer_provider_name != null then 'developer_provider_name']: developer_provider_name,
        [if openid_connect_provider_arns != null then 'openid_connect_provider_arns']: openid_connect_provider_arns,
        [if saml_provider_arns != null then 'saml_provider_arns']: saml_provider_arns,
        [if supported_login_providers != null then 'supported_login_providers']: supported_login_providers,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_cognito_identity_pool.%s.arn}' % rname,
        id:: '${aws_cognito_identity_pool.%s.id}' % rname,
        cognito_identity_providers:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_cognito_identity_providers(cognito_identity_providers):: self + {
        cognito_identity_providers: cognito_identity_providers,
      },
      cognito_identity_providers:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param client_id (optional)
        // @param provider_name (optional)
        // @param server_side_token_check (optional)
        new(rname, client_id=null, provider_name=null, server_side_token_check=null):: {
          rname:: rname,
          [if client_id != null then 'client_id']: client_id,
          [if provider_name != null then 'provider_name']: provider_name,
          [if server_side_token_check != null then 'server_side_token_check']: server_side_token_check,
        },
      },
    },
    // aws_cognito_identity_pool_roles_attachment - https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool_roles_attachment.html
    aws_cognito_identity_pool_roles_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param identity_pool_id (required)
      // @param roles (required)
      new(rname, identity_pool_id, roles):: {
        rname:: rname,
        identity_pool_id: identity_pool_id,
        roles: roles,
        id:: '${aws_cognito_identity_pool_roles_attachment.%s.id}' % rname,
        role_mapping:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_role_mapping(role_mapping):: self + {
        role_mapping: role_mapping,
      },
      role_mapping:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param identity_provider (required)
        // @param type (required)
        // @param ambiguous_role_resolution (optional)
        new(rname, identity_provider, type, ambiguous_role_resolution=null):: {
          rname:: rname,
          identity_provider: identity_provider,
          type: type,
          [if ambiguous_role_resolution != null then 'ambiguous_role_resolution']: ambiguous_role_resolution,
          mapping_rule:: {},
        },
        with_mapping_rule(mapping_rule):: self + {
          mapping_rule: mapping_rule,
        },
        mapping_rule:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param claim (required)
          // @param match_type (required)
          // @param role_arn (required)
          // @param value (required)
          new(rname, claim, match_type, role_arn, value):: {
            rname:: rname,
            claim: claim,
            match_type: match_type,
            role_arn: role_arn,
            value: value,
          },
        },
      },
    },
    // aws_cognito_identity_provider - https://www.terraform.io/docs/providers/aws/r/cognito_identity_provider.html
    aws_cognito_identity_provider:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param provider_details (required)
      // @param provider_name (required)
      // @param provider_type (required)
      // @param user_pool_id (required)
      // @param attribute_mapping (optional)
      // @param idp_identifiers (optional)
      new(rname, provider_details, provider_name, provider_type, user_pool_id, attribute_mapping=null, idp_identifiers=null):: {
        rname:: rname,
        provider_details: provider_details,
        provider_name: provider_name,
        provider_type: provider_type,
        user_pool_id: user_pool_id,
        [if attribute_mapping != null then 'attribute_mapping']: attribute_mapping,
        [if idp_identifiers != null then 'idp_identifiers']: idp_identifiers,
        id:: '${aws_cognito_identity_provider.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cognito_resource_server - https://www.terraform.io/docs/providers/aws/r/cognito_resource_server.html
    aws_cognito_resource_server:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param identifier (required)
      // @param name (required)
      // @param user_pool_id (required)
      new(rname, identifier, name, user_pool_id):: {
        rname:: rname,
        identifier: identifier,
        name: name,
        user_pool_id: user_pool_id,
        id:: '${aws_cognito_resource_server.%s.id}' % rname,
        scope_identifiers:: '${aws_cognito_resource_server.%s.scope_identifiers}' % rname,
        scope:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_scope(scope):: self + {
        scope: scope,
      },
      scope:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param scope_description (required)
        // @param scope_name (required)
        new(rname, scope_description, scope_name):: {
          rname:: rname,
          scope_description: scope_description,
          scope_name: scope_name,
        },
      },
    },
    // aws_cognito_user_group - https://www.terraform.io/docs/providers/aws/r/cognito_user_group.html
    aws_cognito_user_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param user_pool_id (required)
      // @param description (optional)
      // @param precedence (optional)
      // @param role_arn (optional)
      new(rname, name, user_pool_id, description=null, precedence=null, role_arn=null):: {
        rname:: rname,
        name: name,
        user_pool_id: user_pool_id,
        [if description != null then 'description']: description,
        [if precedence != null then 'precedence']: precedence,
        [if role_arn != null then 'role_arn']: role_arn,
        id:: '${aws_cognito_user_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cognito_user_pool - https://www.terraform.io/docs/providers/aws/r/cognito_user_pool.html
    aws_cognito_user_pool:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param alias_attributes (optional)
      // @param auto_verified_attributes (optional)
      // @param mfa_configuration (optional)
      // @param sms_authentication_message (optional)
      // @param tags (optional)
      // @param username_attributes (optional)
      new(rname, name, alias_attributes=null, auto_verified_attributes=null, mfa_configuration=null, sms_authentication_message=null, tags=null, username_attributes=null):: {
        rname:: rname,
        name: name,
        [if alias_attributes != null then 'alias_attributes']: alias_attributes,
        [if auto_verified_attributes != null then 'auto_verified_attributes']: auto_verified_attributes,
        [if mfa_configuration != null then 'mfa_configuration']: mfa_configuration,
        [if sms_authentication_message != null then 'sms_authentication_message']: sms_authentication_message,
        [if tags != null then 'tags']: tags,
        [if username_attributes != null then 'username_attributes']: username_attributes,
        arn:: '${aws_cognito_user_pool.%s.arn}' % rname,
        creation_date:: '${aws_cognito_user_pool.%s.creation_date}' % rname,
        email_verification_message:: '${aws_cognito_user_pool.%s.email_verification_message}' % rname,
        email_verification_subject:: '${aws_cognito_user_pool.%s.email_verification_subject}' % rname,
        endpoint:: '${aws_cognito_user_pool.%s.endpoint}' % rname,
        id:: '${aws_cognito_user_pool.%s.id}' % rname,
        last_modified_date:: '${aws_cognito_user_pool.%s.last_modified_date}' % rname,
        sms_verification_message:: '${aws_cognito_user_pool.%s.sms_verification_message}' % rname,
        admin_create_user_config:: {},
        device_configuration:: {},
        email_configuration:: {},
        lambda_config:: {},
        password_policy:: {},
        schema:: {},
        sms_configuration:: {},
        user_pool_add_ons:: {},
        verification_message_template:: {},
      },
      with_email_verification_message(email_verification_message):: {
        email_verification_message::: email_verification_message,
      },
      with_email_verification_subject(email_verification_subject):: {
        email_verification_subject::: email_verification_subject,
      },
      with_id(id):: {
        id::: id,
      },
      with_sms_verification_message(sms_verification_message):: {
        sms_verification_message::: sms_verification_message,
      },
      with_admin_create_user_config(admin_create_user_config):: self + {
        admin_create_user_config: admin_create_user_config,
      },
      admin_create_user_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_admin_create_user_only (optional)
        new(rname, allow_admin_create_user_only=null):: {
          rname:: rname,
          [if allow_admin_create_user_only != null then 'allow_admin_create_user_only']: allow_admin_create_user_only,
          unused_account_validity_days:: '${aws_cognito_user_pool.%s.admin_create_user_config.unused_account_validity_days}' % rname,
          invite_message_template:: {},
        },
        with_unused_account_validity_days(unused_account_validity_days):: {
          unused_account_validity_days::: unused_account_validity_days,
        },
        with_invite_message_template(invite_message_template):: self + {
          invite_message_template: invite_message_template,
        },
        invite_message_template:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param email_message (optional)
          // @param email_subject (optional)
          // @param sms_message (optional)
          new(rname, email_message=null, email_subject=null, sms_message=null):: {
            rname:: rname,
            [if email_message != null then 'email_message']: email_message,
            [if email_subject != null then 'email_subject']: email_subject,
            [if sms_message != null then 'sms_message']: sms_message,
          },
        },
      },
      with_device_configuration(device_configuration):: self + {
        device_configuration: device_configuration,
      },
      device_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param challenge_required_on_new_device (optional)
        // @param device_only_remembered_on_user_prompt (optional)
        new(rname, challenge_required_on_new_device=null, device_only_remembered_on_user_prompt=null):: {
          rname:: rname,
          [if challenge_required_on_new_device != null then 'challenge_required_on_new_device']: challenge_required_on_new_device,
          [if device_only_remembered_on_user_prompt != null then 'device_only_remembered_on_user_prompt']: device_only_remembered_on_user_prompt,
        },
      },
      with_email_configuration(email_configuration):: self + {
        email_configuration: email_configuration,
      },
      email_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param email_sending_account (optional)
        // @param reply_to_email_address (optional)
        // @param source_arn (optional)
        new(rname, email_sending_account=null, reply_to_email_address=null, source_arn=null):: {
          rname:: rname,
          [if email_sending_account != null then 'email_sending_account']: email_sending_account,
          [if reply_to_email_address != null then 'reply_to_email_address']: reply_to_email_address,
          [if source_arn != null then 'source_arn']: source_arn,
        },
      },
      with_lambda_config(lambda_config):: self + {
        lambda_config: lambda_config,
      },
      lambda_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create_auth_challenge (optional)
        // @param custom_message (optional)
        // @param define_auth_challenge (optional)
        // @param post_authentication (optional)
        // @param post_confirmation (optional)
        // @param pre_authentication (optional)
        // @param pre_sign_up (optional)
        // @param pre_token_generation (optional)
        // @param user_migration (optional)
        // @param verify_auth_challenge_response (optional)
        new(rname, create_auth_challenge=null, custom_message=null, define_auth_challenge=null, post_authentication=null, post_confirmation=null, pre_authentication=null, pre_sign_up=null, pre_token_generation=null, user_migration=null, verify_auth_challenge_response=null):: {
          rname:: rname,
          [if create_auth_challenge != null then 'create_auth_challenge']: create_auth_challenge,
          [if custom_message != null then 'custom_message']: custom_message,
          [if define_auth_challenge != null then 'define_auth_challenge']: define_auth_challenge,
          [if post_authentication != null then 'post_authentication']: post_authentication,
          [if post_confirmation != null then 'post_confirmation']: post_confirmation,
          [if pre_authentication != null then 'pre_authentication']: pre_authentication,
          [if pre_sign_up != null then 'pre_sign_up']: pre_sign_up,
          [if pre_token_generation != null then 'pre_token_generation']: pre_token_generation,
          [if user_migration != null then 'user_migration']: user_migration,
          [if verify_auth_challenge_response != null then 'verify_auth_challenge_response']: verify_auth_challenge_response,
        },
      },
      with_password_policy(password_policy):: self + {
        password_policy: password_policy,
      },
      password_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param minimum_length (optional)
        // @param require_lowercase (optional)
        // @param require_numbers (optional)
        // @param require_symbols (optional)
        // @param require_uppercase (optional)
        // @param temporary_password_validity_days (optional)
        new(rname, minimum_length=null, require_lowercase=null, require_numbers=null, require_symbols=null, require_uppercase=null, temporary_password_validity_days=null):: {
          rname:: rname,
          [if minimum_length != null then 'minimum_length']: minimum_length,
          [if require_lowercase != null then 'require_lowercase']: require_lowercase,
          [if require_numbers != null then 'require_numbers']: require_numbers,
          [if require_symbols != null then 'require_symbols']: require_symbols,
          [if require_uppercase != null then 'require_uppercase']: require_uppercase,
          [if temporary_password_validity_days != null then 'temporary_password_validity_days']: temporary_password_validity_days,
        },
      },
      with_schema(schema):: self + {
        schema: schema,
      },
      schema:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param attribute_data_type (required)
        // @param name (required)
        // @param developer_only_attribute (optional)
        // @param mutable (optional)
        // @param required (optional)
        new(rname, attribute_data_type, name, developer_only_attribute=null, mutable=null, required=null):: {
          rname:: rname,
          attribute_data_type: attribute_data_type,
          name: name,
          [if developer_only_attribute != null then 'developer_only_attribute']: developer_only_attribute,
          [if mutable != null then 'mutable']: mutable,
          [if required != null then 'required']: required,
          number_attribute_constraints:: {},
          string_attribute_constraints:: {},
        },
        with_number_attribute_constraints(number_attribute_constraints):: self + {
          number_attribute_constraints: number_attribute_constraints,
        },
        number_attribute_constraints:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param max_value (optional)
          // @param min_value (optional)
          new(rname, max_value=null, min_value=null):: {
            rname:: rname,
            [if max_value != null then 'max_value']: max_value,
            [if min_value != null then 'min_value']: min_value,
          },
        },
        with_string_attribute_constraints(string_attribute_constraints):: self + {
          string_attribute_constraints: string_attribute_constraints,
        },
        string_attribute_constraints:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param max_length (optional)
          // @param min_length (optional)
          new(rname, max_length=null, min_length=null):: {
            rname:: rname,
            [if max_length != null then 'max_length']: max_length,
            [if min_length != null then 'min_length']: min_length,
          },
        },
      },
      with_sms_configuration(sms_configuration):: self + {
        sms_configuration: sms_configuration,
      },
      sms_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param external_id (required)
        // @param sns_caller_arn (required)
        new(rname, external_id, sns_caller_arn):: {
          rname:: rname,
          external_id: external_id,
          sns_caller_arn: sns_caller_arn,
        },
      },
      with_user_pool_add_ons(user_pool_add_ons):: self + {
        user_pool_add_ons: user_pool_add_ons,
      },
      user_pool_add_ons:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param advanced_security_mode (required)
        new(rname, advanced_security_mode):: {
          rname:: rname,
          advanced_security_mode: advanced_security_mode,
        },
      },
      with_verification_message_template(verification_message_template):: self + {
        verification_message_template: verification_message_template,
      },
      verification_message_template:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param default_email_option (optional)
        new(rname, default_email_option=null):: {
          rname:: rname,
          [if default_email_option != null then 'default_email_option']: default_email_option,
          email_message:: '${aws_cognito_user_pool.%s.verification_message_template.email_message}' % rname,
          email_message_by_link:: '${aws_cognito_user_pool.%s.verification_message_template.email_message_by_link}' % rname,
          email_subject:: '${aws_cognito_user_pool.%s.verification_message_template.email_subject}' % rname,
          email_subject_by_link:: '${aws_cognito_user_pool.%s.verification_message_template.email_subject_by_link}' % rname,
          sms_message:: '${aws_cognito_user_pool.%s.verification_message_template.sms_message}' % rname,
        },
        with_email_message(email_message):: {
          email_message::: email_message,
        },
        with_email_message_by_link(email_message_by_link):: {
          email_message_by_link::: email_message_by_link,
        },
        with_email_subject(email_subject):: {
          email_subject::: email_subject,
        },
        with_email_subject_by_link(email_subject_by_link):: {
          email_subject_by_link::: email_subject_by_link,
        },
        with_sms_message(sms_message):: {
          sms_message::: sms_message,
        },
      },
    },
    // aws_cognito_user_pool_client - https://www.terraform.io/docs/providers/aws/r/cognito_user_pool_client.html
    aws_cognito_user_pool_client:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param user_pool_id (required)
      // @param allowed_oauth_flows (optional)
      // @param allowed_oauth_flows_user_pool_client (optional)
      // @param allowed_oauth_scopes (optional)
      // @param callback_urls (optional)
      // @param default_redirect_uri (optional)
      // @param explicit_auth_flows (optional)
      // @param generate_secret (optional)
      // @param logout_urls (optional)
      // @param read_attributes (optional)
      // @param refresh_token_validity (optional)
      // @param supported_identity_providers (optional)
      // @param write_attributes (optional)
      new(rname, name, user_pool_id, allowed_oauth_flows=null, allowed_oauth_flows_user_pool_client=null, allowed_oauth_scopes=null, callback_urls=null, default_redirect_uri=null, explicit_auth_flows=null, generate_secret=null, logout_urls=null, read_attributes=null, refresh_token_validity=null, supported_identity_providers=null, write_attributes=null):: {
        rname:: rname,
        name: name,
        user_pool_id: user_pool_id,
        [if allowed_oauth_flows != null then 'allowed_oauth_flows']: allowed_oauth_flows,
        [if allowed_oauth_flows_user_pool_client != null then 'allowed_oauth_flows_user_pool_client']: allowed_oauth_flows_user_pool_client,
        [if allowed_oauth_scopes != null then 'allowed_oauth_scopes']: allowed_oauth_scopes,
        [if callback_urls != null then 'callback_urls']: callback_urls,
        [if default_redirect_uri != null then 'default_redirect_uri']: default_redirect_uri,
        [if explicit_auth_flows != null then 'explicit_auth_flows']: explicit_auth_flows,
        [if generate_secret != null then 'generate_secret']: generate_secret,
        [if logout_urls != null then 'logout_urls']: logout_urls,
        [if read_attributes != null then 'read_attributes']: read_attributes,
        [if refresh_token_validity != null then 'refresh_token_validity']: refresh_token_validity,
        [if supported_identity_providers != null then 'supported_identity_providers']: supported_identity_providers,
        [if write_attributes != null then 'write_attributes']: write_attributes,
        client_secret:: '${aws_cognito_user_pool_client.%s.client_secret}' % rname,
        id:: '${aws_cognito_user_pool_client.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_cognito_user_pool_domain - https://www.terraform.io/docs/providers/aws/r/cognito_user_pool_domain.html
    aws_cognito_user_pool_domain:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain (required)
      // @param user_pool_id (required)
      // @param certificate_arn (optional)
      new(rname, domain, user_pool_id, certificate_arn=null):: {
        rname:: rname,
        domain: domain,
        user_pool_id: user_pool_id,
        [if certificate_arn != null then 'certificate_arn']: certificate_arn,
        aws_account_id:: '${aws_cognito_user_pool_domain.%s.aws_account_id}' % rname,
        cloudfront_distribution_arn:: '${aws_cognito_user_pool_domain.%s.cloudfront_distribution_arn}' % rname,
        id:: '${aws_cognito_user_pool_domain.%s.id}' % rname,
        s3_bucket:: '${aws_cognito_user_pool_domain.%s.s3_bucket}' % rname,
        version:: '${aws_cognito_user_pool_domain.%s.version}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_config_aggregate_authorization - https://www.terraform.io/docs/providers/aws/r/config_aggregate_authorization.html
    aws_config_aggregate_authorization:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param account_id (required)
      // @param region (required)
      // @param tags (optional)
      new(rname, account_id, region, tags=null):: {
        rname:: rname,
        account_id: account_id,
        region: region,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_config_aggregate_authorization.%s.arn}' % rname,
        id:: '${aws_config_aggregate_authorization.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_config_config_rule - https://www.terraform.io/docs/providers/aws/r/config_config_rule.html
    aws_config_config_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param input_parameters (optional)
      // @param maximum_execution_frequency (optional)
      // @param tags (optional)
      // @param source (required)
      new(rname, name, source, description=null, input_parameters=null, maximum_execution_frequency=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if input_parameters != null then 'input_parameters']: input_parameters,
        [if maximum_execution_frequency != null then 'maximum_execution_frequency']: maximum_execution_frequency,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_config_config_rule.%s.arn}' % rname,
        id:: '${aws_config_config_rule.%s.id}' % rname,
        rule_id:: '${aws_config_config_rule.%s.rule_id}' % rname,
        scope:: {},
        source: source,
      },
      with_id(id):: {
        id::: id,
      },
      with_scope(scope):: self + {
        scope: scope,
      },
      scope:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param compliance_resource_id (optional)
        // @param compliance_resource_types (optional)
        // @param tag_key (optional)
        // @param tag_value (optional)
        new(rname, compliance_resource_id=null, compliance_resource_types=null, tag_key=null, tag_value=null):: {
          rname:: rname,
          [if compliance_resource_id != null then 'compliance_resource_id']: compliance_resource_id,
          [if compliance_resource_types != null then 'compliance_resource_types']: compliance_resource_types,
          [if tag_key != null then 'tag_key']: tag_key,
          [if tag_value != null then 'tag_value']: tag_value,
        },
      },
      source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param owner (required)
        // @param source_identifier (required)
        new(rname, owner, source_identifier):: {
          rname:: rname,
          owner: owner,
          source_identifier: source_identifier,
          source_detail:: {},
        },
        with_source_detail(source_detail):: self + {
          source_detail: source_detail,
        },
        source_detail:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param event_source (optional)
          // @param maximum_execution_frequency (optional)
          // @param message_type (optional)
          new(rname, event_source=null, maximum_execution_frequency=null, message_type=null):: {
            rname:: rname,
            [if event_source != null then 'event_source']: event_source,
            [if maximum_execution_frequency != null then 'maximum_execution_frequency']: maximum_execution_frequency,
            [if message_type != null then 'message_type']: message_type,
          },
        },
      },
    },
    // aws_config_configuration_aggregator - https://www.terraform.io/docs/providers/aws/r/config_configuration_aggregator.html
    aws_config_configuration_aggregator:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      new(rname, name, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_config_configuration_aggregator.%s.arn}' % rname,
        id:: '${aws_config_configuration_aggregator.%s.id}' % rname,
        account_aggregation_source:: {},
        organization_aggregation_source:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_account_aggregation_source(account_aggregation_source):: self + {
        account_aggregation_source: account_aggregation_source,
      },
      account_aggregation_source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param account_ids (required)
        // @param all_regions (optional)
        // @param regions (optional)
        new(rname, account_ids, all_regions=null, regions=null):: {
          rname:: rname,
          account_ids: account_ids,
          [if all_regions != null then 'all_regions']: all_regions,
          [if regions != null then 'regions']: regions,
        },
      },
      with_organization_aggregation_source(organization_aggregation_source):: self + {
        organization_aggregation_source: organization_aggregation_source,
      },
      organization_aggregation_source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role_arn (required)
        // @param all_regions (optional)
        // @param regions (optional)
        new(rname, role_arn, all_regions=null, regions=null):: {
          rname:: rname,
          role_arn: role_arn,
          [if all_regions != null then 'all_regions']: all_regions,
          [if regions != null then 'regions']: regions,
        },
      },
    },
    // aws_config_configuration_recorder - https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html
    aws_config_configuration_recorder:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param role_arn (required)
      // @param name (optional)
      new(rname, role_arn, name=null):: {
        rname:: rname,
        role_arn: role_arn,
        [if name != null then 'name']: name,
        id:: '${aws_config_configuration_recorder.%s.id}' % rname,
        recording_group:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_recording_group(recording_group):: self + {
        recording_group: recording_group,
      },
      recording_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param all_supported (optional)
        // @param include_global_resource_types (optional)
        // @param resource_types (optional)
        new(rname, all_supported=null, include_global_resource_types=null, resource_types=null):: {
          rname:: rname,
          [if all_supported != null then 'all_supported']: all_supported,
          [if include_global_resource_types != null then 'include_global_resource_types']: include_global_resource_types,
          [if resource_types != null then 'resource_types']: resource_types,
        },
      },
    },
    // aws_config_configuration_recorder_status - https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder_status.html
    aws_config_configuration_recorder_status:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param is_enabled (required)
      // @param name (required)
      new(rname, is_enabled, name):: {
        rname:: rname,
        is_enabled: is_enabled,
        name: name,
        id:: '${aws_config_configuration_recorder_status.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_config_delivery_channel - https://www.terraform.io/docs/providers/aws/r/config_delivery_channel.html
    aws_config_delivery_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param s3_bucket_name (required)
      // @param name (optional)
      // @param s3_key_prefix (optional)
      // @param sns_topic_arn (optional)
      new(rname, s3_bucket_name, name=null, s3_key_prefix=null, sns_topic_arn=null):: {
        rname:: rname,
        s3_bucket_name: s3_bucket_name,
        [if name != null then 'name']: name,
        [if s3_key_prefix != null then 's3_key_prefix']: s3_key_prefix,
        [if sns_topic_arn != null then 'sns_topic_arn']: sns_topic_arn,
        id:: '${aws_config_delivery_channel.%s.id}' % rname,
        snapshot_delivery_properties:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_snapshot_delivery_properties(snapshot_delivery_properties):: self + {
        snapshot_delivery_properties: snapshot_delivery_properties,
      },
      snapshot_delivery_properties:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delivery_frequency (optional)
        new(rname, delivery_frequency=null):: {
          rname:: rname,
          [if delivery_frequency != null then 'delivery_frequency']: delivery_frequency,
        },
      },
    },
    // aws_config_organization_custom_rule - https://www.terraform.io/docs/providers/aws/r/config_organization_custom_rule.html
    aws_config_organization_custom_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param lambda_function_arn (required)
      // @param name (required)
      // @param trigger_types (required)
      // @param description (optional)
      // @param excluded_accounts (optional)
      // @param input_parameters (optional)
      // @param maximum_execution_frequency (optional)
      // @param resource_id_scope (optional)
      // @param resource_types_scope (optional)
      // @param tag_key_scope (optional)
      // @param tag_value_scope (optional)
      new(rname, lambda_function_arn, name, trigger_types, description=null, excluded_accounts=null, input_parameters=null, maximum_execution_frequency=null, resource_id_scope=null, resource_types_scope=null, tag_key_scope=null, tag_value_scope=null):: {
        rname:: rname,
        lambda_function_arn: lambda_function_arn,
        name: name,
        trigger_types: trigger_types,
        [if description != null then 'description']: description,
        [if excluded_accounts != null then 'excluded_accounts']: excluded_accounts,
        [if input_parameters != null then 'input_parameters']: input_parameters,
        [if maximum_execution_frequency != null then 'maximum_execution_frequency']: maximum_execution_frequency,
        [if resource_id_scope != null then 'resource_id_scope']: resource_id_scope,
        [if resource_types_scope != null then 'resource_types_scope']: resource_types_scope,
        [if tag_key_scope != null then 'tag_key_scope']: tag_key_scope,
        [if tag_value_scope != null then 'tag_value_scope']: tag_value_scope,
        arn:: '${aws_config_organization_custom_rule.%s.arn}' % rname,
        id:: '${aws_config_organization_custom_rule.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_config_organization_managed_rule - https://www.terraform.io/docs/providers/aws/r/config_organization_managed_rule.html
    aws_config_organization_managed_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param rule_identifier (required)
      // @param description (optional)
      // @param excluded_accounts (optional)
      // @param input_parameters (optional)
      // @param maximum_execution_frequency (optional)
      // @param resource_id_scope (optional)
      // @param resource_types_scope (optional)
      // @param tag_key_scope (optional)
      // @param tag_value_scope (optional)
      new(rname, name, rule_identifier, description=null, excluded_accounts=null, input_parameters=null, maximum_execution_frequency=null, resource_id_scope=null, resource_types_scope=null, tag_key_scope=null, tag_value_scope=null):: {
        rname:: rname,
        name: name,
        rule_identifier: rule_identifier,
        [if description != null then 'description']: description,
        [if excluded_accounts != null then 'excluded_accounts']: excluded_accounts,
        [if input_parameters != null then 'input_parameters']: input_parameters,
        [if maximum_execution_frequency != null then 'maximum_execution_frequency']: maximum_execution_frequency,
        [if resource_id_scope != null then 'resource_id_scope']: resource_id_scope,
        [if resource_types_scope != null then 'resource_types_scope']: resource_types_scope,
        [if tag_key_scope != null then 'tag_key_scope']: tag_key_scope,
        [if tag_value_scope != null then 'tag_value_scope']: tag_value_scope,
        arn:: '${aws_config_organization_managed_rule.%s.arn}' % rname,
        id:: '${aws_config_organization_managed_rule.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_cur_report_definition - https://www.terraform.io/docs/providers/aws/r/cur_report_definition.html
    aws_cur_report_definition:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param additional_schema_elements (required)
      // @param compression (required)
      // @param format (required)
      // @param report_name (required)
      // @param s3_bucket (required)
      // @param s3_region (required)
      // @param time_unit (required)
      // @param additional_artifacts (optional)
      // @param s3_prefix (optional)
      new(rname, additional_schema_elements, compression, format, report_name, s3_bucket, s3_region, time_unit, additional_artifacts=null, s3_prefix=null):: {
        rname:: rname,
        additional_schema_elements: additional_schema_elements,
        compression: compression,
        format: format,
        report_name: report_name,
        s3_bucket: s3_bucket,
        s3_region: s3_region,
        time_unit: time_unit,
        [if additional_artifacts != null then 'additional_artifacts']: additional_artifacts,
        [if s3_prefix != null then 's3_prefix']: s3_prefix,
        id:: '${aws_cur_report_definition.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_customer_gateway - https://www.terraform.io/docs/providers/aws/r/customer_gateway.html
    aws_customer_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bgp_asn (required)
      // @param ip_address (required)
      // @param type (required)
      // @param tags (optional)
      new(rname, bgp_asn, ip_address, type, tags=null):: {
        rname:: rname,
        bgp_asn: bgp_asn,
        ip_address: ip_address,
        type: type,
        [if tags != null then 'tags']: tags,
        id:: '${aws_customer_gateway.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_datapipeline_pipeline - https://www.terraform.io/docs/providers/aws/r/datapipeline_pipeline.html
    aws_datapipeline_pipeline:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        id:: '${aws_datapipeline_pipeline.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_datasync_agent - https://www.terraform.io/docs/providers/aws/r/datasync_agent.html
    aws_datasync_agent:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (optional)
      // @param tags (optional)
      new(rname, name=null, tags=null):: {
        rname:: rname,
        [if name != null then 'name']: name,
        [if tags != null then 'tags']: tags,
        activation_key:: '${aws_datasync_agent.%s.activation_key}' % rname,
        arn:: '${aws_datasync_agent.%s.arn}' % rname,
        id:: '${aws_datasync_agent.%s.id}' % rname,
        ip_address:: '${aws_datasync_agent.%s.ip_address}' % rname,
        timeouts:: {},
      },
      with_activation_key(activation_key):: {
        activation_key::: activation_key,
      },
      with_id(id):: {
        id::: id,
      },
      with_ip_address(ip_address):: {
        ip_address::: ip_address,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_datasync_location_efs - https://www.terraform.io/docs/providers/aws/r/datasync_location_efs.html
    aws_datasync_location_efs:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param efs_file_system_arn (required)
      // @param subdirectory (optional)
      // @param tags (optional)
      // @param ec2_config (required)
      new(rname, efs_file_system_arn, ec2_config, subdirectory=null, tags=null):: {
        rname:: rname,
        efs_file_system_arn: efs_file_system_arn,
        [if subdirectory != null then 'subdirectory']: subdirectory,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_datasync_location_efs.%s.arn}' % rname,
        id:: '${aws_datasync_location_efs.%s.id}' % rname,
        uri:: '${aws_datasync_location_efs.%s.uri}' % rname,
        ec2_config: ec2_config,
      },
      with_id(id):: {
        id::: id,
      },
      ec2_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_arns (required)
        // @param subnet_arn (required)
        new(rname, security_group_arns, subnet_arn):: {
          rname:: rname,
          security_group_arns: security_group_arns,
          subnet_arn: subnet_arn,
        },
      },
    },
    // aws_datasync_location_nfs - https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html
    aws_datasync_location_nfs:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param server_hostname (required)
      // @param subdirectory (required)
      // @param tags (optional)
      // @param on_prem_config (required)
      new(rname, server_hostname, subdirectory, on_prem_config, tags=null):: {
        rname:: rname,
        server_hostname: server_hostname,
        subdirectory: subdirectory,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_datasync_location_nfs.%s.arn}' % rname,
        id:: '${aws_datasync_location_nfs.%s.id}' % rname,
        uri:: '${aws_datasync_location_nfs.%s.uri}' % rname,
        on_prem_config: on_prem_config,
      },
      with_id(id):: {
        id::: id,
      },
      on_prem_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param agent_arns (required)
        new(rname, agent_arns):: {
          rname:: rname,
          agent_arns: agent_arns,
        },
      },
    },
    // aws_datasync_location_s3 - https://www.terraform.io/docs/providers/aws/r/datasync_location_s3.html
    aws_datasync_location_s3:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param s3_bucket_arn (required)
      // @param subdirectory (required)
      // @param tags (optional)
      // @param s3_config (required)
      new(rname, s3_bucket_arn, subdirectory, s3_config, tags=null):: {
        rname:: rname,
        s3_bucket_arn: s3_bucket_arn,
        subdirectory: subdirectory,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_datasync_location_s3.%s.arn}' % rname,
        id:: '${aws_datasync_location_s3.%s.id}' % rname,
        uri:: '${aws_datasync_location_s3.%s.uri}' % rname,
        s3_config: s3_config,
      },
      with_id(id):: {
        id::: id,
      },
      s3_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_access_role_arn (required)
        new(rname, bucket_access_role_arn):: {
          rname:: rname,
          bucket_access_role_arn: bucket_access_role_arn,
        },
      },
    },
    // aws_datasync_location_smb - https://www.terraform.io/docs/providers/aws/r/datasync_location_smb.html
    aws_datasync_location_smb:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param agent_arns (required)
      // @param password (required)
      // @param server_hostname (required)
      // @param subdirectory (required)
      // @param user (required)
      // @param tags (optional)
      new(rname, agent_arns, password, server_hostname, subdirectory, user, tags=null):: {
        rname:: rname,
        agent_arns: agent_arns,
        password: password,
        server_hostname: server_hostname,
        subdirectory: subdirectory,
        user: user,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_datasync_location_smb.%s.arn}' % rname,
        domain:: '${aws_datasync_location_smb.%s.domain}' % rname,
        id:: '${aws_datasync_location_smb.%s.id}' % rname,
        uri:: '${aws_datasync_location_smb.%s.uri}' % rname,
        mount_options:: {},
      },
      with_domain(domain):: {
        domain::: domain,
      },
      with_id(id):: {
        id::: id,
      },
      with_mount_options(mount_options):: self + {
        mount_options: mount_options,
      },
      mount_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param version (optional)
        new(rname, version=null):: {
          rname:: rname,
          [if version != null then 'version']: version,
        },
      },
    },
    // aws_datasync_task - https://www.terraform.io/docs/providers/aws/r/datasync_task.html
    aws_datasync_task:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination_location_arn (required)
      // @param source_location_arn (required)
      // @param cloudwatch_log_group_arn (optional)
      // @param name (optional)
      // @param tags (optional)
      new(rname, destination_location_arn, source_location_arn, cloudwatch_log_group_arn=null, name=null, tags=null):: {
        rname:: rname,
        destination_location_arn: destination_location_arn,
        source_location_arn: source_location_arn,
        [if cloudwatch_log_group_arn != null then 'cloudwatch_log_group_arn']: cloudwatch_log_group_arn,
        [if name != null then 'name']: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_datasync_task.%s.arn}' % rname,
        id:: '${aws_datasync_task.%s.id}' % rname,
        options:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_options(options):: self + {
        options: options,
      },
      options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param atime (optional)
        // @param bytes_per_second (optional)
        // @param gid (optional)
        // @param mtime (optional)
        // @param posix_permissions (optional)
        // @param preserve_deleted_files (optional)
        // @param preserve_devices (optional)
        // @param uid (optional)
        // @param verify_mode (optional)
        new(rname, atime=null, bytes_per_second=null, gid=null, mtime=null, posix_permissions=null, preserve_deleted_files=null, preserve_devices=null, uid=null, verify_mode=null):: {
          rname:: rname,
          [if atime != null then 'atime']: atime,
          [if bytes_per_second != null then 'bytes_per_second']: bytes_per_second,
          [if gid != null then 'gid']: gid,
          [if mtime != null then 'mtime']: mtime,
          [if posix_permissions != null then 'posix_permissions']: posix_permissions,
          [if preserve_deleted_files != null then 'preserve_deleted_files']: preserve_deleted_files,
          [if preserve_devices != null then 'preserve_devices']: preserve_devices,
          [if uid != null then 'uid']: uid,
          [if verify_mode != null then 'verify_mode']: verify_mode,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_dax_cluster - https://www.terraform.io/docs/providers/aws/r/dax_cluster.html
    aws_dax_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_name (required)
      // @param iam_role_arn (required)
      // @param node_type (required)
      // @param replication_factor (required)
      // @param availability_zones (optional)
      // @param description (optional)
      // @param notification_topic_arn (optional)
      // @param tags (optional)
      new(rname, cluster_name, iam_role_arn, node_type, replication_factor, availability_zones=null, description=null, notification_topic_arn=null, tags=null):: {
        rname:: rname,
        cluster_name: cluster_name,
        iam_role_arn: iam_role_arn,
        node_type: node_type,
        replication_factor: replication_factor,
        [if availability_zones != null then 'availability_zones']: availability_zones,
        [if description != null then 'description']: description,
        [if notification_topic_arn != null then 'notification_topic_arn']: notification_topic_arn,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dax_cluster.%s.arn}' % rname,
        cluster_address:: '${aws_dax_cluster.%s.cluster_address}' % rname,
        configuration_endpoint:: '${aws_dax_cluster.%s.configuration_endpoint}' % rname,
        id:: '${aws_dax_cluster.%s.id}' % rname,
        maintenance_window:: '${aws_dax_cluster.%s.maintenance_window}' % rname,
        nodes:: '${aws_dax_cluster.%s.nodes}' % rname,
        parameter_group_name:: '${aws_dax_cluster.%s.parameter_group_name}' % rname,
        port:: '${aws_dax_cluster.%s.port}' % rname,
        security_group_ids:: '${aws_dax_cluster.%s.security_group_ids}' % rname,
        subnet_group_name:: '${aws_dax_cluster.%s.subnet_group_name}' % rname,
        server_side_encryption:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_maintenance_window(maintenance_window):: {
        maintenance_window::: maintenance_window,
      },
      with_parameter_group_name(parameter_group_name):: {
        parameter_group_name::: parameter_group_name,
      },
      with_security_group_ids(security_group_ids):: {
        security_group_ids::: security_group_ids,
      },
      with_subnet_group_name(subnet_group_name):: {
        subnet_group_name::: subnet_group_name,
      },
      with_server_side_encryption(server_side_encryption):: self + {
        server_side_encryption: server_side_encryption,
      },
      server_side_encryption:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        new(rname, enabled=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dax_parameter_group - https://www.terraform.io/docs/providers/aws/r/dax_parameter_group.html
    aws_dax_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      new(rname, name, description=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        id:: '${aws_dax_parameter_group.%s.id}' % rname,
        parameters:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_parameters(parameters):: self + {
        parameters: parameters,
      },
      parameters:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        new(rname, name, value):: {
          rname:: rname,
          name: name,
          value: value,
        },
      },
    },
    // aws_dax_subnet_group - https://www.terraform.io/docs/providers/aws/r/dax_subnet_group.html
    aws_dax_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param subnet_ids (required)
      // @param description (optional)
      new(rname, name, subnet_ids, description=null):: {
        rname:: rname,
        name: name,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        id:: '${aws_dax_subnet_group.%s.id}' % rname,
        vpc_id:: '${aws_dax_subnet_group.%s.vpc_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_db_cluster_snapshot - https://www.terraform.io/docs/providers/aws/r/db_cluster_snapshot.html
    aws_db_cluster_snapshot:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_cluster_identifier (required)
      // @param db_cluster_snapshot_identifier (required)
      // @param tags (optional)
      new(rname, db_cluster_identifier, db_cluster_snapshot_identifier, tags=null):: {
        rname:: rname,
        db_cluster_identifier: db_cluster_identifier,
        db_cluster_snapshot_identifier: db_cluster_snapshot_identifier,
        [if tags != null then 'tags']: tags,
        allocated_storage:: '${aws_db_cluster_snapshot.%s.allocated_storage}' % rname,
        availability_zones:: '${aws_db_cluster_snapshot.%s.availability_zones}' % rname,
        db_cluster_snapshot_arn:: '${aws_db_cluster_snapshot.%s.db_cluster_snapshot_arn}' % rname,
        engine:: '${aws_db_cluster_snapshot.%s.engine}' % rname,
        engine_version:: '${aws_db_cluster_snapshot.%s.engine_version}' % rname,
        id:: '${aws_db_cluster_snapshot.%s.id}' % rname,
        kms_key_id:: '${aws_db_cluster_snapshot.%s.kms_key_id}' % rname,
        license_model:: '${aws_db_cluster_snapshot.%s.license_model}' % rname,
        port:: '${aws_db_cluster_snapshot.%s.port}' % rname,
        snapshot_type:: '${aws_db_cluster_snapshot.%s.snapshot_type}' % rname,
        source_db_cluster_snapshot_arn:: '${aws_db_cluster_snapshot.%s.source_db_cluster_snapshot_arn}' % rname,
        status:: '${aws_db_cluster_snapshot.%s.status}' % rname,
        storage_encrypted:: '${aws_db_cluster_snapshot.%s.storage_encrypted}' % rname,
        vpc_id:: '${aws_db_cluster_snapshot.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_db_event_subscription - https://www.terraform.io/docs/providers/aws/r/db_event_subscription.html
    aws_db_event_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param sns_topic (required)
      // @param enabled (optional)
      // @param event_categories (optional)
      // @param name_prefix (optional)
      // @param source_ids (optional)
      // @param source_type (optional)
      // @param tags (optional)
      new(rname, sns_topic, enabled=null, event_categories=null, name_prefix=null, source_ids=null, source_type=null, tags=null):: {
        rname:: rname,
        sns_topic: sns_topic,
        [if enabled != null then 'enabled']: enabled,
        [if event_categories != null then 'event_categories']: event_categories,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if source_ids != null then 'source_ids']: source_ids,
        [if source_type != null then 'source_type']: source_type,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_db_event_subscription.%s.arn}' % rname,
        customer_aws_id:: '${aws_db_event_subscription.%s.customer_aws_id}' % rname,
        id:: '${aws_db_event_subscription.%s.id}' % rname,
        name:: '${aws_db_event_subscription.%s.name}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_db_instance - https://www.terraform.io/docs/providers/aws/r/db_instance.html
    aws_db_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_class (required)
      // @param allow_major_version_upgrade (optional)
      // @param auto_minor_version_upgrade (optional)
      // @param copy_tags_to_snapshot (optional)
      // @param delete_automated_backups (optional)
      // @param deletion_protection (optional)
      // @param domain (optional)
      // @param domain_iam_role_name (optional)
      // @param enabled_cloudwatch_logs_exports (optional)
      // @param final_snapshot_identifier (optional)
      // @param iam_database_authentication_enabled (optional)
      // @param iops (optional)
      // @param max_allocated_storage (optional)
      // @param monitoring_interval (optional)
      // @param password (optional)
      // @param performance_insights_enabled (optional)
      // @param publicly_accessible (optional)
      // @param replicate_source_db (optional)
      // @param security_group_names (optional)
      // @param skip_final_snapshot (optional)
      // @param snapshot_identifier (optional)
      // @param storage_encrypted (optional)
      // @param tags (optional)
      new(rname, instance_class, allow_major_version_upgrade=null, auto_minor_version_upgrade=null, copy_tags_to_snapshot=null, delete_automated_backups=null, deletion_protection=null, domain=null, domain_iam_role_name=null, enabled_cloudwatch_logs_exports=null, final_snapshot_identifier=null, iam_database_authentication_enabled=null, iops=null, max_allocated_storage=null, monitoring_interval=null, password=null, performance_insights_enabled=null, publicly_accessible=null, replicate_source_db=null, security_group_names=null, skip_final_snapshot=null, snapshot_identifier=null, storage_encrypted=null, tags=null):: {
        rname:: rname,
        instance_class: instance_class,
        [if allow_major_version_upgrade != null then 'allow_major_version_upgrade']: allow_major_version_upgrade,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if copy_tags_to_snapshot != null then 'copy_tags_to_snapshot']: copy_tags_to_snapshot,
        [if delete_automated_backups != null then 'delete_automated_backups']: delete_automated_backups,
        [if deletion_protection != null then 'deletion_protection']: deletion_protection,
        [if domain != null then 'domain']: domain,
        [if domain_iam_role_name != null then 'domain_iam_role_name']: domain_iam_role_name,
        [if enabled_cloudwatch_logs_exports != null then 'enabled_cloudwatch_logs_exports']: enabled_cloudwatch_logs_exports,
        [if final_snapshot_identifier != null then 'final_snapshot_identifier']: final_snapshot_identifier,
        [if iam_database_authentication_enabled != null then 'iam_database_authentication_enabled']: iam_database_authentication_enabled,
        [if iops != null then 'iops']: iops,
        [if max_allocated_storage != null then 'max_allocated_storage']: max_allocated_storage,
        [if monitoring_interval != null then 'monitoring_interval']: monitoring_interval,
        [if password != null then 'password']: password,
        [if performance_insights_enabled != null then 'performance_insights_enabled']: performance_insights_enabled,
        [if publicly_accessible != null then 'publicly_accessible']: publicly_accessible,
        [if replicate_source_db != null then 'replicate_source_db']: replicate_source_db,
        [if security_group_names != null then 'security_group_names']: security_group_names,
        [if skip_final_snapshot != null then 'skip_final_snapshot']: skip_final_snapshot,
        [if snapshot_identifier != null then 'snapshot_identifier']: snapshot_identifier,
        [if storage_encrypted != null then 'storage_encrypted']: storage_encrypted,
        [if tags != null then 'tags']: tags,
        address:: '${aws_db_instance.%s.address}' % rname,
        allocated_storage:: '${aws_db_instance.%s.allocated_storage}' % rname,
        apply_immediately:: '${aws_db_instance.%s.apply_immediately}' % rname,
        arn:: '${aws_db_instance.%s.arn}' % rname,
        availability_zone:: '${aws_db_instance.%s.availability_zone}' % rname,
        backup_retention_period:: '${aws_db_instance.%s.backup_retention_period}' % rname,
        backup_window:: '${aws_db_instance.%s.backup_window}' % rname,
        ca_cert_identifier:: '${aws_db_instance.%s.ca_cert_identifier}' % rname,
        character_set_name:: '${aws_db_instance.%s.character_set_name}' % rname,
        db_subnet_group_name:: '${aws_db_instance.%s.db_subnet_group_name}' % rname,
        endpoint:: '${aws_db_instance.%s.endpoint}' % rname,
        engine:: '${aws_db_instance.%s.engine}' % rname,
        engine_version:: '${aws_db_instance.%s.engine_version}' % rname,
        hosted_zone_id:: '${aws_db_instance.%s.hosted_zone_id}' % rname,
        id:: '${aws_db_instance.%s.id}' % rname,
        identifier:: '${aws_db_instance.%s.identifier}' % rname,
        identifier_prefix:: '${aws_db_instance.%s.identifier_prefix}' % rname,
        kms_key_id:: '${aws_db_instance.%s.kms_key_id}' % rname,
        license_model:: '${aws_db_instance.%s.license_model}' % rname,
        maintenance_window:: '${aws_db_instance.%s.maintenance_window}' % rname,
        monitoring_role_arn:: '${aws_db_instance.%s.monitoring_role_arn}' % rname,
        multi_az:: '${aws_db_instance.%s.multi_az}' % rname,
        name:: '${aws_db_instance.%s.name}' % rname,
        option_group_name:: '${aws_db_instance.%s.option_group_name}' % rname,
        parameter_group_name:: '${aws_db_instance.%s.parameter_group_name}' % rname,
        performance_insights_kms_key_id:: '${aws_db_instance.%s.performance_insights_kms_key_id}' % rname,
        performance_insights_retention_period:: '${aws_db_instance.%s.performance_insights_retention_period}' % rname,
        port:: '${aws_db_instance.%s.port}' % rname,
        replicas:: '${aws_db_instance.%s.replicas}' % rname,
        resource_id:: '${aws_db_instance.%s.resource_id}' % rname,
        status:: '${aws_db_instance.%s.status}' % rname,
        storage_type:: '${aws_db_instance.%s.storage_type}' % rname,
        timezone:: '${aws_db_instance.%s.timezone}' % rname,
        username:: '${aws_db_instance.%s.username}' % rname,
        vpc_security_group_ids:: '${aws_db_instance.%s.vpc_security_group_ids}' % rname,
        s3_import:: {},
        timeouts:: {},
      },
      with_allocated_storage(allocated_storage):: {
        allocated_storage::: allocated_storage,
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_backup_retention_period(backup_retention_period):: {
        backup_retention_period::: backup_retention_period,
      },
      with_backup_window(backup_window):: {
        backup_window::: backup_window,
      },
      with_ca_cert_identifier(ca_cert_identifier):: {
        ca_cert_identifier::: ca_cert_identifier,
      },
      with_character_set_name(character_set_name):: {
        character_set_name::: character_set_name,
      },
      with_db_subnet_group_name(db_subnet_group_name):: {
        db_subnet_group_name::: db_subnet_group_name,
      },
      with_engine(engine):: {
        engine::: engine,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_identifier(identifier):: {
        identifier::: identifier,
      },
      with_identifier_prefix(identifier_prefix):: {
        identifier_prefix::: identifier_prefix,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_license_model(license_model):: {
        license_model::: license_model,
      },
      with_maintenance_window(maintenance_window):: {
        maintenance_window::: maintenance_window,
      },
      with_monitoring_role_arn(monitoring_role_arn):: {
        monitoring_role_arn::: monitoring_role_arn,
      },
      with_multi_az(multi_az):: {
        multi_az::: multi_az,
      },
      with_name(name):: {
        name::: name,
      },
      with_option_group_name(option_group_name):: {
        option_group_name::: option_group_name,
      },
      with_parameter_group_name(parameter_group_name):: {
        parameter_group_name::: parameter_group_name,
      },
      with_performance_insights_kms_key_id(performance_insights_kms_key_id):: {
        performance_insights_kms_key_id::: performance_insights_kms_key_id,
      },
      with_performance_insights_retention_period(performance_insights_retention_period):: {
        performance_insights_retention_period::: performance_insights_retention_period,
      },
      with_port(port):: {
        port::: port,
      },
      with_storage_type(storage_type):: {
        storage_type::: storage_type,
      },
      with_timezone(timezone):: {
        timezone::: timezone,
      },
      with_username(username):: {
        username::: username,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_s3_import(s3_import):: self + {
        s3_import: s3_import,
      },
      s3_import:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_name (required)
        // @param ingestion_role (required)
        // @param source_engine (required)
        // @param source_engine_version (required)
        // @param bucket_prefix (optional)
        new(rname, bucket_name, ingestion_role, source_engine, source_engine_version, bucket_prefix=null):: {
          rname:: rname,
          bucket_name: bucket_name,
          ingestion_role: ingestion_role,
          source_engine: source_engine,
          source_engine_version: source_engine_version,
          [if bucket_prefix != null then 'bucket_prefix']: bucket_prefix,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_db_instance_role_association - https://www.terraform.io/docs/providers/aws/r/db_instance_role_association.html
    aws_db_instance_role_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_instance_identifier (required)
      // @param feature_name (required)
      // @param role_arn (required)
      new(rname, db_instance_identifier, feature_name, role_arn):: {
        rname:: rname,
        db_instance_identifier: db_instance_identifier,
        feature_name: feature_name,
        role_arn: role_arn,
        id:: '${aws_db_instance_role_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_db_option_group - https://www.terraform.io/docs/providers/aws/r/db_option_group.html
    aws_db_option_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param engine_name (required)
      // @param major_engine_version (required)
      // @param option_group_description (optional)
      // @param tags (optional)
      new(rname, engine_name, major_engine_version, option_group_description=null, tags=null):: {
        rname:: rname,
        engine_name: engine_name,
        major_engine_version: major_engine_version,
        [if option_group_description != null then 'option_group_description']: option_group_description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_db_option_group.%s.arn}' % rname,
        id:: '${aws_db_option_group.%s.id}' % rname,
        name:: '${aws_db_option_group.%s.name}' % rname,
        name_prefix:: '${aws_db_option_group.%s.name_prefix}' % rname,
        option:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_option(option):: self + {
        option: option,
      },
      option:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param option_name (required)
        // @param db_security_group_memberships (optional)
        // @param port (optional)
        // @param version (optional)
        // @param vpc_security_group_memberships (optional)
        new(rname, option_name, db_security_group_memberships=null, port=null, version=null, vpc_security_group_memberships=null):: {
          rname:: rname,
          option_name: option_name,
          [if db_security_group_memberships != null then 'db_security_group_memberships']: db_security_group_memberships,
          [if port != null then 'port']: port,
          [if version != null then 'version']: version,
          [if vpc_security_group_memberships != null then 'vpc_security_group_memberships']: vpc_security_group_memberships,
          option_settings:: {},
        },
        with_option_settings(option_settings):: self + {
          option_settings: option_settings,
        },
        option_settings:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (required)
          // @param value (required)
          new(rname, name, value):: {
            rname:: rname,
            name: name,
            value: value,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete (optional)
        new(rname, delete=null):: {
          rname:: rname,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_db_parameter_group - https://www.terraform.io/docs/providers/aws/r/db_parameter_group.html
    aws_db_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, description=null, tags=null):: {
        rname:: rname,
        family: family,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_db_parameter_group.%s.arn}' % rname,
        id:: '${aws_db_parameter_group.%s.id}' % rname,
        name:: '${aws_db_parameter_group.%s.name}' % rname,
        name_prefix:: '${aws_db_parameter_group.%s.name_prefix}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        // @param apply_method (optional)
        new(rname, name, value, apply_method=null):: {
          rname:: rname,
          name: name,
          value: value,
          [if apply_method != null then 'apply_method']: apply_method,
        },
      },
    },
    // aws_db_security_group - https://www.terraform.io/docs/providers/aws/r/db_security_group.html
    aws_db_security_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      // @param ingress (required)
      new(rname, name, ingress, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_db_security_group.%s.arn}' % rname,
        id:: '${aws_db_security_group.%s.id}' % rname,
        ingress: ingress,
      },
      with_id(id):: {
        id::: id,
      },
      ingress:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cidr (optional)
        new(rname, cidr=null):: {
          rname:: rname,
          [if cidr != null then 'cidr']: cidr,
          security_group_id:: '${aws_db_security_group.%s.ingress.security_group_id}' % rname,
          security_group_name:: '${aws_db_security_group.%s.ingress.security_group_name}' % rname,
          security_group_owner_id:: '${aws_db_security_group.%s.ingress.security_group_owner_id}' % rname,
        },
        with_security_group_id(security_group_id):: {
          security_group_id::: security_group_id,
        },
        with_security_group_name(security_group_name):: {
          security_group_name::: security_group_name,
        },
        with_security_group_owner_id(security_group_owner_id):: {
          security_group_owner_id::: security_group_owner_id,
        },
      },
    },
    // aws_db_snapshot - https://www.terraform.io/docs/providers/aws/r/db_snapshot.html
    aws_db_snapshot:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_instance_identifier (required)
      // @param db_snapshot_identifier (required)
      // @param tags (optional)
      new(rname, db_instance_identifier, db_snapshot_identifier, tags=null):: {
        rname:: rname,
        db_instance_identifier: db_instance_identifier,
        db_snapshot_identifier: db_snapshot_identifier,
        [if tags != null then 'tags']: tags,
        allocated_storage:: '${aws_db_snapshot.%s.allocated_storage}' % rname,
        availability_zone:: '${aws_db_snapshot.%s.availability_zone}' % rname,
        db_snapshot_arn:: '${aws_db_snapshot.%s.db_snapshot_arn}' % rname,
        encrypted:: '${aws_db_snapshot.%s.encrypted}' % rname,
        engine:: '${aws_db_snapshot.%s.engine}' % rname,
        engine_version:: '${aws_db_snapshot.%s.engine_version}' % rname,
        id:: '${aws_db_snapshot.%s.id}' % rname,
        iops:: '${aws_db_snapshot.%s.iops}' % rname,
        kms_key_id:: '${aws_db_snapshot.%s.kms_key_id}' % rname,
        license_model:: '${aws_db_snapshot.%s.license_model}' % rname,
        option_group_name:: '${aws_db_snapshot.%s.option_group_name}' % rname,
        port:: '${aws_db_snapshot.%s.port}' % rname,
        snapshot_type:: '${aws_db_snapshot.%s.snapshot_type}' % rname,
        source_db_snapshot_identifier:: '${aws_db_snapshot.%s.source_db_snapshot_identifier}' % rname,
        source_region:: '${aws_db_snapshot.%s.source_region}' % rname,
        status:: '${aws_db_snapshot.%s.status}' % rname,
        storage_type:: '${aws_db_snapshot.%s.storage_type}' % rname,
        vpc_id:: '${aws_db_snapshot.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param read (optional)
        new(rname, read=null):: {
          rname:: rname,
          [if read != null then 'read']: read,
        },
      },
    },
    // aws_db_subnet_group - https://www.terraform.io/docs/providers/aws/r/db_subnet_group.html
    aws_db_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_ids (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, subnet_ids, description=null, tags=null):: {
        rname:: rname,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_db_subnet_group.%s.arn}' % rname,
        id:: '${aws_db_subnet_group.%s.id}' % rname,
        name:: '${aws_db_subnet_group.%s.name}' % rname,
        name_prefix:: '${aws_db_subnet_group.%s.name_prefix}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
    },
    // aws_default_network_acl - https://www.terraform.io/docs/providers/aws/r/default_network_acl.html
    aws_default_network_acl:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param default_network_acl_id (required)
      // @param subnet_ids (optional)
      // @param tags (optional)
      new(rname, default_network_acl_id, subnet_ids=null, tags=null):: {
        rname:: rname,
        default_network_acl_id: default_network_acl_id,
        [if subnet_ids != null then 'subnet_ids']: subnet_ids,
        [if tags != null then 'tags']: tags,
        id:: '${aws_default_network_acl.%s.id}' % rname,
        owner_id:: '${aws_default_network_acl.%s.owner_id}' % rname,
        vpc_id:: '${aws_default_network_acl.%s.vpc_id}' % rname,
        egress:: {},
        ingress:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_egress(egress):: self + {
        egress: egress,
      },
      egress:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param action (required)
        // @param from_port (required)
        // @param protocol (required)
        // @param rule_no (required)
        // @param to_port (required)
        // @param cidr_block (optional)
        // @param icmp_code (optional)
        // @param icmp_type (optional)
        // @param ipv6_cidr_block (optional)
        new(rname, action, from_port, protocol, rule_no, to_port, cidr_block=null, icmp_code=null, icmp_type=null, ipv6_cidr_block=null):: {
          rname:: rname,
          action: action,
          from_port: from_port,
          protocol: protocol,
          rule_no: rule_no,
          to_port: to_port,
          [if cidr_block != null then 'cidr_block']: cidr_block,
          [if icmp_code != null then 'icmp_code']: icmp_code,
          [if icmp_type != null then 'icmp_type']: icmp_type,
          [if ipv6_cidr_block != null then 'ipv6_cidr_block']: ipv6_cidr_block,
        },
      },
      with_ingress(ingress):: self + {
        ingress: ingress,
      },
      ingress:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param action (required)
        // @param from_port (required)
        // @param protocol (required)
        // @param rule_no (required)
        // @param to_port (required)
        // @param cidr_block (optional)
        // @param icmp_code (optional)
        // @param icmp_type (optional)
        // @param ipv6_cidr_block (optional)
        new(rname, action, from_port, protocol, rule_no, to_port, cidr_block=null, icmp_code=null, icmp_type=null, ipv6_cidr_block=null):: {
          rname:: rname,
          action: action,
          from_port: from_port,
          protocol: protocol,
          rule_no: rule_no,
          to_port: to_port,
          [if cidr_block != null then 'cidr_block']: cidr_block,
          [if icmp_code != null then 'icmp_code']: icmp_code,
          [if icmp_type != null then 'icmp_type']: icmp_type,
          [if ipv6_cidr_block != null then 'ipv6_cidr_block']: ipv6_cidr_block,
        },
      },
    },
    // aws_default_route_table - https://www.terraform.io/docs/providers/aws/r/default_route_table.html
    aws_default_route_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param default_route_table_id (required)
      // @param propagating_vgws (optional)
      // @param tags (optional)
      new(rname, default_route_table_id, propagating_vgws=null, tags=null):: {
        rname:: rname,
        default_route_table_id: default_route_table_id,
        [if propagating_vgws != null then 'propagating_vgws']: propagating_vgws,
        [if tags != null then 'tags']: tags,
        id:: '${aws_default_route_table.%s.id}' % rname,
        owner_id:: '${aws_default_route_table.%s.owner_id}' % rname,
        route:: '${aws_default_route_table.%s.route}' % rname,
        vpc_id:: '${aws_default_route_table.%s.vpc_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_route(route):: {
        route::: route,
      },
    },
    // aws_default_security_group - https://www.terraform.io/docs/providers/aws/r/default_security_group.html
    aws_default_security_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param egress (optional)
      // @param ingress (optional)
      // @param revoke_rules_on_delete (optional)
      // @param tags (optional)
      new(rname, egress=null, ingress=null, revoke_rules_on_delete=null, tags=null):: {
        rname:: rname,
        [if egress != null then 'egress']: egress,
        [if ingress != null then 'ingress']: ingress,
        [if revoke_rules_on_delete != null then 'revoke_rules_on_delete']: revoke_rules_on_delete,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_default_security_group.%s.arn}' % rname,
        description:: '${aws_default_security_group.%s.description}' % rname,
        id:: '${aws_default_security_group.%s.id}' % rname,
        name:: '${aws_default_security_group.%s.name}' % rname,
        owner_id:: '${aws_default_security_group.%s.owner_id}' % rname,
        vpc_id:: '${aws_default_security_group.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_vpc_id(vpc_id):: {
        vpc_id::: vpc_id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_default_subnet - https://www.terraform.io/docs/providers/aws/r/default_subnet.html
    aws_default_subnet:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param availability_zone (required)
      // @param tags (optional)
      new(rname, availability_zone, tags=null):: {
        rname:: rname,
        availability_zone: availability_zone,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_default_subnet.%s.arn}' % rname,
        assign_ipv6_address_on_creation:: '${aws_default_subnet.%s.assign_ipv6_address_on_creation}' % rname,
        availability_zone_id:: '${aws_default_subnet.%s.availability_zone_id}' % rname,
        cidr_block:: '${aws_default_subnet.%s.cidr_block}' % rname,
        id:: '${aws_default_subnet.%s.id}' % rname,
        ipv6_cidr_block:: '${aws_default_subnet.%s.ipv6_cidr_block}' % rname,
        ipv6_cidr_block_association_id:: '${aws_default_subnet.%s.ipv6_cidr_block_association_id}' % rname,
        map_public_ip_on_launch:: '${aws_default_subnet.%s.map_public_ip_on_launch}' % rname,
        owner_id:: '${aws_default_subnet.%s.owner_id}' % rname,
        vpc_id:: '${aws_default_subnet.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_map_public_ip_on_launch(map_public_ip_on_launch):: {
        map_public_ip_on_launch::: map_public_ip_on_launch,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_default_vpc - https://www.terraform.io/docs/providers/aws/r/default_vpc.html
    aws_default_vpc:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enable_dns_support (optional)
      // @param tags (optional)
      new(rname, enable_dns_support=null, tags=null):: {
        rname:: rname,
        [if enable_dns_support != null then 'enable_dns_support']: enable_dns_support,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_default_vpc.%s.arn}' % rname,
        assign_generated_ipv6_cidr_block:: '${aws_default_vpc.%s.assign_generated_ipv6_cidr_block}' % rname,
        cidr_block:: '${aws_default_vpc.%s.cidr_block}' % rname,
        default_network_acl_id:: '${aws_default_vpc.%s.default_network_acl_id}' % rname,
        default_route_table_id:: '${aws_default_vpc.%s.default_route_table_id}' % rname,
        default_security_group_id:: '${aws_default_vpc.%s.default_security_group_id}' % rname,
        dhcp_options_id:: '${aws_default_vpc.%s.dhcp_options_id}' % rname,
        enable_classiclink:: '${aws_default_vpc.%s.enable_classiclink}' % rname,
        enable_classiclink_dns_support:: '${aws_default_vpc.%s.enable_classiclink_dns_support}' % rname,
        enable_dns_hostnames:: '${aws_default_vpc.%s.enable_dns_hostnames}' % rname,
        id:: '${aws_default_vpc.%s.id}' % rname,
        instance_tenancy:: '${aws_default_vpc.%s.instance_tenancy}' % rname,
        ipv6_association_id:: '${aws_default_vpc.%s.ipv6_association_id}' % rname,
        ipv6_cidr_block:: '${aws_default_vpc.%s.ipv6_cidr_block}' % rname,
        main_route_table_id:: '${aws_default_vpc.%s.main_route_table_id}' % rname,
        owner_id:: '${aws_default_vpc.%s.owner_id}' % rname,
      },
      with_enable_classiclink(enable_classiclink):: {
        enable_classiclink::: enable_classiclink,
      },
      with_enable_classiclink_dns_support(enable_classiclink_dns_support):: {
        enable_classiclink_dns_support::: enable_classiclink_dns_support,
      },
      with_enable_dns_hostnames(enable_dns_hostnames):: {
        enable_dns_hostnames::: enable_dns_hostnames,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_default_vpc_dhcp_options - https://www.terraform.io/docs/providers/aws/r/default_vpc_dhcp_options.html
    aws_default_vpc_dhcp_options:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param netbios_name_servers (optional)
      // @param netbios_node_type (optional)
      // @param tags (optional)
      new(rname, netbios_name_servers=null, netbios_node_type=null, tags=null):: {
        rname:: rname,
        [if netbios_name_servers != null then 'netbios_name_servers']: netbios_name_servers,
        [if netbios_node_type != null then 'netbios_node_type']: netbios_node_type,
        [if tags != null then 'tags']: tags,
        domain_name:: '${aws_default_vpc_dhcp_options.%s.domain_name}' % rname,
        domain_name_servers:: '${aws_default_vpc_dhcp_options.%s.domain_name_servers}' % rname,
        id:: '${aws_default_vpc_dhcp_options.%s.id}' % rname,
        ntp_servers:: '${aws_default_vpc_dhcp_options.%s.ntp_servers}' % rname,
        owner_id:: '${aws_default_vpc_dhcp_options.%s.owner_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_devicefarm_project - https://www.terraform.io/docs/providers/aws/r/devicefarm_project.html
    aws_devicefarm_project:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_devicefarm_project.%s.arn}' % rname,
        id:: '${aws_devicefarm_project.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_directory_service_conditional_forwarder - https://www.terraform.io/docs/providers/aws/r/directory_service_conditional_forwarder.html
    aws_directory_service_conditional_forwarder:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param directory_id (required)
      // @param dns_ips (required)
      // @param remote_domain_name (required)
      new(rname, directory_id, dns_ips, remote_domain_name):: {
        rname:: rname,
        directory_id: directory_id,
        dns_ips: dns_ips,
        remote_domain_name: remote_domain_name,
        id:: '${aws_directory_service_conditional_forwarder.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_directory_service_directory - https://www.terraform.io/docs/providers/aws/r/directory_service_directory.html
    aws_directory_service_directory:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param password (required)
      // @param description (optional)
      // @param enable_sso (optional)
      // @param tags (optional)
      // @param type (optional)
      new(rname, name, password, description=null, enable_sso=null, tags=null, type=null):: {
        rname:: rname,
        name: name,
        password: password,
        [if description != null then 'description']: description,
        [if enable_sso != null then 'enable_sso']: enable_sso,
        [if tags != null then 'tags']: tags,
        [if type != null then 'type']: type,
        access_url:: '${aws_directory_service_directory.%s.access_url}' % rname,
        alias:: '${aws_directory_service_directory.%s.alias}' % rname,
        dns_ip_addresses:: '${aws_directory_service_directory.%s.dns_ip_addresses}' % rname,
        edition:: '${aws_directory_service_directory.%s.edition}' % rname,
        id:: '${aws_directory_service_directory.%s.id}' % rname,
        security_group_id:: '${aws_directory_service_directory.%s.security_group_id}' % rname,
        short_name:: '${aws_directory_service_directory.%s.short_name}' % rname,
        size:: '${aws_directory_service_directory.%s.size}' % rname,
        connect_settings:: {},
        vpc_settings:: {},
      },
      with_alias(alias):: {
        alias::: alias,
      },
      with_edition(edition):: {
        edition::: edition,
      },
      with_id(id):: {
        id::: id,
      },
      with_short_name(short_name):: {
        short_name::: short_name,
      },
      with_size(size):: {
        size::: size,
      },
      with_connect_settings(connect_settings):: self + {
        connect_settings: connect_settings,
      },
      connect_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param customer_dns_ips (required)
        // @param customer_username (required)
        // @param subnet_ids (required)
        // @param vpc_id (required)
        new(rname, customer_dns_ips, customer_username, subnet_ids, vpc_id):: {
          rname:: rname,
          customer_dns_ips: customer_dns_ips,
          customer_username: customer_username,
          subnet_ids: subnet_ids,
          vpc_id: vpc_id,
        },
      },
      with_vpc_settings(vpc_settings):: self + {
        vpc_settings: vpc_settings,
      },
      vpc_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnet_ids (required)
        // @param vpc_id (required)
        new(rname, subnet_ids, vpc_id):: {
          rname:: rname,
          subnet_ids: subnet_ids,
          vpc_id: vpc_id,
        },
      },
    },
    // aws_directory_service_log_subscription - https://www.terraform.io/docs/providers/aws/r/directory_service_log_subscription.html
    aws_directory_service_log_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param directory_id (required)
      // @param log_group_name (required)
      new(rname, directory_id, log_group_name):: {
        rname:: rname,
        directory_id: directory_id,
        log_group_name: log_group_name,
        id:: '${aws_directory_service_log_subscription.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dlm_lifecycle_policy - https://www.terraform.io/docs/providers/aws/r/dlm_lifecycle_policy.html
    aws_dlm_lifecycle_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (required)
      // @param execution_role_arn (required)
      // @param state (optional)
      // @param tags (optional)
      // @param policy_details (required)
      new(rname, description, execution_role_arn, policy_details, state=null, tags=null):: {
        rname:: rname,
        description: description,
        execution_role_arn: execution_role_arn,
        [if state != null then 'state']: state,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dlm_lifecycle_policy.%s.arn}' % rname,
        id:: '${aws_dlm_lifecycle_policy.%s.id}' % rname,
        policy_details: policy_details,
      },
      with_id(id):: {
        id::: id,
      },
      policy_details:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param resource_types (required)
        // @param target_tags (required)
        // @param schedule (required)
        new(rname, resource_types, target_tags, schedule):: {
          rname:: rname,
          resource_types: resource_types,
          target_tags: target_tags,
          schedule: schedule,
        },
        schedule:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (required)
          // @param tags_to_add (optional)
          // @param create_rule (required)
          // @param retain_rule (required)
          new(rname, name, create_rule, retain_rule, tags_to_add=null):: {
            rname:: rname,
            name: name,
            [if tags_to_add != null then 'tags_to_add']: tags_to_add,
            copy_tags:: '${aws_dlm_lifecycle_policy.%s.policy_details.schedule.copy_tags}' % rname,
            create_rule: create_rule,
            retain_rule: retain_rule,
          },
          with_copy_tags(copy_tags):: {
            copy_tags::: copy_tags,
          },
          create_rule:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param interval (required)
            // @param interval_unit (optional)
            new(rname, interval, interval_unit=null):: {
              rname:: rname,
              interval: interval,
              [if interval_unit != null then 'interval_unit']: interval_unit,
              times:: '${aws_dlm_lifecycle_policy.%s.policy_details.schedule.create_rule.times}' % rname,
            },
            with_times(times):: {
              times::: times,
            },
          },
          retain_rule:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param count (required)
            new(rname, count):: {
              rname:: rname,
              count: count,
            },
          },
        },
      },
    },
    // aws_dms_certificate - https://www.terraform.io/docs/providers/aws/r/dms_certificate.html
    aws_dms_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_id (required)
      // @param certificate_pem (optional)
      // @param certificate_wallet (optional)
      new(rname, certificate_id, certificate_pem=null, certificate_wallet=null):: {
        rname:: rname,
        certificate_id: certificate_id,
        [if certificate_pem != null then 'certificate_pem']: certificate_pem,
        [if certificate_wallet != null then 'certificate_wallet']: certificate_wallet,
        certificate_arn:: '${aws_dms_certificate.%s.certificate_arn}' % rname,
        id:: '${aws_dms_certificate.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dms_endpoint - https://www.terraform.io/docs/providers/aws/r/dms_endpoint.html
    aws_dms_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param endpoint_id (required)
      // @param endpoint_type (required)
      // @param engine_name (required)
      // @param database_name (optional)
      // @param password (optional)
      // @param port (optional)
      // @param server_name (optional)
      // @param service_access_role (optional)
      // @param tags (optional)
      // @param username (optional)
      new(rname, endpoint_id, endpoint_type, engine_name, database_name=null, password=null, port=null, server_name=null, service_access_role=null, tags=null, username=null):: {
        rname:: rname,
        endpoint_id: endpoint_id,
        endpoint_type: endpoint_type,
        engine_name: engine_name,
        [if database_name != null then 'database_name']: database_name,
        [if password != null then 'password']: password,
        [if port != null then 'port']: port,
        [if server_name != null then 'server_name']: server_name,
        [if service_access_role != null then 'service_access_role']: service_access_role,
        [if tags != null then 'tags']: tags,
        [if username != null then 'username']: username,
        certificate_arn:: '${aws_dms_endpoint.%s.certificate_arn}' % rname,
        endpoint_arn:: '${aws_dms_endpoint.%s.endpoint_arn}' % rname,
        extra_connection_attributes:: '${aws_dms_endpoint.%s.extra_connection_attributes}' % rname,
        id:: '${aws_dms_endpoint.%s.id}' % rname,
        kms_key_arn:: '${aws_dms_endpoint.%s.kms_key_arn}' % rname,
        ssl_mode:: '${aws_dms_endpoint.%s.ssl_mode}' % rname,
        mongodb_settings:: {},
        s3_settings:: {},
      },
      with_certificate_arn(certificate_arn):: {
        certificate_arn::: certificate_arn,
      },
      with_extra_connection_attributes(extra_connection_attributes):: {
        extra_connection_attributes::: extra_connection_attributes,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_arn(kms_key_arn):: {
        kms_key_arn::: kms_key_arn,
      },
      with_ssl_mode(ssl_mode):: {
        ssl_mode::: ssl_mode,
      },
      with_mongodb_settings(mongodb_settings):: self + {
        mongodb_settings: mongodb_settings,
      },
      mongodb_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param auth_mechanism (optional)
        // @param auth_source (optional)
        // @param auth_type (optional)
        // @param docs_to_investigate (optional)
        // @param extract_doc_id (optional)
        // @param nesting_level (optional)
        new(rname, auth_mechanism=null, auth_source=null, auth_type=null, docs_to_investigate=null, extract_doc_id=null, nesting_level=null):: {
          rname:: rname,
          [if auth_mechanism != null then 'auth_mechanism']: auth_mechanism,
          [if auth_source != null then 'auth_source']: auth_source,
          [if auth_type != null then 'auth_type']: auth_type,
          [if docs_to_investigate != null then 'docs_to_investigate']: docs_to_investigate,
          [if extract_doc_id != null then 'extract_doc_id']: extract_doc_id,
          [if nesting_level != null then 'nesting_level']: nesting_level,
        },
      },
      with_s3_settings(s3_settings):: self + {
        s3_settings: s3_settings,
      },
      s3_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_folder (optional)
        // @param bucket_name (optional)
        // @param compression_type (optional)
        // @param csv_delimiter (optional)
        // @param csv_row_delimiter (optional)
        // @param external_table_definition (optional)
        // @param service_access_role_arn (optional)
        new(rname, bucket_folder=null, bucket_name=null, compression_type=null, csv_delimiter=null, csv_row_delimiter=null, external_table_definition=null, service_access_role_arn=null):: {
          rname:: rname,
          [if bucket_folder != null then 'bucket_folder']: bucket_folder,
          [if bucket_name != null then 'bucket_name']: bucket_name,
          [if compression_type != null then 'compression_type']: compression_type,
          [if csv_delimiter != null then 'csv_delimiter']: csv_delimiter,
          [if csv_row_delimiter != null then 'csv_row_delimiter']: csv_row_delimiter,
          [if external_table_definition != null then 'external_table_definition']: external_table_definition,
          [if service_access_role_arn != null then 'service_access_role_arn']: service_access_role_arn,
        },
      },
    },
    // aws_dms_replication_instance - https://www.terraform.io/docs/providers/aws/r/dms_replication_instance.html
    aws_dms_replication_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param replication_instance_class (required)
      // @param replication_instance_id (required)
      // @param apply_immediately (optional)
      // @param tags (optional)
      new(rname, replication_instance_class, replication_instance_id, apply_immediately=null, tags=null):: {
        rname:: rname,
        replication_instance_class: replication_instance_class,
        replication_instance_id: replication_instance_id,
        [if apply_immediately != null then 'apply_immediately']: apply_immediately,
        [if tags != null then 'tags']: tags,
        allocated_storage:: '${aws_dms_replication_instance.%s.allocated_storage}' % rname,
        auto_minor_version_upgrade:: '${aws_dms_replication_instance.%s.auto_minor_version_upgrade}' % rname,
        availability_zone:: '${aws_dms_replication_instance.%s.availability_zone}' % rname,
        engine_version:: '${aws_dms_replication_instance.%s.engine_version}' % rname,
        id:: '${aws_dms_replication_instance.%s.id}' % rname,
        kms_key_arn:: '${aws_dms_replication_instance.%s.kms_key_arn}' % rname,
        multi_az:: '${aws_dms_replication_instance.%s.multi_az}' % rname,
        preferred_maintenance_window:: '${aws_dms_replication_instance.%s.preferred_maintenance_window}' % rname,
        publicly_accessible:: '${aws_dms_replication_instance.%s.publicly_accessible}' % rname,
        replication_instance_arn:: '${aws_dms_replication_instance.%s.replication_instance_arn}' % rname,
        replication_instance_private_ips:: '${aws_dms_replication_instance.%s.replication_instance_private_ips}' % rname,
        replication_instance_public_ips:: '${aws_dms_replication_instance.%s.replication_instance_public_ips}' % rname,
        replication_subnet_group_id:: '${aws_dms_replication_instance.%s.replication_subnet_group_id}' % rname,
        vpc_security_group_ids:: '${aws_dms_replication_instance.%s.vpc_security_group_ids}' % rname,
        timeouts:: {},
      },
      with_allocated_storage(allocated_storage):: {
        allocated_storage::: allocated_storage,
      },
      with_auto_minor_version_upgrade(auto_minor_version_upgrade):: {
        auto_minor_version_upgrade::: auto_minor_version_upgrade,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_arn(kms_key_arn):: {
        kms_key_arn::: kms_key_arn,
      },
      with_multi_az(multi_az):: {
        multi_az::: multi_az,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_publicly_accessible(publicly_accessible):: {
        publicly_accessible::: publicly_accessible,
      },
      with_replication_subnet_group_id(replication_subnet_group_id):: {
        replication_subnet_group_id::: replication_subnet_group_id,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dms_replication_subnet_group - https://www.terraform.io/docs/providers/aws/r/dms_replication_subnet_group.html
    aws_dms_replication_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param replication_subnet_group_description (required)
      // @param replication_subnet_group_id (required)
      // @param subnet_ids (required)
      // @param tags (optional)
      new(rname, replication_subnet_group_description, replication_subnet_group_id, subnet_ids, tags=null):: {
        rname:: rname,
        replication_subnet_group_description: replication_subnet_group_description,
        replication_subnet_group_id: replication_subnet_group_id,
        subnet_ids: subnet_ids,
        [if tags != null then 'tags']: tags,
        id:: '${aws_dms_replication_subnet_group.%s.id}' % rname,
        replication_subnet_group_arn:: '${aws_dms_replication_subnet_group.%s.replication_subnet_group_arn}' % rname,
        vpc_id:: '${aws_dms_replication_subnet_group.%s.vpc_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dms_replication_task - https://www.terraform.io/docs/providers/aws/r/dms_replication_task.html
    aws_dms_replication_task:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param migration_type (required)
      // @param replication_instance_arn (required)
      // @param replication_task_id (required)
      // @param source_endpoint_arn (required)
      // @param table_mappings (required)
      // @param target_endpoint_arn (required)
      // @param cdc_start_time (optional)
      // @param replication_task_settings (optional)
      // @param tags (optional)
      new(rname, migration_type, replication_instance_arn, replication_task_id, source_endpoint_arn, table_mappings, target_endpoint_arn, cdc_start_time=null, replication_task_settings=null, tags=null):: {
        rname:: rname,
        migration_type: migration_type,
        replication_instance_arn: replication_instance_arn,
        replication_task_id: replication_task_id,
        source_endpoint_arn: source_endpoint_arn,
        table_mappings: table_mappings,
        target_endpoint_arn: target_endpoint_arn,
        [if cdc_start_time != null then 'cdc_start_time']: cdc_start_time,
        [if replication_task_settings != null then 'replication_task_settings']: replication_task_settings,
        [if tags != null then 'tags']: tags,
        id:: '${aws_dms_replication_task.%s.id}' % rname,
        replication_task_arn:: '${aws_dms_replication_task.%s.replication_task_arn}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_docdb_cluster - https://www.terraform.io/docs/providers/aws/r/docdb_cluster.html
    aws_docdb_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param backup_retention_period (optional)
      // @param enabled_cloudwatch_logs_exports (optional)
      // @param engine (optional)
      // @param final_snapshot_identifier (optional)
      // @param master_password (optional)
      // @param port (optional)
      // @param skip_final_snapshot (optional)
      // @param snapshot_identifier (optional)
      // @param storage_encrypted (optional)
      // @param tags (optional)
      new(rname, backup_retention_period=null, enabled_cloudwatch_logs_exports=null, engine=null, final_snapshot_identifier=null, master_password=null, port=null, skip_final_snapshot=null, snapshot_identifier=null, storage_encrypted=null, tags=null):: {
        rname:: rname,
        [if backup_retention_period != null then 'backup_retention_period']: backup_retention_period,
        [if enabled_cloudwatch_logs_exports != null then 'enabled_cloudwatch_logs_exports']: enabled_cloudwatch_logs_exports,
        [if engine != null then 'engine']: engine,
        [if final_snapshot_identifier != null then 'final_snapshot_identifier']: final_snapshot_identifier,
        [if master_password != null then 'master_password']: master_password,
        [if port != null then 'port']: port,
        [if skip_final_snapshot != null then 'skip_final_snapshot']: skip_final_snapshot,
        [if snapshot_identifier != null then 'snapshot_identifier']: snapshot_identifier,
        [if storage_encrypted != null then 'storage_encrypted']: storage_encrypted,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_docdb_cluster.%s.apply_immediately}' % rname,
        arn:: '${aws_docdb_cluster.%s.arn}' % rname,
        availability_zones:: '${aws_docdb_cluster.%s.availability_zones}' % rname,
        cluster_identifier:: '${aws_docdb_cluster.%s.cluster_identifier}' % rname,
        cluster_identifier_prefix:: '${aws_docdb_cluster.%s.cluster_identifier_prefix}' % rname,
        cluster_members:: '${aws_docdb_cluster.%s.cluster_members}' % rname,
        cluster_resource_id:: '${aws_docdb_cluster.%s.cluster_resource_id}' % rname,
        db_cluster_parameter_group_name:: '${aws_docdb_cluster.%s.db_cluster_parameter_group_name}' % rname,
        db_subnet_group_name:: '${aws_docdb_cluster.%s.db_subnet_group_name}' % rname,
        endpoint:: '${aws_docdb_cluster.%s.endpoint}' % rname,
        engine_version:: '${aws_docdb_cluster.%s.engine_version}' % rname,
        hosted_zone_id:: '${aws_docdb_cluster.%s.hosted_zone_id}' % rname,
        id:: '${aws_docdb_cluster.%s.id}' % rname,
        kms_key_id:: '${aws_docdb_cluster.%s.kms_key_id}' % rname,
        master_username:: '${aws_docdb_cluster.%s.master_username}' % rname,
        preferred_backup_window:: '${aws_docdb_cluster.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_docdb_cluster.%s.preferred_maintenance_window}' % rname,
        reader_endpoint:: '${aws_docdb_cluster.%s.reader_endpoint}' % rname,
        vpc_security_group_ids:: '${aws_docdb_cluster.%s.vpc_security_group_ids}' % rname,
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zones(availability_zones):: {
        availability_zones::: availability_zones,
      },
      with_cluster_identifier(cluster_identifier):: {
        cluster_identifier::: cluster_identifier,
      },
      with_cluster_identifier_prefix(cluster_identifier_prefix):: {
        cluster_identifier_prefix::: cluster_identifier_prefix,
      },
      with_cluster_members(cluster_members):: {
        cluster_members::: cluster_members,
      },
      with_db_cluster_parameter_group_name(db_cluster_parameter_group_name):: {
        db_cluster_parameter_group_name::: db_cluster_parameter_group_name,
      },
      with_db_subnet_group_name(db_subnet_group_name):: {
        db_subnet_group_name::: db_subnet_group_name,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_master_username(master_username):: {
        master_username::: master_username,
      },
      with_preferred_backup_window(preferred_backup_window):: {
        preferred_backup_window::: preferred_backup_window,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_docdb_cluster_instance - https://www.terraform.io/docs/providers/aws/r/docdb_cluster_instance.html
    aws_docdb_cluster_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_identifier (required)
      // @param instance_class (required)
      // @param auto_minor_version_upgrade (optional)
      // @param engine (optional)
      // @param promotion_tier (optional)
      // @param tags (optional)
      new(rname, cluster_identifier, instance_class, auto_minor_version_upgrade=null, engine=null, promotion_tier=null, tags=null):: {
        rname:: rname,
        cluster_identifier: cluster_identifier,
        instance_class: instance_class,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if engine != null then 'engine']: engine,
        [if promotion_tier != null then 'promotion_tier']: promotion_tier,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_docdb_cluster_instance.%s.apply_immediately}' % rname,
        arn:: '${aws_docdb_cluster_instance.%s.arn}' % rname,
        availability_zone:: '${aws_docdb_cluster_instance.%s.availability_zone}' % rname,
        ca_cert_identifier:: '${aws_docdb_cluster_instance.%s.ca_cert_identifier}' % rname,
        db_subnet_group_name:: '${aws_docdb_cluster_instance.%s.db_subnet_group_name}' % rname,
        dbi_resource_id:: '${aws_docdb_cluster_instance.%s.dbi_resource_id}' % rname,
        endpoint:: '${aws_docdb_cluster_instance.%s.endpoint}' % rname,
        engine_version:: '${aws_docdb_cluster_instance.%s.engine_version}' % rname,
        id:: '${aws_docdb_cluster_instance.%s.id}' % rname,
        identifier:: '${aws_docdb_cluster_instance.%s.identifier}' % rname,
        identifier_prefix:: '${aws_docdb_cluster_instance.%s.identifier_prefix}' % rname,
        kms_key_id:: '${aws_docdb_cluster_instance.%s.kms_key_id}' % rname,
        port:: '${aws_docdb_cluster_instance.%s.port}' % rname,
        preferred_backup_window:: '${aws_docdb_cluster_instance.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_docdb_cluster_instance.%s.preferred_maintenance_window}' % rname,
        publicly_accessible:: '${aws_docdb_cluster_instance.%s.publicly_accessible}' % rname,
        storage_encrypted:: '${aws_docdb_cluster_instance.%s.storage_encrypted}' % rname,
        writer:: '${aws_docdb_cluster_instance.%s.writer}' % rname,
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_ca_cert_identifier(ca_cert_identifier):: {
        ca_cert_identifier::: ca_cert_identifier,
      },
      with_id(id):: {
        id::: id,
      },
      with_identifier(identifier):: {
        identifier::: identifier,
      },
      with_identifier_prefix(identifier_prefix):: {
        identifier_prefix::: identifier_prefix,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_docdb_cluster_parameter_group - https://www.terraform.io/docs/providers/aws/r/docdb_cluster_parameter_group.html
    aws_docdb_cluster_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, description=null, tags=null):: {
        rname:: rname,
        family: family,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_docdb_cluster_parameter_group.%s.arn}' % rname,
        id:: '${aws_docdb_cluster_parameter_group.%s.id}' % rname,
        name:: '${aws_docdb_cluster_parameter_group.%s.name}' % rname,
        name_prefix:: '${aws_docdb_cluster_parameter_group.%s.name_prefix}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        // @param apply_method (optional)
        new(rname, name, value, apply_method=null):: {
          rname:: rname,
          name: name,
          value: value,
          [if apply_method != null then 'apply_method']: apply_method,
        },
      },
    },
    // aws_docdb_cluster_snapshot - https://www.terraform.io/docs/providers/aws/r/docdb_cluster_snapshot.html
    aws_docdb_cluster_snapshot:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_cluster_identifier (required)
      // @param db_cluster_snapshot_identifier (required)
      new(rname, db_cluster_identifier, db_cluster_snapshot_identifier):: {
        rname:: rname,
        db_cluster_identifier: db_cluster_identifier,
        db_cluster_snapshot_identifier: db_cluster_snapshot_identifier,
        availability_zones:: '${aws_docdb_cluster_snapshot.%s.availability_zones}' % rname,
        db_cluster_snapshot_arn:: '${aws_docdb_cluster_snapshot.%s.db_cluster_snapshot_arn}' % rname,
        engine:: '${aws_docdb_cluster_snapshot.%s.engine}' % rname,
        engine_version:: '${aws_docdb_cluster_snapshot.%s.engine_version}' % rname,
        id:: '${aws_docdb_cluster_snapshot.%s.id}' % rname,
        kms_key_id:: '${aws_docdb_cluster_snapshot.%s.kms_key_id}' % rname,
        port:: '${aws_docdb_cluster_snapshot.%s.port}' % rname,
        snapshot_type:: '${aws_docdb_cluster_snapshot.%s.snapshot_type}' % rname,
        source_db_cluster_snapshot_arn:: '${aws_docdb_cluster_snapshot.%s.source_db_cluster_snapshot_arn}' % rname,
        status:: '${aws_docdb_cluster_snapshot.%s.status}' % rname,
        storage_encrypted:: '${aws_docdb_cluster_snapshot.%s.storage_encrypted}' % rname,
        vpc_id:: '${aws_docdb_cluster_snapshot.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_docdb_subnet_group - https://www.terraform.io/docs/providers/aws/r/docdb_subnet_group.html
    aws_docdb_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_ids (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, subnet_ids, description=null, tags=null):: {
        rname:: rname,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_docdb_subnet_group.%s.arn}' % rname,
        id:: '${aws_docdb_subnet_group.%s.id}' % rname,
        name:: '${aws_docdb_subnet_group.%s.name}' % rname,
        name_prefix:: '${aws_docdb_subnet_group.%s.name_prefix}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
    },
    // aws_dx_bgp_peer - https://www.terraform.io/docs/providers/aws/r/dx_bgp_peer.html
    aws_dx_bgp_peer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param virtual_interface_id (required)
      new(rname, address_family, bgp_asn, virtual_interface_id):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        virtual_interface_id: virtual_interface_id,
        amazon_address:: '${aws_dx_bgp_peer.%s.amazon_address}' % rname,
        aws_device:: '${aws_dx_bgp_peer.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_bgp_peer.%s.bgp_auth_key}' % rname,
        bgp_peer_id:: '${aws_dx_bgp_peer.%s.bgp_peer_id}' % rname,
        bgp_status:: '${aws_dx_bgp_peer.%s.bgp_status}' % rname,
        customer_address:: '${aws_dx_bgp_peer.%s.customer_address}' % rname,
        id:: '${aws_dx_bgp_peer.%s.id}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_connection - https://www.terraform.io/docs/providers/aws/r/dx_connection.html
    aws_dx_connection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bandwidth (required)
      // @param location (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, bandwidth, location, name, tags=null):: {
        rname:: rname,
        bandwidth: bandwidth,
        location: location,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dx_connection.%s.arn}' % rname,
        aws_device:: '${aws_dx_connection.%s.aws_device}' % rname,
        has_logical_redundancy:: '${aws_dx_connection.%s.has_logical_redundancy}' % rname,
        id:: '${aws_dx_connection.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_connection.%s.jumbo_frame_capable}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dx_connection_association - https://www.terraform.io/docs/providers/aws/r/dx_connection_association.html
    aws_dx_connection_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param connection_id (required)
      // @param lag_id (required)
      new(rname, connection_id, lag_id):: {
        rname:: rname,
        connection_id: connection_id,
        lag_id: lag_id,
        id:: '${aws_dx_connection_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dx_gateway - https://www.terraform.io/docs/providers/aws/r/dx_gateway.html
    aws_dx_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param amazon_side_asn (required)
      // @param name (required)
      new(rname, amazon_side_asn, name):: {
        rname:: rname,
        amazon_side_asn: amazon_side_asn,
        name: name,
        id:: '${aws_dx_gateway.%s.id}' % rname,
        owner_account_id:: '${aws_dx_gateway.%s.owner_account_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_gateway_association - https://www.terraform.io/docs/providers/aws/r/dx_gateway_association.html
    aws_dx_gateway_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param dx_gateway_id (required)
      // @param proposal_id (optional)
      // @param vpn_gateway_id (optional)
      new(rname, dx_gateway_id, proposal_id=null, vpn_gateway_id=null):: {
        rname:: rname,
        dx_gateway_id: dx_gateway_id,
        [if proposal_id != null then 'proposal_id']: proposal_id,
        [if vpn_gateway_id != null then 'vpn_gateway_id']: vpn_gateway_id,
        allowed_prefixes:: '${aws_dx_gateway_association.%s.allowed_prefixes}' % rname,
        associated_gateway_id:: '${aws_dx_gateway_association.%s.associated_gateway_id}' % rname,
        associated_gateway_owner_account_id:: '${aws_dx_gateway_association.%s.associated_gateway_owner_account_id}' % rname,
        associated_gateway_type:: '${aws_dx_gateway_association.%s.associated_gateway_type}' % rname,
        dx_gateway_association_id:: '${aws_dx_gateway_association.%s.dx_gateway_association_id}' % rname,
        dx_gateway_owner_account_id:: '${aws_dx_gateway_association.%s.dx_gateway_owner_account_id}' % rname,
        id:: '${aws_dx_gateway_association.%s.id}' % rname,
        timeouts:: {},
      },
      with_allowed_prefixes(allowed_prefixes):: {
        allowed_prefixes::: allowed_prefixes,
      },
      with_associated_gateway_id(associated_gateway_id):: {
        associated_gateway_id::: associated_gateway_id,
      },
      with_associated_gateway_owner_account_id(associated_gateway_owner_account_id):: {
        associated_gateway_owner_account_id::: associated_gateway_owner_account_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dx_gateway_association_proposal - https://www.terraform.io/docs/providers/aws/r/dx_gateway_association_proposal.html
    aws_dx_gateway_association_proposal:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param dx_gateway_id (required)
      // @param dx_gateway_owner_account_id (required)
      // @param associated_gateway_id (optional)
      // @param vpn_gateway_id (optional)
      new(rname, dx_gateway_id, dx_gateway_owner_account_id, associated_gateway_id=null, vpn_gateway_id=null):: {
        rname:: rname,
        dx_gateway_id: dx_gateway_id,
        dx_gateway_owner_account_id: dx_gateway_owner_account_id,
        [if associated_gateway_id != null then 'associated_gateway_id']: associated_gateway_id,
        [if vpn_gateway_id != null then 'vpn_gateway_id']: vpn_gateway_id,
        allowed_prefixes:: '${aws_dx_gateway_association_proposal.%s.allowed_prefixes}' % rname,
        associated_gateway_owner_account_id:: '${aws_dx_gateway_association_proposal.%s.associated_gateway_owner_account_id}' % rname,
        associated_gateway_type:: '${aws_dx_gateway_association_proposal.%s.associated_gateway_type}' % rname,
        id:: '${aws_dx_gateway_association_proposal.%s.id}' % rname,
      },
      with_allowed_prefixes(allowed_prefixes):: {
        allowed_prefixes::: allowed_prefixes,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_dx_hosted_private_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_hosted_private_virtual_interface.html
    aws_dx_hosted_private_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param name (required)
      // @param owner_account_id (required)
      // @param vlan (required)
      // @param mtu (optional)
      new(rname, address_family, bgp_asn, connection_id, name, owner_account_id, vlan, mtu=null):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        name: name,
        owner_account_id: owner_account_id,
        vlan: vlan,
        [if mtu != null then 'mtu']: mtu,
        amazon_address:: '${aws_dx_hosted_private_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_hosted_private_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_hosted_private_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_hosted_private_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_hosted_private_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_hosted_private_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_hosted_private_virtual_interface.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_hosted_private_virtual_interface.%s.jumbo_frame_capable}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dx_hosted_private_virtual_interface_accepter - https://www.terraform.io/docs/providers/aws/r/dx_hosted_private_virtual_interface_accepter.html
    aws_dx_hosted_private_virtual_interface_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param virtual_interface_id (required)
      // @param dx_gateway_id (optional)
      // @param tags (optional)
      // @param vpn_gateway_id (optional)
      new(rname, virtual_interface_id, dx_gateway_id=null, tags=null, vpn_gateway_id=null):: {
        rname:: rname,
        virtual_interface_id: virtual_interface_id,
        [if dx_gateway_id != null then 'dx_gateway_id']: dx_gateway_id,
        [if tags != null then 'tags']: tags,
        [if vpn_gateway_id != null then 'vpn_gateway_id']: vpn_gateway_id,
        arn:: '${aws_dx_hosted_private_virtual_interface_accepter.%s.arn}' % rname,
        id:: '${aws_dx_hosted_private_virtual_interface_accepter.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_hosted_public_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_hosted_public_virtual_interface.html
    aws_dx_hosted_public_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param name (required)
      // @param owner_account_id (required)
      // @param route_filter_prefixes (required)
      // @param vlan (required)
      new(rname, address_family, bgp_asn, connection_id, name, owner_account_id, route_filter_prefixes, vlan):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        name: name,
        owner_account_id: owner_account_id,
        route_filter_prefixes: route_filter_prefixes,
        vlan: vlan,
        amazon_address:: '${aws_dx_hosted_public_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_hosted_public_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_hosted_public_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_hosted_public_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_hosted_public_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_hosted_public_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_hosted_public_virtual_interface.%s.id}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_hosted_public_virtual_interface_accepter - https://www.terraform.io/docs/providers/aws/r/dx_hosted_public_virtual_interface_accepter.html
    aws_dx_hosted_public_virtual_interface_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param virtual_interface_id (required)
      // @param tags (optional)
      new(rname, virtual_interface_id, tags=null):: {
        rname:: rname,
        virtual_interface_id: virtual_interface_id,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dx_hosted_public_virtual_interface_accepter.%s.arn}' % rname,
        id:: '${aws_dx_hosted_public_virtual_interface_accepter.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_hosted_transit_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_hosted_transit_virtual_interface.html
    aws_dx_hosted_transit_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param name (required)
      // @param owner_account_id (required)
      // @param vlan (required)
      // @param mtu (optional)
      new(rname, address_family, bgp_asn, connection_id, name, owner_account_id, vlan, mtu=null):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        name: name,
        owner_account_id: owner_account_id,
        vlan: vlan,
        [if mtu != null then 'mtu']: mtu,
        amazon_address:: '${aws_dx_hosted_transit_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_hosted_transit_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_hosted_transit_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_hosted_transit_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_hosted_transit_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_hosted_transit_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_hosted_transit_virtual_interface.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_hosted_transit_virtual_interface.%s.jumbo_frame_capable}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dx_hosted_transit_virtual_interface_accepter - https://www.terraform.io/docs/providers/aws/r/dx_hosted_transit_virtual_interface_accepter.html
    aws_dx_hosted_transit_virtual_interface_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param dx_gateway_id (required)
      // @param virtual_interface_id (required)
      // @param tags (optional)
      new(rname, dx_gateway_id, virtual_interface_id, tags=null):: {
        rname:: rname,
        dx_gateway_id: dx_gateway_id,
        virtual_interface_id: virtual_interface_id,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dx_hosted_transit_virtual_interface_accepter.%s.arn}' % rname,
        id:: '${aws_dx_hosted_transit_virtual_interface_accepter.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_lag - https://www.terraform.io/docs/providers/aws/r/dx_lag.html
    aws_dx_lag:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param connections_bandwidth (required)
      // @param location (required)
      // @param name (required)
      // @param force_destroy (optional)
      // @param tags (optional)
      new(rname, connections_bandwidth, location, name, force_destroy=null, tags=null):: {
        rname:: rname,
        connections_bandwidth: connections_bandwidth,
        location: location,
        name: name,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_dx_lag.%s.arn}' % rname,
        has_logical_redundancy:: '${aws_dx_lag.%s.has_logical_redundancy}' % rname,
        id:: '${aws_dx_lag.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_lag.%s.jumbo_frame_capable}' % rname,
        number_of_connections:: '${aws_dx_lag.%s.number_of_connections}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_number_of_connections(number_of_connections):: {
        number_of_connections::: number_of_connections,
      },
    },
    // aws_dx_private_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_private_virtual_interface.html
    aws_dx_private_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param name (required)
      // @param vlan (required)
      // @param dx_gateway_id (optional)
      // @param mtu (optional)
      // @param tags (optional)
      // @param vpn_gateway_id (optional)
      new(rname, address_family, bgp_asn, connection_id, name, vlan, dx_gateway_id=null, mtu=null, tags=null, vpn_gateway_id=null):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        name: name,
        vlan: vlan,
        [if dx_gateway_id != null then 'dx_gateway_id']: dx_gateway_id,
        [if mtu != null then 'mtu']: mtu,
        [if tags != null then 'tags']: tags,
        [if vpn_gateway_id != null then 'vpn_gateway_id']: vpn_gateway_id,
        amazon_address:: '${aws_dx_private_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_private_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_private_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_private_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_private_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_private_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_private_virtual_interface.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_private_virtual_interface.%s.jumbo_frame_capable}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dx_public_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_public_virtual_interface.html
    aws_dx_public_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param name (required)
      // @param route_filter_prefixes (required)
      // @param vlan (required)
      // @param tags (optional)
      new(rname, address_family, bgp_asn, connection_id, name, route_filter_prefixes, vlan, tags=null):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        name: name,
        route_filter_prefixes: route_filter_prefixes,
        vlan: vlan,
        [if tags != null then 'tags']: tags,
        amazon_address:: '${aws_dx_public_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_public_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_public_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_public_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_public_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_public_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_public_virtual_interface.%s.id}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_dx_transit_virtual_interface - https://www.terraform.io/docs/providers/aws/r/dx_transit_virtual_interface.html
    aws_dx_transit_virtual_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param address_family (required)
      // @param bgp_asn (required)
      // @param connection_id (required)
      // @param dx_gateway_id (required)
      // @param name (required)
      // @param vlan (required)
      // @param mtu (optional)
      // @param tags (optional)
      new(rname, address_family, bgp_asn, connection_id, dx_gateway_id, name, vlan, mtu=null, tags=null):: {
        rname:: rname,
        address_family: address_family,
        bgp_asn: bgp_asn,
        connection_id: connection_id,
        dx_gateway_id: dx_gateway_id,
        name: name,
        vlan: vlan,
        [if mtu != null then 'mtu']: mtu,
        [if tags != null then 'tags']: tags,
        amazon_address:: '${aws_dx_transit_virtual_interface.%s.amazon_address}' % rname,
        amazon_side_asn:: '${aws_dx_transit_virtual_interface.%s.amazon_side_asn}' % rname,
        arn:: '${aws_dx_transit_virtual_interface.%s.arn}' % rname,
        aws_device:: '${aws_dx_transit_virtual_interface.%s.aws_device}' % rname,
        bgp_auth_key:: '${aws_dx_transit_virtual_interface.%s.bgp_auth_key}' % rname,
        customer_address:: '${aws_dx_transit_virtual_interface.%s.customer_address}' % rname,
        id:: '${aws_dx_transit_virtual_interface.%s.id}' % rname,
        jumbo_frame_capable:: '${aws_dx_transit_virtual_interface.%s.jumbo_frame_capable}' % rname,
        timeouts:: {},
      },
      with_amazon_address(amazon_address):: {
        amazon_address::: amazon_address,
      },
      with_bgp_auth_key(bgp_auth_key):: {
        bgp_auth_key::: bgp_auth_key,
      },
      with_customer_address(customer_address):: {
        customer_address::: customer_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dynamodb_global_table - https://www.terraform.io/docs/providers/aws/r/dynamodb_global_table.html
    aws_dynamodb_global_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param replica (required)
      new(rname, name, replica):: {
        rname:: rname,
        name: name,
        arn:: '${aws_dynamodb_global_table.%s.arn}' % rname,
        id:: '${aws_dynamodb_global_table.%s.id}' % rname,
        replica: replica,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      replica:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param region_name (required)
        new(rname, region_name):: {
          rname:: rname,
          region_name: region_name,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_dynamodb_table - https://www.terraform.io/docs/providers/aws/r/dynamodb_table.html
    aws_dynamodb_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param hash_key (required)
      // @param name (required)
      // @param billing_mode (optional)
      // @param range_key (optional)
      // @param read_capacity (optional)
      // @param stream_enabled (optional)
      // @param tags (optional)
      // @param write_capacity (optional)
      // @param attribute (required)
      new(rname, hash_key, name, attribute, billing_mode=null, range_key=null, read_capacity=null, stream_enabled=null, tags=null, write_capacity=null):: {
        rname:: rname,
        hash_key: hash_key,
        name: name,
        [if billing_mode != null then 'billing_mode']: billing_mode,
        [if range_key != null then 'range_key']: range_key,
        [if read_capacity != null then 'read_capacity']: read_capacity,
        [if stream_enabled != null then 'stream_enabled']: stream_enabled,
        [if tags != null then 'tags']: tags,
        [if write_capacity != null then 'write_capacity']: write_capacity,
        arn:: '${aws_dynamodb_table.%s.arn}' % rname,
        id:: '${aws_dynamodb_table.%s.id}' % rname,
        stream_arn:: '${aws_dynamodb_table.%s.stream_arn}' % rname,
        stream_label:: '${aws_dynamodb_table.%s.stream_label}' % rname,
        stream_view_type:: '${aws_dynamodb_table.%s.stream_view_type}' % rname,
        attribute: attribute,
        global_secondary_index:: {},
        local_secondary_index:: {},
        point_in_time_recovery:: {},
        server_side_encryption:: {},
        timeouts:: {},
        ttl:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_stream_view_type(stream_view_type):: {
        stream_view_type::: stream_view_type,
      },
      attribute:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param type (required)
        new(rname, name, type):: {
          rname:: rname,
          name: name,
          type: type,
        },
      },
      with_global_secondary_index(global_secondary_index):: self + {
        global_secondary_index: global_secondary_index,
      },
      global_secondary_index:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param hash_key (required)
        // @param name (required)
        // @param projection_type (required)
        // @param non_key_attributes (optional)
        // @param range_key (optional)
        // @param read_capacity (optional)
        // @param write_capacity (optional)
        new(rname, hash_key, name, projection_type, non_key_attributes=null, range_key=null, read_capacity=null, write_capacity=null):: {
          rname:: rname,
          hash_key: hash_key,
          name: name,
          projection_type: projection_type,
          [if non_key_attributes != null then 'non_key_attributes']: non_key_attributes,
          [if range_key != null then 'range_key']: range_key,
          [if read_capacity != null then 'read_capacity']: read_capacity,
          [if write_capacity != null then 'write_capacity']: write_capacity,
        },
      },
      with_local_secondary_index(local_secondary_index):: self + {
        local_secondary_index: local_secondary_index,
      },
      local_secondary_index:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param projection_type (required)
        // @param range_key (required)
        // @param non_key_attributes (optional)
        new(rname, name, projection_type, range_key, non_key_attributes=null):: {
          rname:: rname,
          name: name,
          projection_type: projection_type,
          range_key: range_key,
          [if non_key_attributes != null then 'non_key_attributes']: non_key_attributes,
        },
      },
      with_point_in_time_recovery(point_in_time_recovery):: self + {
        point_in_time_recovery: point_in_time_recovery,
      },
      point_in_time_recovery:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        new(rname, enabled):: {
          rname:: rname,
          enabled: enabled,
        },
      },
      with_server_side_encryption(server_side_encryption):: self + {
        server_side_encryption: server_side_encryption,
      },
      server_side_encryption:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        new(rname, enabled):: {
          rname:: rname,
          enabled: enabled,
          kms_key_arn:: '${aws_dynamodb_table.%s.server_side_encryption.kms_key_arn}' % rname,
        },
        with_kms_key_arn(kms_key_arn):: {
          kms_key_arn::: kms_key_arn,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
      with_ttl(ttl):: self + {
        ttl: ttl,
      },
      ttl:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param attribute_name (required)
        // @param enabled (optional)
        new(rname, attribute_name, enabled=null):: {
          rname:: rname,
          attribute_name: attribute_name,
          [if enabled != null then 'enabled']: enabled,
        },
      },
    },
    // aws_dynamodb_table_item - https://www.terraform.io/docs/providers/aws/r/dynamodb_table_item.html
    aws_dynamodb_table_item:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param hash_key (required)
      // @param item (required)
      // @param table_name (required)
      // @param range_key (optional)
      new(rname, hash_key, item, table_name, range_key=null):: {
        rname:: rname,
        hash_key: hash_key,
        item: item,
        table_name: table_name,
        [if range_key != null then 'range_key']: range_key,
        id:: '${aws_dynamodb_table_item.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ebs_default_kms_key - https://www.terraform.io/docs/providers/aws/r/ebs_default_kms_key.html
    aws_ebs_default_kms_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param key_arn (required)
      new(rname, key_arn):: {
        rname:: rname,
        key_arn: key_arn,
        id:: '${aws_ebs_default_kms_key.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ebs_encryption_by_default - https://www.terraform.io/docs/providers/aws/r/ebs_encryption_by_default.html
    aws_ebs_encryption_by_default:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enabled (optional)
      new(rname, enabled=null):: {
        rname:: rname,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_ebs_encryption_by_default.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ebs_snapshot - https://www.terraform.io/docs/providers/aws/r/ebs_snapshot.html
    aws_ebs_snapshot:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param volume_id (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, volume_id, description=null, tags=null):: {
        rname:: rname,
        volume_id: volume_id,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        data_encryption_key_id:: '${aws_ebs_snapshot.%s.data_encryption_key_id}' % rname,
        encrypted:: '${aws_ebs_snapshot.%s.encrypted}' % rname,
        id:: '${aws_ebs_snapshot.%s.id}' % rname,
        kms_key_id:: '${aws_ebs_snapshot.%s.kms_key_id}' % rname,
        owner_alias:: '${aws_ebs_snapshot.%s.owner_alias}' % rname,
        owner_id:: '${aws_ebs_snapshot.%s.owner_id}' % rname,
        volume_size:: '${aws_ebs_snapshot.%s.volume_size}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_ebs_snapshot_copy - https://www.terraform.io/docs/providers/aws/r/ebs_snapshot_copy.html
    aws_ebs_snapshot_copy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param source_region (required)
      // @param source_snapshot_id (required)
      // @param description (optional)
      // @param encrypted (optional)
      // @param kms_key_id (optional)
      // @param tags (optional)
      new(rname, source_region, source_snapshot_id, description=null, encrypted=null, kms_key_id=null, tags=null):: {
        rname:: rname,
        source_region: source_region,
        source_snapshot_id: source_snapshot_id,
        [if description != null then 'description']: description,
        [if encrypted != null then 'encrypted']: encrypted,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if tags != null then 'tags']: tags,
        data_encryption_key_id:: '${aws_ebs_snapshot_copy.%s.data_encryption_key_id}' % rname,
        id:: '${aws_ebs_snapshot_copy.%s.id}' % rname,
        owner_alias:: '${aws_ebs_snapshot_copy.%s.owner_alias}' % rname,
        owner_id:: '${aws_ebs_snapshot_copy.%s.owner_id}' % rname,
        volume_id:: '${aws_ebs_snapshot_copy.%s.volume_id}' % rname,
        volume_size:: '${aws_ebs_snapshot_copy.%s.volume_size}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ebs_volume - https://www.terraform.io/docs/providers/aws/r/ebs_volume.html
    aws_ebs_volume:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param availability_zone (required)
      // @param tags (optional)
      new(rname, availability_zone, tags=null):: {
        rname:: rname,
        availability_zone: availability_zone,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_ebs_volume.%s.arn}' % rname,
        encrypted:: '${aws_ebs_volume.%s.encrypted}' % rname,
        id:: '${aws_ebs_volume.%s.id}' % rname,
        iops:: '${aws_ebs_volume.%s.iops}' % rname,
        kms_key_id:: '${aws_ebs_volume.%s.kms_key_id}' % rname,
        size:: '${aws_ebs_volume.%s.size}' % rname,
        snapshot_id:: '${aws_ebs_volume.%s.snapshot_id}' % rname,
        type:: '${aws_ebs_volume.%s.type}' % rname,
      },
      with_encrypted(encrypted):: {
        encrypted::: encrypted,
      },
      with_id(id):: {
        id::: id,
      },
      with_iops(iops):: {
        iops::: iops,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_size(size):: {
        size::: size,
      },
      with_snapshot_id(snapshot_id):: {
        snapshot_id::: snapshot_id,
      },
      with_type(type):: {
        type::: type,
      },
    },
    // aws_ec2_capacity_reservation - https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html
    aws_ec2_capacity_reservation:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param availability_zone (required)
      // @param instance_count (required)
      // @param instance_platform (required)
      // @param instance_type (required)
      // @param ebs_optimized (optional)
      // @param end_date (optional)
      // @param end_date_type (optional)
      // @param ephemeral_storage (optional)
      // @param instance_match_criteria (optional)
      // @param tags (optional)
      // @param tenancy (optional)
      new(rname, availability_zone, instance_count, instance_platform, instance_type, ebs_optimized=null, end_date=null, end_date_type=null, ephemeral_storage=null, instance_match_criteria=null, tags=null, tenancy=null):: {
        rname:: rname,
        availability_zone: availability_zone,
        instance_count: instance_count,
        instance_platform: instance_platform,
        instance_type: instance_type,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if end_date != null then 'end_date']: end_date,
        [if end_date_type != null then 'end_date_type']: end_date_type,
        [if ephemeral_storage != null then 'ephemeral_storage']: ephemeral_storage,
        [if instance_match_criteria != null then 'instance_match_criteria']: instance_match_criteria,
        [if tags != null then 'tags']: tags,
        [if tenancy != null then 'tenancy']: tenancy,
        id:: '${aws_ec2_capacity_reservation.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_client_vpn_endpoint - https://www.terraform.io/docs/providers/aws/r/ec2_client_vpn_endpoint.html
    aws_ec2_client_vpn_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param client_cidr_block (required)
      // @param server_certificate_arn (required)
      // @param description (optional)
      // @param dns_servers (optional)
      // @param split_tunnel (optional)
      // @param tags (optional)
      // @param transport_protocol (optional)
      // @param authentication_options (required)
      // @param connection_log_options (required)
      new(rname, client_cidr_block, server_certificate_arn, authentication_options, connection_log_options, description=null, dns_servers=null, split_tunnel=null, tags=null, transport_protocol=null):: {
        rname:: rname,
        client_cidr_block: client_cidr_block,
        server_certificate_arn: server_certificate_arn,
        [if description != null then 'description']: description,
        [if dns_servers != null then 'dns_servers']: dns_servers,
        [if split_tunnel != null then 'split_tunnel']: split_tunnel,
        [if tags != null then 'tags']: tags,
        [if transport_protocol != null then 'transport_protocol']: transport_protocol,
        dns_name:: '${aws_ec2_client_vpn_endpoint.%s.dns_name}' % rname,
        id:: '${aws_ec2_client_vpn_endpoint.%s.id}' % rname,
        status:: '${aws_ec2_client_vpn_endpoint.%s.status}' % rname,
        authentication_options: authentication_options,
        connection_log_options: connection_log_options,
      },
      with_id(id):: {
        id::: id,
      },
      authentication_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param active_directory_id (optional)
        // @param root_certificate_chain_arn (optional)
        new(rname, type, active_directory_id=null, root_certificate_chain_arn=null):: {
          rname:: rname,
          type: type,
          [if active_directory_id != null then 'active_directory_id']: active_directory_id,
          [if root_certificate_chain_arn != null then 'root_certificate_chain_arn']: root_certificate_chain_arn,
        },
      },
      connection_log_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        // @param cloudwatch_log_group (optional)
        // @param cloudwatch_log_stream (optional)
        new(rname, enabled, cloudwatch_log_group=null, cloudwatch_log_stream=null):: {
          rname:: rname,
          enabled: enabled,
          [if cloudwatch_log_group != null then 'cloudwatch_log_group']: cloudwatch_log_group,
          [if cloudwatch_log_stream != null then 'cloudwatch_log_stream']: cloudwatch_log_stream,
        },
      },
    },
    // aws_ec2_client_vpn_network_association - https://www.terraform.io/docs/providers/aws/r/ec2_client_vpn_network_association.html
    aws_ec2_client_vpn_network_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param client_vpn_endpoint_id (required)
      // @param subnet_id (required)
      new(rname, client_vpn_endpoint_id, subnet_id):: {
        rname:: rname,
        client_vpn_endpoint_id: client_vpn_endpoint_id,
        subnet_id: subnet_id,
        id:: '${aws_ec2_client_vpn_network_association.%s.id}' % rname,
        security_groups:: '${aws_ec2_client_vpn_network_association.%s.security_groups}' % rname,
        status:: '${aws_ec2_client_vpn_network_association.%s.status}' % rname,
        vpc_id:: '${aws_ec2_client_vpn_network_association.%s.vpc_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_fleet - https://www.terraform.io/docs/providers/aws/r/ec2_fleet.html
    aws_ec2_fleet:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param excess_capacity_termination_policy (optional)
      // @param replace_unhealthy_instances (optional)
      // @param tags (optional)
      // @param terminate_instances (optional)
      // @param terminate_instances_with_expiration (optional)
      // @param type (optional)
      // @param launch_template_config (required)
      // @param target_capacity_specification (required)
      new(rname, launch_template_config, target_capacity_specification, excess_capacity_termination_policy=null, replace_unhealthy_instances=null, tags=null, terminate_instances=null, terminate_instances_with_expiration=null, type=null):: {
        rname:: rname,
        [if excess_capacity_termination_policy != null then 'excess_capacity_termination_policy']: excess_capacity_termination_policy,
        [if replace_unhealthy_instances != null then 'replace_unhealthy_instances']: replace_unhealthy_instances,
        [if tags != null then 'tags']: tags,
        [if terminate_instances != null then 'terminate_instances']: terminate_instances,
        [if terminate_instances_with_expiration != null then 'terminate_instances_with_expiration']: terminate_instances_with_expiration,
        [if type != null then 'type']: type,
        id:: '${aws_ec2_fleet.%s.id}' % rname,
        launch_template_config: launch_template_config,
        on_demand_options:: {},
        spot_options:: {},
        target_capacity_specification: target_capacity_specification,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      launch_template_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param launch_template_specification (required)
        new(rname, launch_template_specification):: {
          rname:: rname,
          launch_template_specification: launch_template_specification,
          override:: {},
        },
        launch_template_specification:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param version (required)
          // @param launch_template_id (optional)
          // @param launch_template_name (optional)
          new(rname, version, launch_template_id=null, launch_template_name=null):: {
            rname:: rname,
            version: version,
            [if launch_template_id != null then 'launch_template_id']: launch_template_id,
            [if launch_template_name != null then 'launch_template_name']: launch_template_name,
          },
        },
        with_override(override):: self + {
          override: override,
        },
        override:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param availability_zone (optional)
          // @param instance_type (optional)
          // @param max_price (optional)
          // @param priority (optional)
          // @param subnet_id (optional)
          // @param weighted_capacity (optional)
          new(rname, availability_zone=null, instance_type=null, max_price=null, priority=null, subnet_id=null, weighted_capacity=null):: {
            rname:: rname,
            [if availability_zone != null then 'availability_zone']: availability_zone,
            [if instance_type != null then 'instance_type']: instance_type,
            [if max_price != null then 'max_price']: max_price,
            [if priority != null then 'priority']: priority,
            [if subnet_id != null then 'subnet_id']: subnet_id,
            [if weighted_capacity != null then 'weighted_capacity']: weighted_capacity,
          },
        },
      },
      with_on_demand_options(on_demand_options):: self + {
        on_demand_options: on_demand_options,
      },
      on_demand_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allocation_strategy (optional)
        new(rname, allocation_strategy=null):: {
          rname:: rname,
          [if allocation_strategy != null then 'allocation_strategy']: allocation_strategy,
        },
      },
      with_spot_options(spot_options):: self + {
        spot_options: spot_options,
      },
      spot_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allocation_strategy (optional)
        // @param instance_interruption_behavior (optional)
        // @param instance_pools_to_use_count (optional)
        new(rname, allocation_strategy=null, instance_interruption_behavior=null, instance_pools_to_use_count=null):: {
          rname:: rname,
          [if allocation_strategy != null then 'allocation_strategy']: allocation_strategy,
          [if instance_interruption_behavior != null then 'instance_interruption_behavior']: instance_interruption_behavior,
          [if instance_pools_to_use_count != null then 'instance_pools_to_use_count']: instance_pools_to_use_count,
        },
      },
      target_capacity_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param default_target_capacity_type (required)
        // @param total_target_capacity (required)
        // @param on_demand_target_capacity (optional)
        // @param spot_target_capacity (optional)
        new(rname, default_target_capacity_type, total_target_capacity, on_demand_target_capacity=null, spot_target_capacity=null):: {
          rname:: rname,
          default_target_capacity_type: default_target_capacity_type,
          total_target_capacity: total_target_capacity,
          [if on_demand_target_capacity != null then 'on_demand_target_capacity']: on_demand_target_capacity,
          [if spot_target_capacity != null then 'spot_target_capacity']: spot_target_capacity,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_ec2_traffic_mirror_filter - https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_filter.html
    aws_ec2_traffic_mirror_filter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param network_services (optional)
      new(rname, description=null, network_services=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if network_services != null then 'network_services']: network_services,
        id:: '${aws_ec2_traffic_mirror_filter.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_traffic_mirror_filter_rule - https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_filter_rule.html
    aws_ec2_traffic_mirror_filter_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination_cidr_block (required)
      // @param rule_action (required)
      // @param rule_number (required)
      // @param source_cidr_block (required)
      // @param traffic_direction (required)
      // @param traffic_mirror_filter_id (required)
      // @param description (optional)
      // @param protocol (optional)
      new(rname, destination_cidr_block, rule_action, rule_number, source_cidr_block, traffic_direction, traffic_mirror_filter_id, description=null, protocol=null):: {
        rname:: rname,
        destination_cidr_block: destination_cidr_block,
        rule_action: rule_action,
        rule_number: rule_number,
        source_cidr_block: source_cidr_block,
        traffic_direction: traffic_direction,
        traffic_mirror_filter_id: traffic_mirror_filter_id,
        [if description != null then 'description']: description,
        [if protocol != null then 'protocol']: protocol,
        id:: '${aws_ec2_traffic_mirror_filter_rule.%s.id}' % rname,
        destination_port_range:: {},
        source_port_range:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_destination_port_range(destination_port_range):: self + {
        destination_port_range: destination_port_range,
      },
      destination_port_range:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param from_port (optional)
        // @param to_port (optional)
        new(rname, from_port=null, to_port=null):: {
          rname:: rname,
          [if from_port != null then 'from_port']: from_port,
          [if to_port != null then 'to_port']: to_port,
        },
      },
      with_source_port_range(source_port_range):: self + {
        source_port_range: source_port_range,
      },
      source_port_range:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param from_port (optional)
        // @param to_port (optional)
        new(rname, from_port=null, to_port=null):: {
          rname:: rname,
          [if from_port != null then 'from_port']: from_port,
          [if to_port != null then 'to_port']: to_port,
        },
      },
    },
    // aws_ec2_traffic_mirror_session - https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_session.html
    aws_ec2_traffic_mirror_session:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param network_interface_id (required)
      // @param session_number (required)
      // @param traffic_mirror_filter_id (required)
      // @param traffic_mirror_target_id (required)
      // @param description (optional)
      // @param packet_length (optional)
      new(rname, network_interface_id, session_number, traffic_mirror_filter_id, traffic_mirror_target_id, description=null, packet_length=null):: {
        rname:: rname,
        network_interface_id: network_interface_id,
        session_number: session_number,
        traffic_mirror_filter_id: traffic_mirror_filter_id,
        traffic_mirror_target_id: traffic_mirror_target_id,
        [if description != null then 'description']: description,
        [if packet_length != null then 'packet_length']: packet_length,
        id:: '${aws_ec2_traffic_mirror_session.%s.id}' % rname,
        virtual_network_id:: '${aws_ec2_traffic_mirror_session.%s.virtual_network_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_virtual_network_id(virtual_network_id):: {
        virtual_network_id::: virtual_network_id,
      },
    },
    // aws_ec2_traffic_mirror_target - https://www.terraform.io/docs/providers/aws/r/ec2_traffic_mirror_target.html
    aws_ec2_traffic_mirror_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param network_interface_id (optional)
      // @param network_load_balancer_arn (optional)
      new(rname, description=null, network_interface_id=null, network_load_balancer_arn=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if network_interface_id != null then 'network_interface_id']: network_interface_id,
        [if network_load_balancer_arn != null then 'network_load_balancer_arn']: network_load_balancer_arn,
        id:: '${aws_ec2_traffic_mirror_target.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway.html
    aws_ec2_transit_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param amazon_side_asn (optional)
      // @param auto_accept_shared_attachments (optional)
      // @param default_route_table_association (optional)
      // @param default_route_table_propagation (optional)
      // @param description (optional)
      // @param dns_support (optional)
      // @param tags (optional)
      // @param vpn_ecmp_support (optional)
      new(rname, amazon_side_asn=null, auto_accept_shared_attachments=null, default_route_table_association=null, default_route_table_propagation=null, description=null, dns_support=null, tags=null, vpn_ecmp_support=null):: {
        rname:: rname,
        [if amazon_side_asn != null then 'amazon_side_asn']: amazon_side_asn,
        [if auto_accept_shared_attachments != null then 'auto_accept_shared_attachments']: auto_accept_shared_attachments,
        [if default_route_table_association != null then 'default_route_table_association']: default_route_table_association,
        [if default_route_table_propagation != null then 'default_route_table_propagation']: default_route_table_propagation,
        [if description != null then 'description']: description,
        [if dns_support != null then 'dns_support']: dns_support,
        [if tags != null then 'tags']: tags,
        [if vpn_ecmp_support != null then 'vpn_ecmp_support']: vpn_ecmp_support,
        arn:: '${aws_ec2_transit_gateway.%s.arn}' % rname,
        association_default_route_table_id:: '${aws_ec2_transit_gateway.%s.association_default_route_table_id}' % rname,
        id:: '${aws_ec2_transit_gateway.%s.id}' % rname,
        owner_id:: '${aws_ec2_transit_gateway.%s.owner_id}' % rname,
        propagation_default_route_table_id:: '${aws_ec2_transit_gateway.%s.propagation_default_route_table_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_route - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_route.html
    aws_ec2_transit_gateway_route:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination_cidr_block (required)
      // @param transit_gateway_route_table_id (required)
      // @param blackhole (optional)
      // @param transit_gateway_attachment_id (optional)
      new(rname, destination_cidr_block, transit_gateway_route_table_id, blackhole=null, transit_gateway_attachment_id=null):: {
        rname:: rname,
        destination_cidr_block: destination_cidr_block,
        transit_gateway_route_table_id: transit_gateway_route_table_id,
        [if blackhole != null then 'blackhole']: blackhole,
        [if transit_gateway_attachment_id != null then 'transit_gateway_attachment_id']: transit_gateway_attachment_id,
        id:: '${aws_ec2_transit_gateway_route.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_route_table - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_route_table.html
    aws_ec2_transit_gateway_route_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param transit_gateway_id (required)
      // @param tags (optional)
      new(rname, transit_gateway_id, tags=null):: {
        rname:: rname,
        transit_gateway_id: transit_gateway_id,
        [if tags != null then 'tags']: tags,
        default_association_route_table:: '${aws_ec2_transit_gateway_route_table.%s.default_association_route_table}' % rname,
        default_propagation_route_table:: '${aws_ec2_transit_gateway_route_table.%s.default_propagation_route_table}' % rname,
        id:: '${aws_ec2_transit_gateway_route_table.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_route_table_association - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_route_table_association.html
    aws_ec2_transit_gateway_route_table_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param transit_gateway_attachment_id (required)
      // @param transit_gateway_route_table_id (required)
      new(rname, transit_gateway_attachment_id, transit_gateway_route_table_id):: {
        rname:: rname,
        transit_gateway_attachment_id: transit_gateway_attachment_id,
        transit_gateway_route_table_id: transit_gateway_route_table_id,
        id:: '${aws_ec2_transit_gateway_route_table_association.%s.id}' % rname,
        resource_id:: '${aws_ec2_transit_gateway_route_table_association.%s.resource_id}' % rname,
        resource_type:: '${aws_ec2_transit_gateway_route_table_association.%s.resource_type}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_route_table_propagation - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_route_table_propagation.html
    aws_ec2_transit_gateway_route_table_propagation:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param transit_gateway_attachment_id (required)
      // @param transit_gateway_route_table_id (required)
      new(rname, transit_gateway_attachment_id, transit_gateway_route_table_id):: {
        rname:: rname,
        transit_gateway_attachment_id: transit_gateway_attachment_id,
        transit_gateway_route_table_id: transit_gateway_route_table_id,
        id:: '${aws_ec2_transit_gateway_route_table_propagation.%s.id}' % rname,
        resource_id:: '${aws_ec2_transit_gateway_route_table_propagation.%s.resource_id}' % rname,
        resource_type:: '${aws_ec2_transit_gateway_route_table_propagation.%s.resource_type}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_vpc_attachment - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_vpc_attachment.html
    aws_ec2_transit_gateway_vpc_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_ids (required)
      // @param transit_gateway_id (required)
      // @param vpc_id (required)
      // @param dns_support (optional)
      // @param ipv6_support (optional)
      // @param tags (optional)
      // @param transit_gateway_default_route_table_association (optional)
      // @param transit_gateway_default_route_table_propagation (optional)
      new(rname, subnet_ids, transit_gateway_id, vpc_id, dns_support=null, ipv6_support=null, tags=null, transit_gateway_default_route_table_association=null, transit_gateway_default_route_table_propagation=null):: {
        rname:: rname,
        subnet_ids: subnet_ids,
        transit_gateway_id: transit_gateway_id,
        vpc_id: vpc_id,
        [if dns_support != null then 'dns_support']: dns_support,
        [if ipv6_support != null then 'ipv6_support']: ipv6_support,
        [if tags != null then 'tags']: tags,
        [if transit_gateway_default_route_table_association != null then 'transit_gateway_default_route_table_association']: transit_gateway_default_route_table_association,
        [if transit_gateway_default_route_table_propagation != null then 'transit_gateway_default_route_table_propagation']: transit_gateway_default_route_table_propagation,
        id:: '${aws_ec2_transit_gateway_vpc_attachment.%s.id}' % rname,
        vpc_owner_id:: '${aws_ec2_transit_gateway_vpc_attachment.%s.vpc_owner_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ec2_transit_gateway_vpc_attachment_accepter - https://www.terraform.io/docs/providers/aws/r/ec2_transit_gateway_vpc_attachment_accepter.html
    aws_ec2_transit_gateway_vpc_attachment_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param transit_gateway_attachment_id (required)
      // @param tags (optional)
      // @param transit_gateway_default_route_table_association (optional)
      // @param transit_gateway_default_route_table_propagation (optional)
      new(rname, transit_gateway_attachment_id, tags=null, transit_gateway_default_route_table_association=null, transit_gateway_default_route_table_propagation=null):: {
        rname:: rname,
        transit_gateway_attachment_id: transit_gateway_attachment_id,
        [if tags != null then 'tags']: tags,
        [if transit_gateway_default_route_table_association != null then 'transit_gateway_default_route_table_association']: transit_gateway_default_route_table_association,
        [if transit_gateway_default_route_table_propagation != null then 'transit_gateway_default_route_table_propagation']: transit_gateway_default_route_table_propagation,
        dns_support:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.dns_support}' % rname,
        id:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.id}' % rname,
        ipv6_support:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.ipv6_support}' % rname,
        subnet_ids:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.subnet_ids}' % rname,
        transit_gateway_id:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.transit_gateway_id}' % rname,
        vpc_id:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.vpc_id}' % rname,
        vpc_owner_id:: '${aws_ec2_transit_gateway_vpc_attachment_accepter.%s.vpc_owner_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ecr_lifecycle_policy - https://www.terraform.io/docs/providers/aws/r/ecr_lifecycle_policy.html
    aws_ecr_lifecycle_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param repository (required)
      new(rname, policy, repository):: {
        rname:: rname,
        policy: policy,
        repository: repository,
        id:: '${aws_ecr_lifecycle_policy.%s.id}' % rname,
        registry_id:: '${aws_ecr_lifecycle_policy.%s.registry_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ecr_repository - https://www.terraform.io/docs/providers/aws/r/ecr_repository.html
    aws_ecr_repository:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param image_tag_mutability (optional)
      // @param tags (optional)
      new(rname, name, image_tag_mutability=null, tags=null):: {
        rname:: rname,
        name: name,
        [if image_tag_mutability != null then 'image_tag_mutability']: image_tag_mutability,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_ecr_repository.%s.arn}' % rname,
        id:: '${aws_ecr_repository.%s.id}' % rname,
        registry_id:: '${aws_ecr_repository.%s.registry_id}' % rname,
        repository_url:: '${aws_ecr_repository.%s.repository_url}' % rname,
        image_scanning_configuration:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_image_scanning_configuration(image_scanning_configuration):: self + {
        image_scanning_configuration: image_scanning_configuration,
      },
      image_scanning_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param scan_on_push (required)
        new(rname, scan_on_push):: {
          rname:: rname,
          scan_on_push: scan_on_push,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete (optional)
        new(rname, delete=null):: {
          rname:: rname,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_ecr_repository_policy - https://www.terraform.io/docs/providers/aws/r/ecr_repository_policy.html
    aws_ecr_repository_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param repository (required)
      new(rname, policy, repository):: {
        rname:: rname,
        policy: policy,
        repository: repository,
        id:: '${aws_ecr_repository_policy.%s.id}' % rname,
        registry_id:: '${aws_ecr_repository_policy.%s.registry_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ecs_capacity_provider - https://www.terraform.io/docs/providers/aws/r/ecs_capacity_provider.html
    aws_ecs_capacity_provider:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      // @param auto_scaling_group_provider (required)
      new(rname, name, auto_scaling_group_provider, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_ecs_capacity_provider.%s.arn}' % rname,
        id:: '${aws_ecs_capacity_provider.%s.id}' % rname,
        auto_scaling_group_provider: auto_scaling_group_provider,
      },
      with_id(id):: {
        id::: id,
      },
      auto_scaling_group_provider:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param auto_scaling_group_arn (required)
        new(rname, auto_scaling_group_arn):: {
          rname:: rname,
          auto_scaling_group_arn: auto_scaling_group_arn,
          managed_termination_protection:: '${aws_ecs_capacity_provider.%s.auto_scaling_group_provider.managed_termination_protection}' % rname,
          managed_scaling:: {},
        },
        with_managed_termination_protection(managed_termination_protection):: {
          managed_termination_protection::: managed_termination_protection,
        },
        with_managed_scaling(managed_scaling):: self + {
          managed_scaling: managed_scaling,
        },
        managed_scaling:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            maximum_scaling_step_size:: '${aws_ecs_capacity_provider.%s.auto_scaling_group_provider.managed_scaling.maximum_scaling_step_size}' % rname,
            minimum_scaling_step_size:: '${aws_ecs_capacity_provider.%s.auto_scaling_group_provider.managed_scaling.minimum_scaling_step_size}' % rname,
            status:: '${aws_ecs_capacity_provider.%s.auto_scaling_group_provider.managed_scaling.status}' % rname,
            target_capacity:: '${aws_ecs_capacity_provider.%s.auto_scaling_group_provider.managed_scaling.target_capacity}' % rname,
          },
          with_maximum_scaling_step_size(maximum_scaling_step_size):: {
            maximum_scaling_step_size::: maximum_scaling_step_size,
          },
          with_minimum_scaling_step_size(minimum_scaling_step_size):: {
            minimum_scaling_step_size::: minimum_scaling_step_size,
          },
          with_status(status):: {
            status::: status,
          },
          with_target_capacity(target_capacity):: {
            target_capacity::: target_capacity,
          },
        },
      },
    },
    // aws_ecs_cluster - https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html
    aws_ecs_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param capacity_providers (optional)
      // @param tags (optional)
      new(rname, name, capacity_providers=null, tags=null):: {
        rname:: rname,
        name: name,
        [if capacity_providers != null then 'capacity_providers']: capacity_providers,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_ecs_cluster.%s.arn}' % rname,
        id:: '${aws_ecs_cluster.%s.id}' % rname,
        default_capacity_provider_strategy:: {},
        setting:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_default_capacity_provider_strategy(default_capacity_provider_strategy):: self + {
        default_capacity_provider_strategy: default_capacity_provider_strategy,
      },
      default_capacity_provider_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param capacity_provider (required)
        // @param base (optional)
        // @param weight (optional)
        new(rname, capacity_provider, base=null, weight=null):: {
          rname:: rname,
          capacity_provider: capacity_provider,
          [if base != null then 'base']: base,
          [if weight != null then 'weight']: weight,
        },
      },
      with_setting(setting):: self + {
        setting: setting,
      },
      setting:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        new(rname, name, value):: {
          rname:: rname,
          name: name,
          value: value,
        },
      },
    },
    // aws_ecs_service - https://www.terraform.io/docs/providers/aws/r/ecs_service.html
    aws_ecs_service:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param task_definition (required)
      // @param deployment_maximum_percent (optional)
      // @param deployment_minimum_healthy_percent (optional)
      // @param desired_count (optional)
      // @param enable_ecs_managed_tags (optional)
      // @param health_check_grace_period_seconds (optional)
      // @param propagate_tags (optional)
      // @param scheduling_strategy (optional)
      // @param tags (optional)
      new(rname, name, task_definition, deployment_maximum_percent=null, deployment_minimum_healthy_percent=null, desired_count=null, enable_ecs_managed_tags=null, health_check_grace_period_seconds=null, propagate_tags=null, scheduling_strategy=null, tags=null):: {
        rname:: rname,
        name: name,
        task_definition: task_definition,
        [if deployment_maximum_percent != null then 'deployment_maximum_percent']: deployment_maximum_percent,
        [if deployment_minimum_healthy_percent != null then 'deployment_minimum_healthy_percent']: deployment_minimum_healthy_percent,
        [if desired_count != null then 'desired_count']: desired_count,
        [if enable_ecs_managed_tags != null then 'enable_ecs_managed_tags']: enable_ecs_managed_tags,
        [if health_check_grace_period_seconds != null then 'health_check_grace_period_seconds']: health_check_grace_period_seconds,
        [if propagate_tags != null then 'propagate_tags']: propagate_tags,
        [if scheduling_strategy != null then 'scheduling_strategy']: scheduling_strategy,
        [if tags != null then 'tags']: tags,
        cluster:: '${aws_ecs_service.%s.cluster}' % rname,
        iam_role:: '${aws_ecs_service.%s.iam_role}' % rname,
        id:: '${aws_ecs_service.%s.id}' % rname,
        launch_type:: '${aws_ecs_service.%s.launch_type}' % rname,
        platform_version:: '${aws_ecs_service.%s.platform_version}' % rname,
        capacity_provider_strategy:: {},
        deployment_controller:: {},
        load_balancer:: {},
        network_configuration:: {},
        ordered_placement_strategy:: {},
        placement_constraints:: {},
        placement_strategy:: {},
        service_registries:: {},
      },
      with_cluster(cluster):: {
        cluster::: cluster,
      },
      with_iam_role(iam_role):: {
        iam_role::: iam_role,
      },
      with_id(id):: {
        id::: id,
      },
      with_launch_type(launch_type):: {
        launch_type::: launch_type,
      },
      with_platform_version(platform_version):: {
        platform_version::: platform_version,
      },
      with_capacity_provider_strategy(capacity_provider_strategy):: self + {
        capacity_provider_strategy: capacity_provider_strategy,
      },
      capacity_provider_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param capacity_provider (required)
        // @param base (optional)
        // @param weight (optional)
        new(rname, capacity_provider, base=null, weight=null):: {
          rname:: rname,
          capacity_provider: capacity_provider,
          [if base != null then 'base']: base,
          [if weight != null then 'weight']: weight,
        },
      },
      with_deployment_controller(deployment_controller):: self + {
        deployment_controller: deployment_controller,
      },
      deployment_controller:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (optional)
        new(rname, type=null):: {
          rname:: rname,
          [if type != null then 'type']: type,
        },
      },
      with_load_balancer(load_balancer):: self + {
        load_balancer: load_balancer,
      },
      load_balancer:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param container_name (required)
        // @param container_port (required)
        // @param elb_name (optional)
        // @param target_group_arn (optional)
        new(rname, container_name, container_port, elb_name=null, target_group_arn=null):: {
          rname:: rname,
          container_name: container_name,
          container_port: container_port,
          [if elb_name != null then 'elb_name']: elb_name,
          [if target_group_arn != null then 'target_group_arn']: target_group_arn,
        },
      },
      with_network_configuration(network_configuration):: self + {
        network_configuration: network_configuration,
      },
      network_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnets (required)
        // @param assign_public_ip (optional)
        // @param security_groups (optional)
        new(rname, subnets, assign_public_ip=null, security_groups=null):: {
          rname:: rname,
          subnets: subnets,
          [if assign_public_ip != null then 'assign_public_ip']: assign_public_ip,
          [if security_groups != null then 'security_groups']: security_groups,
        },
      },
      with_ordered_placement_strategy(ordered_placement_strategy):: self + {
        ordered_placement_strategy: ordered_placement_strategy,
      },
      ordered_placement_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param field (optional)
        new(rname, type, field=null):: {
          rname:: rname,
          type: type,
          [if field != null then 'field']: field,
        },
      },
      with_placement_constraints(placement_constraints):: self + {
        placement_constraints: placement_constraints,
      },
      placement_constraints:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param expression (optional)
        new(rname, type, expression=null):: {
          rname:: rname,
          type: type,
          [if expression != null then 'expression']: expression,
        },
      },
      with_placement_strategy(placement_strategy):: self + {
        placement_strategy: placement_strategy,
      },
      placement_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param field (optional)
        new(rname, type, field=null):: {
          rname:: rname,
          type: type,
          [if field != null then 'field']: field,
        },
      },
      with_service_registries(service_registries):: self + {
        service_registries: service_registries,
      },
      service_registries:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param registry_arn (required)
        // @param container_name (optional)
        // @param container_port (optional)
        // @param port (optional)
        new(rname, registry_arn, container_name=null, container_port=null, port=null):: {
          rname:: rname,
          registry_arn: registry_arn,
          [if container_name != null then 'container_name']: container_name,
          [if container_port != null then 'container_port']: container_port,
          [if port != null then 'port']: port,
        },
      },
    },
    // aws_ecs_task_definition - https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html
    aws_ecs_task_definition:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param container_definitions (required)
      // @param family (required)
      // @param cpu (optional)
      // @param execution_role_arn (optional)
      // @param ipc_mode (optional)
      // @param memory (optional)
      // @param pid_mode (optional)
      // @param requires_compatibilities (optional)
      // @param tags (optional)
      // @param task_role_arn (optional)
      new(rname, container_definitions, family, cpu=null, execution_role_arn=null, ipc_mode=null, memory=null, pid_mode=null, requires_compatibilities=null, tags=null, task_role_arn=null):: {
        rname:: rname,
        container_definitions: container_definitions,
        family: family,
        [if cpu != null then 'cpu']: cpu,
        [if execution_role_arn != null then 'execution_role_arn']: execution_role_arn,
        [if ipc_mode != null then 'ipc_mode']: ipc_mode,
        [if memory != null then 'memory']: memory,
        [if pid_mode != null then 'pid_mode']: pid_mode,
        [if requires_compatibilities != null then 'requires_compatibilities']: requires_compatibilities,
        [if tags != null then 'tags']: tags,
        [if task_role_arn != null then 'task_role_arn']: task_role_arn,
        arn:: '${aws_ecs_task_definition.%s.arn}' % rname,
        id:: '${aws_ecs_task_definition.%s.id}' % rname,
        network_mode:: '${aws_ecs_task_definition.%s.network_mode}' % rname,
        revision:: '${aws_ecs_task_definition.%s.revision}' % rname,
        placement_constraints:: {},
        proxy_configuration:: {},
        volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_network_mode(network_mode):: {
        network_mode::: network_mode,
      },
      with_placement_constraints(placement_constraints):: self + {
        placement_constraints: placement_constraints,
      },
      placement_constraints:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param expression (optional)
        new(rname, type, expression=null):: {
          rname:: rname,
          type: type,
          [if expression != null then 'expression']: expression,
        },
      },
      with_proxy_configuration(proxy_configuration):: self + {
        proxy_configuration: proxy_configuration,
      },
      proxy_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param container_name (required)
        // @param properties (optional)
        // @param type (optional)
        new(rname, container_name, properties=null, type=null):: {
          rname:: rname,
          container_name: container_name,
          [if properties != null then 'properties']: properties,
          [if type != null then 'type']: type,
        },
      },
      with_volume(volume):: self + {
        volume: volume,
      },
      volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param host_path (optional)
        new(rname, name, host_path=null):: {
          rname:: rname,
          name: name,
          [if host_path != null then 'host_path']: host_path,
          docker_volume_configuration:: {},
          efs_volume_configuration:: {},
        },
        with_docker_volume_configuration(docker_volume_configuration):: self + {
          docker_volume_configuration: docker_volume_configuration,
        },
        docker_volume_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param autoprovision (optional)
          // @param driver (optional)
          // @param driver_opts (optional)
          // @param labels (optional)
          new(rname, autoprovision=null, driver=null, driver_opts=null, labels=null):: {
            rname:: rname,
            [if autoprovision != null then 'autoprovision']: autoprovision,
            [if driver != null then 'driver']: driver,
            [if driver_opts != null then 'driver_opts']: driver_opts,
            [if labels != null then 'labels']: labels,
            scope:: '${aws_ecs_task_definition.%s.volume.docker_volume_configuration.scope}' % rname,
          },
          with_scope(scope):: {
            scope::: scope,
          },
        },
        with_efs_volume_configuration(efs_volume_configuration):: self + {
          efs_volume_configuration: efs_volume_configuration,
        },
        efs_volume_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param file_system_id (required)
          // @param root_directory (optional)
          new(rname, file_system_id, root_directory=null):: {
            rname:: rname,
            file_system_id: file_system_id,
            [if root_directory != null then 'root_directory']: root_directory,
          },
        },
      },
    },
    // aws_efs_file_system - https://www.terraform.io/docs/providers/aws/r/efs_file_system.html
    aws_efs_file_system:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param provisioned_throughput_in_mibps (optional)
      // @param tags (optional)
      // @param throughput_mode (optional)
      new(rname, provisioned_throughput_in_mibps=null, tags=null, throughput_mode=null):: {
        rname:: rname,
        [if provisioned_throughput_in_mibps != null then 'provisioned_throughput_in_mibps']: provisioned_throughput_in_mibps,
        [if tags != null then 'tags']: tags,
        [if throughput_mode != null then 'throughput_mode']: throughput_mode,
        arn:: '${aws_efs_file_system.%s.arn}' % rname,
        creation_token:: '${aws_efs_file_system.%s.creation_token}' % rname,
        dns_name:: '${aws_efs_file_system.%s.dns_name}' % rname,
        encrypted:: '${aws_efs_file_system.%s.encrypted}' % rname,
        id:: '${aws_efs_file_system.%s.id}' % rname,
        kms_key_id:: '${aws_efs_file_system.%s.kms_key_id}' % rname,
        performance_mode:: '${aws_efs_file_system.%s.performance_mode}' % rname,
        reference_name:: '${aws_efs_file_system.%s.reference_name}' % rname,
        lifecycle_policy:: {},
      },
      with_creation_token(creation_token):: {
        creation_token::: creation_token,
      },
      with_encrypted(encrypted):: {
        encrypted::: encrypted,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_performance_mode(performance_mode):: {
        performance_mode::: performance_mode,
      },
      with_reference_name(reference_name):: {
        reference_name::: reference_name,
      },
      with_lifecycle_policy(lifecycle_policy):: self + {
        lifecycle_policy: lifecycle_policy,
      },
      lifecycle_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param transition_to_ia (optional)
        new(rname, transition_to_ia=null):: {
          rname:: rname,
          [if transition_to_ia != null then 'transition_to_ia']: transition_to_ia,
        },
      },
    },
    // aws_efs_mount_target - https://www.terraform.io/docs/providers/aws/r/efs_mount_target.html
    aws_efs_mount_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param file_system_id (required)
      // @param subnet_id (required)
      new(rname, file_system_id, subnet_id):: {
        rname:: rname,
        file_system_id: file_system_id,
        subnet_id: subnet_id,
        dns_name:: '${aws_efs_mount_target.%s.dns_name}' % rname,
        file_system_arn:: '${aws_efs_mount_target.%s.file_system_arn}' % rname,
        id:: '${aws_efs_mount_target.%s.id}' % rname,
        ip_address:: '${aws_efs_mount_target.%s.ip_address}' % rname,
        network_interface_id:: '${aws_efs_mount_target.%s.network_interface_id}' % rname,
        security_groups:: '${aws_efs_mount_target.%s.security_groups}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_ip_address(ip_address):: {
        ip_address::: ip_address,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
    },
    // aws_egress_only_internet_gateway - https://www.terraform.io/docs/providers/aws/r/egress_only_internet_gateway.html
    aws_egress_only_internet_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_id (required)
      new(rname, vpc_id):: {
        rname:: rname,
        vpc_id: vpc_id,
        id:: '${aws_egress_only_internet_gateway.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_eip - https://www.terraform.io/docs/providers/aws/r/eip.html
    aws_eip:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param associate_with_private_ip (optional)
      // @param tags (optional)
      new(rname, associate_with_private_ip=null, tags=null):: {
        rname:: rname,
        [if associate_with_private_ip != null then 'associate_with_private_ip']: associate_with_private_ip,
        [if tags != null then 'tags']: tags,
        allocation_id:: '${aws_eip.%s.allocation_id}' % rname,
        association_id:: '${aws_eip.%s.association_id}' % rname,
        domain:: '${aws_eip.%s.domain}' % rname,
        id:: '${aws_eip.%s.id}' % rname,
        instance:: '${aws_eip.%s.instance}' % rname,
        network_interface:: '${aws_eip.%s.network_interface}' % rname,
        private_dns:: '${aws_eip.%s.private_dns}' % rname,
        private_ip:: '${aws_eip.%s.private_ip}' % rname,
        public_dns:: '${aws_eip.%s.public_dns}' % rname,
        public_ip:: '${aws_eip.%s.public_ip}' % rname,
        public_ipv4_pool:: '${aws_eip.%s.public_ipv4_pool}' % rname,
        vpc:: '${aws_eip.%s.vpc}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_instance(instance):: {
        instance::: instance,
      },
      with_network_interface(network_interface):: {
        network_interface::: network_interface,
      },
      with_public_ipv4_pool(public_ipv4_pool):: {
        public_ipv4_pool::: public_ipv4_pool,
      },
      with_vpc(vpc):: {
        vpc::: vpc,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete (optional)
        // @param read (optional)
        // @param update (optional)
        new(rname, delete=null, read=null, update=null):: {
          rname:: rname,
          [if delete != null then 'delete']: delete,
          [if read != null then 'read']: read,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_eip_association - https://www.terraform.io/docs/providers/aws/r/eip_association.html
    aws_eip_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param allow_reassociation (optional)
      new(rname, allow_reassociation=null):: {
        rname:: rname,
        [if allow_reassociation != null then 'allow_reassociation']: allow_reassociation,
        allocation_id:: '${aws_eip_association.%s.allocation_id}' % rname,
        id:: '${aws_eip_association.%s.id}' % rname,
        instance_id:: '${aws_eip_association.%s.instance_id}' % rname,
        network_interface_id:: '${aws_eip_association.%s.network_interface_id}' % rname,
        private_ip_address:: '${aws_eip_association.%s.private_ip_address}' % rname,
        public_ip:: '${aws_eip_association.%s.public_ip}' % rname,
      },
      with_allocation_id(allocation_id):: {
        allocation_id::: allocation_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_instance_id(instance_id):: {
        instance_id::: instance_id,
      },
      with_network_interface_id(network_interface_id):: {
        network_interface_id::: network_interface_id,
      },
      with_private_ip_address(private_ip_address):: {
        private_ip_address::: private_ip_address,
      },
      with_public_ip(public_ip):: {
        public_ip::: public_ip,
      },
    },
    // aws_eks_cluster - https://www.terraform.io/docs/providers/aws/r/eks_cluster.html
    aws_eks_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param role_arn (required)
      // @param enabled_cluster_log_types (optional)
      // @param tags (optional)
      // @param vpc_config (required)
      new(rname, name, role_arn, vpc_config, enabled_cluster_log_types=null, tags=null):: {
        rname:: rname,
        name: name,
        role_arn: role_arn,
        [if enabled_cluster_log_types != null then 'enabled_cluster_log_types']: enabled_cluster_log_types,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_eks_cluster.%s.arn}' % rname,
        certificate_authority:: '${aws_eks_cluster.%s.certificate_authority}' % rname,
        created_at:: '${aws_eks_cluster.%s.created_at}' % rname,
        endpoint:: '${aws_eks_cluster.%s.endpoint}' % rname,
        id:: '${aws_eks_cluster.%s.id}' % rname,
        identity:: '${aws_eks_cluster.%s.identity}' % rname,
        platform_version:: '${aws_eks_cluster.%s.platform_version}' % rname,
        status:: '${aws_eks_cluster.%s.status}' % rname,
        version:: '${aws_eks_cluster.%s.version}' % rname,
        encryption_config:: {},
        timeouts:: {},
        vpc_config: vpc_config,
      },
      with_id(id):: {
        id::: id,
      },
      with_version(version):: {
        version::: version,
      },
      with_encryption_config(encryption_config):: self + {
        encryption_config: encryption_config,
      },
      encryption_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param resources (required)
        // @param provider (required)
        new(rname, resources, provider):: {
          rname:: rname,
          resources: resources,
          provider: provider,
        },
        provider:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param key_arn (required)
          new(rname, key_arn):: {
            rname:: rname,
            key_arn: key_arn,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
      vpc_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnet_ids (required)
        // @param endpoint_private_access (optional)
        // @param endpoint_public_access (optional)
        // @param security_group_ids (optional)
        new(rname, subnet_ids, endpoint_private_access=null, endpoint_public_access=null, security_group_ids=null):: {
          rname:: rname,
          subnet_ids: subnet_ids,
          [if endpoint_private_access != null then 'endpoint_private_access']: endpoint_private_access,
          [if endpoint_public_access != null then 'endpoint_public_access']: endpoint_public_access,
          [if security_group_ids != null then 'security_group_ids']: security_group_ids,
          cluster_security_group_id:: '${aws_eks_cluster.%s.vpc_config.cluster_security_group_id}' % rname,
          public_access_cidrs:: '${aws_eks_cluster.%s.vpc_config.public_access_cidrs}' % rname,
          vpc_id:: '${aws_eks_cluster.%s.vpc_config.vpc_id}' % rname,
        },
        with_public_access_cidrs(public_access_cidrs):: {
          public_access_cidrs::: public_access_cidrs,
        },
      },
    },
    // aws_eks_fargate_profile - https://www.terraform.io/docs/providers/aws/r/eks_fargate_profile.html
    aws_eks_fargate_profile:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_name (required)
      // @param fargate_profile_name (required)
      // @param pod_execution_role_arn (required)
      // @param subnet_ids (optional)
      // @param tags (optional)
      // @param selector (required)
      new(rname, cluster_name, fargate_profile_name, pod_execution_role_arn, selector, subnet_ids=null, tags=null):: {
        rname:: rname,
        cluster_name: cluster_name,
        fargate_profile_name: fargate_profile_name,
        pod_execution_role_arn: pod_execution_role_arn,
        [if subnet_ids != null then 'subnet_ids']: subnet_ids,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_eks_fargate_profile.%s.arn}' % rname,
        id:: '${aws_eks_fargate_profile.%s.id}' % rname,
        status:: '${aws_eks_fargate_profile.%s.status}' % rname,
        selector: selector,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      selector:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param namespace (required)
        // @param labels (optional)
        new(rname, namespace, labels=null):: {
          rname:: rname,
          namespace: namespace,
          [if labels != null then 'labels']: labels,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_eks_node_group - https://www.terraform.io/docs/providers/aws/r/eks_node_group.html
    aws_eks_node_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_name (required)
      // @param node_group_name (required)
      // @param node_role_arn (required)
      // @param subnet_ids (required)
      // @param labels (optional)
      // @param tags (optional)
      // @param scaling_config (required)
      new(rname, cluster_name, node_group_name, node_role_arn, subnet_ids, scaling_config, labels=null, tags=null):: {
        rname:: rname,
        cluster_name: cluster_name,
        node_group_name: node_group_name,
        node_role_arn: node_role_arn,
        subnet_ids: subnet_ids,
        [if labels != null then 'labels']: labels,
        [if tags != null then 'tags']: tags,
        ami_type:: '${aws_eks_node_group.%s.ami_type}' % rname,
        arn:: '${aws_eks_node_group.%s.arn}' % rname,
        disk_size:: '${aws_eks_node_group.%s.disk_size}' % rname,
        id:: '${aws_eks_node_group.%s.id}' % rname,
        instance_types:: '${aws_eks_node_group.%s.instance_types}' % rname,
        release_version:: '${aws_eks_node_group.%s.release_version}' % rname,
        resources:: '${aws_eks_node_group.%s.resources}' % rname,
        status:: '${aws_eks_node_group.%s.status}' % rname,
        version:: '${aws_eks_node_group.%s.version}' % rname,
        remote_access:: {},
        scaling_config: scaling_config,
        timeouts:: {},
      },
      with_ami_type(ami_type):: {
        ami_type::: ami_type,
      },
      with_disk_size(disk_size):: {
        disk_size::: disk_size,
      },
      with_id(id):: {
        id::: id,
      },
      with_instance_types(instance_types):: {
        instance_types::: instance_types,
      },
      with_release_version(release_version):: {
        release_version::: release_version,
      },
      with_version(version):: {
        version::: version,
      },
      with_remote_access(remote_access):: self + {
        remote_access: remote_access,
      },
      remote_access:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param ec2_ssh_key (optional)
        // @param source_security_group_ids (optional)
        new(rname, ec2_ssh_key=null, source_security_group_ids=null):: {
          rname:: rname,
          [if ec2_ssh_key != null then 'ec2_ssh_key']: ec2_ssh_key,
          [if source_security_group_ids != null then 'source_security_group_ids']: source_security_group_ids,
        },
      },
      scaling_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param desired_size (required)
        // @param max_size (required)
        // @param min_size (required)
        new(rname, desired_size, max_size, min_size):: {
          rname:: rname,
          desired_size: desired_size,
          max_size: max_size,
          min_size: min_size,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_elastic_beanstalk_application - https://www.terraform.io/docs/providers/aws/r/elastic_beanstalk_application.html
    aws_elastic_beanstalk_application:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_elastic_beanstalk_application.%s.arn}' % rname,
        id:: '${aws_elastic_beanstalk_application.%s.id}' % rname,
        appversion_lifecycle:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_appversion_lifecycle(appversion_lifecycle):: self + {
        appversion_lifecycle: appversion_lifecycle,
      },
      appversion_lifecycle:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param service_role (required)
        // @param delete_source_from_s3 (optional)
        // @param max_age_in_days (optional)
        // @param max_count (optional)
        new(rname, service_role, delete_source_from_s3=null, max_age_in_days=null, max_count=null):: {
          rname:: rname,
          service_role: service_role,
          [if delete_source_from_s3 != null then 'delete_source_from_s3']: delete_source_from_s3,
          [if max_age_in_days != null then 'max_age_in_days']: max_age_in_days,
          [if max_count != null then 'max_count']: max_count,
        },
      },
    },
    // aws_elastic_beanstalk_application_version - https://www.terraform.io/docs/providers/aws/r/elastic_beanstalk_application_version.html
    aws_elastic_beanstalk_application_version:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application (required)
      // @param bucket (required)
      // @param key (required)
      // @param name (required)
      // @param description (optional)
      // @param force_delete (optional)
      // @param tags (optional)
      new(rname, application, bucket, key, name, description=null, force_delete=null, tags=null):: {
        rname:: rname,
        application: application,
        bucket: bucket,
        key: key,
        name: name,
        [if description != null then 'description']: description,
        [if force_delete != null then 'force_delete']: force_delete,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_elastic_beanstalk_application_version.%s.arn}' % rname,
        id:: '${aws_elastic_beanstalk_application_version.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_elastic_beanstalk_configuration_template - https://www.terraform.io/docs/providers/aws/r/elastic_beanstalk_configuration_template.html
    aws_elastic_beanstalk_configuration_template:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application (required)
      // @param name (required)
      // @param description (optional)
      // @param environment_id (optional)
      // @param solution_stack_name (optional)
      new(rname, application, name, description=null, environment_id=null, solution_stack_name=null):: {
        rname:: rname,
        application: application,
        name: name,
        [if description != null then 'description']: description,
        [if environment_id != null then 'environment_id']: environment_id,
        [if solution_stack_name != null then 'solution_stack_name']: solution_stack_name,
        id:: '${aws_elastic_beanstalk_configuration_template.%s.id}' % rname,
        setting:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_setting(setting):: self + {
        setting: setting,
      },
      setting:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param namespace (required)
        // @param value (required)
        // @param resource (optional)
        new(rname, name, namespace, value, resource=null):: {
          rname:: rname,
          name: name,
          namespace: namespace,
          value: value,
          [if resource != null then 'resource']: resource,
        },
      },
    },
    // aws_elastic_beanstalk_environment - https://www.terraform.io/docs/providers/aws/r/elastic_beanstalk_environment.html
    aws_elastic_beanstalk_environment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application (required)
      // @param name (required)
      // @param description (optional)
      // @param poll_interval (optional)
      // @param tags (optional)
      // @param template_name (optional)
      // @param tier (optional)
      // @param wait_for_ready_timeout (optional)
      new(rname, application, name, description=null, poll_interval=null, tags=null, template_name=null, tier=null, wait_for_ready_timeout=null):: {
        rname:: rname,
        application: application,
        name: name,
        [if description != null then 'description']: description,
        [if poll_interval != null then 'poll_interval']: poll_interval,
        [if tags != null then 'tags']: tags,
        [if template_name != null then 'template_name']: template_name,
        [if tier != null then 'tier']: tier,
        [if wait_for_ready_timeout != null then 'wait_for_ready_timeout']: wait_for_ready_timeout,
        all_settings:: '${aws_elastic_beanstalk_environment.%s.all_settings}' % rname,
        arn:: '${aws_elastic_beanstalk_environment.%s.arn}' % rname,
        autoscaling_groups:: '${aws_elastic_beanstalk_environment.%s.autoscaling_groups}' % rname,
        cname:: '${aws_elastic_beanstalk_environment.%s.cname}' % rname,
        cname_prefix:: '${aws_elastic_beanstalk_environment.%s.cname_prefix}' % rname,
        endpoint_url:: '${aws_elastic_beanstalk_environment.%s.endpoint_url}' % rname,
        id:: '${aws_elastic_beanstalk_environment.%s.id}' % rname,
        instances:: '${aws_elastic_beanstalk_environment.%s.instances}' % rname,
        launch_configurations:: '${aws_elastic_beanstalk_environment.%s.launch_configurations}' % rname,
        load_balancers:: '${aws_elastic_beanstalk_environment.%s.load_balancers}' % rname,
        platform_arn:: '${aws_elastic_beanstalk_environment.%s.platform_arn}' % rname,
        queues:: '${aws_elastic_beanstalk_environment.%s.queues}' % rname,
        solution_stack_name:: '${aws_elastic_beanstalk_environment.%s.solution_stack_name}' % rname,
        triggers:: '${aws_elastic_beanstalk_environment.%s.triggers}' % rname,
        version_label:: '${aws_elastic_beanstalk_environment.%s.version_label}' % rname,
        setting:: {},
      },
      with_cname_prefix(cname_prefix):: {
        cname_prefix::: cname_prefix,
      },
      with_id(id):: {
        id::: id,
      },
      with_platform_arn(platform_arn):: {
        platform_arn::: platform_arn,
      },
      with_solution_stack_name(solution_stack_name):: {
        solution_stack_name::: solution_stack_name,
      },
      with_version_label(version_label):: {
        version_label::: version_label,
      },
      with_setting(setting):: self + {
        setting: setting,
      },
      setting:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param namespace (required)
        // @param value (required)
        // @param resource (optional)
        new(rname, name, namespace, value, resource=null):: {
          rname:: rname,
          name: name,
          namespace: namespace,
          value: value,
          [if resource != null then 'resource']: resource,
        },
      },
    },
    // aws_elasticache_cluster - https://www.terraform.io/docs/providers/aws/r/elasticache_cluster.html
    aws_elasticache_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_id (required)
      // @param availability_zones (optional)
      // @param notification_topic_arn (optional)
      // @param preferred_availability_zones (optional)
      // @param snapshot_arns (optional)
      // @param snapshot_name (optional)
      // @param snapshot_retention_limit (optional)
      // @param tags (optional)
      new(rname, cluster_id, availability_zones=null, notification_topic_arn=null, preferred_availability_zones=null, snapshot_arns=null, snapshot_name=null, snapshot_retention_limit=null, tags=null):: {
        rname:: rname,
        cluster_id: cluster_id,
        [if availability_zones != null then 'availability_zones']: availability_zones,
        [if notification_topic_arn != null then 'notification_topic_arn']: notification_topic_arn,
        [if preferred_availability_zones != null then 'preferred_availability_zones']: preferred_availability_zones,
        [if snapshot_arns != null then 'snapshot_arns']: snapshot_arns,
        [if snapshot_name != null then 'snapshot_name']: snapshot_name,
        [if snapshot_retention_limit != null then 'snapshot_retention_limit']: snapshot_retention_limit,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_elasticache_cluster.%s.apply_immediately}' % rname,
        arn:: '${aws_elasticache_cluster.%s.arn}' % rname,
        availability_zone:: '${aws_elasticache_cluster.%s.availability_zone}' % rname,
        az_mode:: '${aws_elasticache_cluster.%s.az_mode}' % rname,
        cache_nodes:: '${aws_elasticache_cluster.%s.cache_nodes}' % rname,
        cluster_address:: '${aws_elasticache_cluster.%s.cluster_address}' % rname,
        configuration_endpoint:: '${aws_elasticache_cluster.%s.configuration_endpoint}' % rname,
        engine:: '${aws_elasticache_cluster.%s.engine}' % rname,
        engine_version:: '${aws_elasticache_cluster.%s.engine_version}' % rname,
        id:: '${aws_elasticache_cluster.%s.id}' % rname,
        maintenance_window:: '${aws_elasticache_cluster.%s.maintenance_window}' % rname,
        node_type:: '${aws_elasticache_cluster.%s.node_type}' % rname,
        num_cache_nodes:: '${aws_elasticache_cluster.%s.num_cache_nodes}' % rname,
        parameter_group_name:: '${aws_elasticache_cluster.%s.parameter_group_name}' % rname,
        port:: '${aws_elasticache_cluster.%s.port}' % rname,
        replication_group_id:: '${aws_elasticache_cluster.%s.replication_group_id}' % rname,
        security_group_ids:: '${aws_elasticache_cluster.%s.security_group_ids}' % rname,
        security_group_names:: '${aws_elasticache_cluster.%s.security_group_names}' % rname,
        snapshot_window:: '${aws_elasticache_cluster.%s.snapshot_window}' % rname,
        subnet_group_name:: '${aws_elasticache_cluster.%s.subnet_group_name}' % rname,
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_az_mode(az_mode):: {
        az_mode::: az_mode,
      },
      with_engine(engine):: {
        engine::: engine,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_maintenance_window(maintenance_window):: {
        maintenance_window::: maintenance_window,
      },
      with_node_type(node_type):: {
        node_type::: node_type,
      },
      with_num_cache_nodes(num_cache_nodes):: {
        num_cache_nodes::: num_cache_nodes,
      },
      with_parameter_group_name(parameter_group_name):: {
        parameter_group_name::: parameter_group_name,
      },
      with_port(port):: {
        port::: port,
      },
      with_replication_group_id(replication_group_id):: {
        replication_group_id::: replication_group_id,
      },
      with_security_group_ids(security_group_ids):: {
        security_group_ids::: security_group_ids,
      },
      with_security_group_names(security_group_names):: {
        security_group_names::: security_group_names,
      },
      with_snapshot_window(snapshot_window):: {
        snapshot_window::: snapshot_window,
      },
      with_subnet_group_name(subnet_group_name):: {
        subnet_group_name::: subnet_group_name,
      },
    },
    // aws_elasticache_parameter_group - https://www.terraform.io/docs/providers/aws/r/elasticache_parameter_group.html
    aws_elasticache_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param name (required)
      // @param description (optional)
      new(rname, family, name, description=null):: {
        rname:: rname,
        family: family,
        name: name,
        [if description != null then 'description']: description,
        id:: '${aws_elasticache_parameter_group.%s.id}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        new(rname, name, value):: {
          rname:: rname,
          name: name,
          value: value,
        },
      },
    },
    // aws_elasticache_replication_group - https://www.terraform.io/docs/providers/aws/r/elasticache_replication_group.html
    aws_elasticache_replication_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param replication_group_description (required)
      // @param replication_group_id (required)
      // @param at_rest_encryption_enabled (optional)
      // @param auth_token (optional)
      // @param auto_minor_version_upgrade (optional)
      // @param automatic_failover_enabled (optional)
      // @param availability_zones (optional)
      // @param engine (optional)
      // @param kms_key_id (optional)
      // @param notification_topic_arn (optional)
      // @param port (optional)
      // @param snapshot_arns (optional)
      // @param snapshot_name (optional)
      // @param snapshot_retention_limit (optional)
      // @param tags (optional)
      // @param transit_encryption_enabled (optional)
      new(rname, replication_group_description, replication_group_id, at_rest_encryption_enabled=null, auth_token=null, auto_minor_version_upgrade=null, automatic_failover_enabled=null, availability_zones=null, engine=null, kms_key_id=null, notification_topic_arn=null, port=null, snapshot_arns=null, snapshot_name=null, snapshot_retention_limit=null, tags=null, transit_encryption_enabled=null):: {
        rname:: rname,
        replication_group_description: replication_group_description,
        replication_group_id: replication_group_id,
        [if at_rest_encryption_enabled != null then 'at_rest_encryption_enabled']: at_rest_encryption_enabled,
        [if auth_token != null then 'auth_token']: auth_token,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if automatic_failover_enabled != null then 'automatic_failover_enabled']: automatic_failover_enabled,
        [if availability_zones != null then 'availability_zones']: availability_zones,
        [if engine != null then 'engine']: engine,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if notification_topic_arn != null then 'notification_topic_arn']: notification_topic_arn,
        [if port != null then 'port']: port,
        [if snapshot_arns != null then 'snapshot_arns']: snapshot_arns,
        [if snapshot_name != null then 'snapshot_name']: snapshot_name,
        [if snapshot_retention_limit != null then 'snapshot_retention_limit']: snapshot_retention_limit,
        [if tags != null then 'tags']: tags,
        [if transit_encryption_enabled != null then 'transit_encryption_enabled']: transit_encryption_enabled,
        apply_immediately:: '${aws_elasticache_replication_group.%s.apply_immediately}' % rname,
        configuration_endpoint_address:: '${aws_elasticache_replication_group.%s.configuration_endpoint_address}' % rname,
        engine_version:: '${aws_elasticache_replication_group.%s.engine_version}' % rname,
        id:: '${aws_elasticache_replication_group.%s.id}' % rname,
        maintenance_window:: '${aws_elasticache_replication_group.%s.maintenance_window}' % rname,
        member_clusters:: '${aws_elasticache_replication_group.%s.member_clusters}' % rname,
        node_type:: '${aws_elasticache_replication_group.%s.node_type}' % rname,
        number_cache_clusters:: '${aws_elasticache_replication_group.%s.number_cache_clusters}' % rname,
        parameter_group_name:: '${aws_elasticache_replication_group.%s.parameter_group_name}' % rname,
        primary_endpoint_address:: '${aws_elasticache_replication_group.%s.primary_endpoint_address}' % rname,
        security_group_ids:: '${aws_elasticache_replication_group.%s.security_group_ids}' % rname,
        security_group_names:: '${aws_elasticache_replication_group.%s.security_group_names}' % rname,
        snapshot_window:: '${aws_elasticache_replication_group.%s.snapshot_window}' % rname,
        subnet_group_name:: '${aws_elasticache_replication_group.%s.subnet_group_name}' % rname,
        cluster_mode:: {},
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_maintenance_window(maintenance_window):: {
        maintenance_window::: maintenance_window,
      },
      with_node_type(node_type):: {
        node_type::: node_type,
      },
      with_number_cache_clusters(number_cache_clusters):: {
        number_cache_clusters::: number_cache_clusters,
      },
      with_parameter_group_name(parameter_group_name):: {
        parameter_group_name::: parameter_group_name,
      },
      with_security_group_ids(security_group_ids):: {
        security_group_ids::: security_group_ids,
      },
      with_security_group_names(security_group_names):: {
        security_group_names::: security_group_names,
      },
      with_snapshot_window(snapshot_window):: {
        snapshot_window::: snapshot_window,
      },
      with_subnet_group_name(subnet_group_name):: {
        subnet_group_name::: subnet_group_name,
      },
      with_cluster_mode(cluster_mode):: self + {
        cluster_mode: cluster_mode,
      },
      cluster_mode:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param num_node_groups (required)
        // @param replicas_per_node_group (required)
        new(rname, num_node_groups, replicas_per_node_group):: {
          rname:: rname,
          num_node_groups: num_node_groups,
          replicas_per_node_group: replicas_per_node_group,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_elasticache_security_group - https://www.terraform.io/docs/providers/aws/r/elasticache_security_group.html
    aws_elasticache_security_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param security_group_names (required)
      // @param description (optional)
      new(rname, name, security_group_names, description=null):: {
        rname:: rname,
        name: name,
        security_group_names: security_group_names,
        [if description != null then 'description']: description,
        id:: '${aws_elasticache_security_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_elasticache_subnet_group - https://www.terraform.io/docs/providers/aws/r/elasticache_subnet_group.html
    aws_elasticache_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param subnet_ids (required)
      // @param description (optional)
      new(rname, name, subnet_ids, description=null):: {
        rname:: rname,
        name: name,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        id:: '${aws_elasticache_subnet_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_elasticsearch_domain - https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain.html
    aws_elasticsearch_domain:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain_name (required)
      // @param elasticsearch_version (optional)
      // @param tags (optional)
      new(rname, domain_name, elasticsearch_version=null, tags=null):: {
        rname:: rname,
        domain_name: domain_name,
        [if elasticsearch_version != null then 'elasticsearch_version']: elasticsearch_version,
        [if tags != null then 'tags']: tags,
        access_policies:: '${aws_elasticsearch_domain.%s.access_policies}' % rname,
        advanced_options:: '${aws_elasticsearch_domain.%s.advanced_options}' % rname,
        arn:: '${aws_elasticsearch_domain.%s.arn}' % rname,
        domain_id:: '${aws_elasticsearch_domain.%s.domain_id}' % rname,
        endpoint:: '${aws_elasticsearch_domain.%s.endpoint}' % rname,
        id:: '${aws_elasticsearch_domain.%s.id}' % rname,
        kibana_endpoint:: '${aws_elasticsearch_domain.%s.kibana_endpoint}' % rname,
        cluster_config:: {},
        cognito_options:: {},
        domain_endpoint_options:: {},
        ebs_options:: {},
        encrypt_at_rest:: {},
        log_publishing_options:: {},
        node_to_node_encryption:: {},
        snapshot_options:: {},
        vpc_options:: {},
      },
      with_access_policies(access_policies):: {
        access_policies::: access_policies,
      },
      with_advanced_options(advanced_options):: {
        advanced_options::: advanced_options,
      },
      with_id(id):: {
        id::: id,
      },
      with_cluster_config(cluster_config):: self + {
        cluster_config: cluster_config,
      },
      cluster_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param dedicated_master_count (optional)
        // @param dedicated_master_enabled (optional)
        // @param dedicated_master_type (optional)
        // @param instance_count (optional)
        // @param instance_type (optional)
        // @param zone_awareness_enabled (optional)
        new(rname, dedicated_master_count=null, dedicated_master_enabled=null, dedicated_master_type=null, instance_count=null, instance_type=null, zone_awareness_enabled=null):: {
          rname:: rname,
          [if dedicated_master_count != null then 'dedicated_master_count']: dedicated_master_count,
          [if dedicated_master_enabled != null then 'dedicated_master_enabled']: dedicated_master_enabled,
          [if dedicated_master_type != null then 'dedicated_master_type']: dedicated_master_type,
          [if instance_count != null then 'instance_count']: instance_count,
          [if instance_type != null then 'instance_type']: instance_type,
          [if zone_awareness_enabled != null then 'zone_awareness_enabled']: zone_awareness_enabled,
          zone_awareness_config:: {},
        },
        with_zone_awareness_config(zone_awareness_config):: self + {
          zone_awareness_config: zone_awareness_config,
        },
        zone_awareness_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param availability_zone_count (optional)
          new(rname, availability_zone_count=null):: {
            rname:: rname,
            [if availability_zone_count != null then 'availability_zone_count']: availability_zone_count,
          },
        },
      },
      with_cognito_options(cognito_options):: self + {
        cognito_options: cognito_options,
      },
      cognito_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param identity_pool_id (required)
        // @param role_arn (required)
        // @param user_pool_id (required)
        // @param enabled (optional)
        new(rname, identity_pool_id, role_arn, user_pool_id, enabled=null):: {
          rname:: rname,
          identity_pool_id: identity_pool_id,
          role_arn: role_arn,
          user_pool_id: user_pool_id,
          [if enabled != null then 'enabled']: enabled,
        },
      },
      with_domain_endpoint_options(domain_endpoint_options):: self + {
        domain_endpoint_options: domain_endpoint_options,
      },
      domain_endpoint_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enforce_https (required)
        new(rname, enforce_https):: {
          rname:: rname,
          enforce_https: enforce_https,
          tls_security_policy:: '${aws_elasticsearch_domain.%s.domain_endpoint_options.tls_security_policy}' % rname,
        },
        with_tls_security_policy(tls_security_policy):: {
          tls_security_policy::: tls_security_policy,
        },
      },
      with_ebs_options(ebs_options):: self + {
        ebs_options: ebs_options,
      },
      ebs_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param ebs_enabled (required)
        // @param iops (optional)
        // @param volume_size (optional)
        new(rname, ebs_enabled, iops=null, volume_size=null):: {
          rname:: rname,
          ebs_enabled: ebs_enabled,
          [if iops != null then 'iops']: iops,
          [if volume_size != null then 'volume_size']: volume_size,
          volume_type:: '${aws_elasticsearch_domain.%s.ebs_options.volume_type}' % rname,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_encrypt_at_rest(encrypt_at_rest):: self + {
        encrypt_at_rest: encrypt_at_rest,
      },
      encrypt_at_rest:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        new(rname, enabled):: {
          rname:: rname,
          enabled: enabled,
          kms_key_id:: '${aws_elasticsearch_domain.%s.encrypt_at_rest.kms_key_id}' % rname,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
      },
      with_log_publishing_options(log_publishing_options):: self + {
        log_publishing_options: log_publishing_options,
      },
      log_publishing_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cloudwatch_log_group_arn (required)
        // @param log_type (required)
        // @param enabled (optional)
        new(rname, cloudwatch_log_group_arn, log_type, enabled=null):: {
          rname:: rname,
          cloudwatch_log_group_arn: cloudwatch_log_group_arn,
          log_type: log_type,
          [if enabled != null then 'enabled']: enabled,
        },
      },
      with_node_to_node_encryption(node_to_node_encryption):: self + {
        node_to_node_encryption: node_to_node_encryption,
      },
      node_to_node_encryption:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        new(rname, enabled):: {
          rname:: rname,
          enabled: enabled,
        },
      },
      with_snapshot_options(snapshot_options):: self + {
        snapshot_options: snapshot_options,
      },
      snapshot_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param automated_snapshot_start_hour (required)
        new(rname, automated_snapshot_start_hour):: {
          rname:: rname,
          automated_snapshot_start_hour: automated_snapshot_start_hour,
        },
      },
      with_vpc_options(vpc_options):: self + {
        vpc_options: vpc_options,
      },
      vpc_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_ids (optional)
        // @param subnet_ids (optional)
        new(rname, security_group_ids=null, subnet_ids=null):: {
          rname:: rname,
          [if security_group_ids != null then 'security_group_ids']: security_group_ids,
          [if subnet_ids != null then 'subnet_ids']: subnet_ids,
          availability_zones:: '${aws_elasticsearch_domain.%s.vpc_options.availability_zones}' % rname,
          vpc_id:: '${aws_elasticsearch_domain.%s.vpc_options.vpc_id}' % rname,
        },
      },
    },
    // aws_elasticsearch_domain_policy - https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain_policy.html
    aws_elasticsearch_domain_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param access_policies (required)
      // @param domain_name (required)
      new(rname, access_policies, domain_name):: {
        rname:: rname,
        access_policies: access_policies,
        domain_name: domain_name,
        id:: '${aws_elasticsearch_domain_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_elastictranscoder_pipeline - https://www.terraform.io/docs/providers/aws/r/elastictranscoder_pipeline.html
    aws_elastictranscoder_pipeline:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param input_bucket (required)
      // @param role (required)
      // @param aws_kms_key_arn (optional)
      new(rname, input_bucket, role, aws_kms_key_arn=null):: {
        rname:: rname,
        input_bucket: input_bucket,
        role: role,
        [if aws_kms_key_arn != null then 'aws_kms_key_arn']: aws_kms_key_arn,
        arn:: '${aws_elastictranscoder_pipeline.%s.arn}' % rname,
        id:: '${aws_elastictranscoder_pipeline.%s.id}' % rname,
        name:: '${aws_elastictranscoder_pipeline.%s.name}' % rname,
        output_bucket:: '${aws_elastictranscoder_pipeline.%s.output_bucket}' % rname,
        content_config:: {},
        content_config_permissions:: {},
        notifications:: {},
        thumbnail_config:: {},
        thumbnail_config_permissions:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_output_bucket(output_bucket):: {
        output_bucket::: output_bucket,
      },
      with_content_config(content_config):: self + {
        content_config: content_config,
      },
      content_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param storage_class (optional)
        new(rname, storage_class=null):: {
          rname:: rname,
          [if storage_class != null then 'storage_class']: storage_class,
          bucket:: '${aws_elastictranscoder_pipeline.%s.content_config.bucket}' % rname,
        },
        with_bucket(bucket):: {
          bucket::: bucket,
        },
      },
      with_content_config_permissions(content_config_permissions):: self + {
        content_config_permissions: content_config_permissions,
      },
      content_config_permissions:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param access (optional)
        // @param grantee (optional)
        // @param grantee_type (optional)
        new(rname, access=null, grantee=null, grantee_type=null):: {
          rname:: rname,
          [if access != null then 'access']: access,
          [if grantee != null then 'grantee']: grantee,
          [if grantee_type != null then 'grantee_type']: grantee_type,
        },
      },
      with_notifications(notifications):: self + {
        notifications: notifications,
      },
      notifications:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param completed (optional)
        // @param rerror (optional)
        // @param progressing (optional)
        // @param warning (optional)
        new(rname, completed=null, rerror=null, progressing=null, warning=null):: {
          rname:: rname,
          [if completed != null then 'completed']: completed,
          [if rerror != null then 'error']: rerror,
          [if progressing != null then 'progressing']: progressing,
          [if warning != null then 'warning']: warning,
        },
      },
      with_thumbnail_config(thumbnail_config):: self + {
        thumbnail_config: thumbnail_config,
      },
      thumbnail_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param storage_class (optional)
        new(rname, storage_class=null):: {
          rname:: rname,
          [if storage_class != null then 'storage_class']: storage_class,
          bucket:: '${aws_elastictranscoder_pipeline.%s.thumbnail_config.bucket}' % rname,
        },
        with_bucket(bucket):: {
          bucket::: bucket,
        },
      },
      with_thumbnail_config_permissions(thumbnail_config_permissions):: self + {
        thumbnail_config_permissions: thumbnail_config_permissions,
      },
      thumbnail_config_permissions:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param access (optional)
        // @param grantee (optional)
        // @param grantee_type (optional)
        new(rname, access=null, grantee=null, grantee_type=null):: {
          rname:: rname,
          [if access != null then 'access']: access,
          [if grantee != null then 'grantee']: grantee,
          [if grantee_type != null then 'grantee_type']: grantee_type,
        },
      },
    },
    // aws_elastictranscoder_preset - https://www.terraform.io/docs/providers/aws/r/elastictranscoder_preset.html
    aws_elastictranscoder_preset:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param container (required)
      // @param description (optional)
      // @param video_codec_options (optional)
      new(rname, container, description=null, video_codec_options=null):: {
        rname:: rname,
        container: container,
        [if description != null then 'description']: description,
        [if video_codec_options != null then 'video_codec_options']: video_codec_options,
        arn:: '${aws_elastictranscoder_preset.%s.arn}' % rname,
        id:: '${aws_elastictranscoder_preset.%s.id}' % rname,
        name:: '${aws_elastictranscoder_preset.%s.name}' % rname,
        type:: '${aws_elastictranscoder_preset.%s.type}' % rname,
        audio:: {},
        audio_codec_options:: {},
        thumbnails:: {},
        video:: {},
        video_watermarks:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_type(type):: {
        type::: type,
      },
      with_audio(audio):: self + {
        audio: audio,
      },
      audio:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param audio_packing_mode (optional)
        // @param bit_rate (optional)
        // @param channels (optional)
        // @param codec (optional)
        // @param sample_rate (optional)
        new(rname, audio_packing_mode=null, bit_rate=null, channels=null, codec=null, sample_rate=null):: {
          rname:: rname,
          [if audio_packing_mode != null then 'audio_packing_mode']: audio_packing_mode,
          [if bit_rate != null then 'bit_rate']: bit_rate,
          [if channels != null then 'channels']: channels,
          [if codec != null then 'codec']: codec,
          [if sample_rate != null then 'sample_rate']: sample_rate,
        },
      },
      with_audio_codec_options(audio_codec_options):: self + {
        audio_codec_options: audio_codec_options,
      },
      audio_codec_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bit_depth (optional)
        // @param bit_order (optional)
        // @param profile (optional)
        // @param signed (optional)
        new(rname, bit_depth=null, bit_order=null, profile=null, signed=null):: {
          rname:: rname,
          [if bit_depth != null then 'bit_depth']: bit_depth,
          [if bit_order != null then 'bit_order']: bit_order,
          [if profile != null then 'profile']: profile,
          [if signed != null then 'signed']: signed,
        },
      },
      with_thumbnails(thumbnails):: self + {
        thumbnails: thumbnails,
      },
      thumbnails:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param aspect_ratio (optional)
        // @param format (optional)
        // @param interval (optional)
        // @param max_height (optional)
        // @param max_width (optional)
        // @param padding_policy (optional)
        // @param resolution (optional)
        // @param sizing_policy (optional)
        new(rname, aspect_ratio=null, format=null, interval=null, max_height=null, max_width=null, padding_policy=null, resolution=null, sizing_policy=null):: {
          rname:: rname,
          [if aspect_ratio != null then 'aspect_ratio']: aspect_ratio,
          [if format != null then 'format']: format,
          [if interval != null then 'interval']: interval,
          [if max_height != null then 'max_height']: max_height,
          [if max_width != null then 'max_width']: max_width,
          [if padding_policy != null then 'padding_policy']: padding_policy,
          [if resolution != null then 'resolution']: resolution,
          [if sizing_policy != null then 'sizing_policy']: sizing_policy,
        },
      },
      with_video(video):: self + {
        video: video,
      },
      video:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param aspect_ratio (optional)
        // @param bit_rate (optional)
        // @param codec (optional)
        // @param display_aspect_ratio (optional)
        // @param fixed_gop (optional)
        // @param frame_rate (optional)
        // @param keyframes_max_dist (optional)
        // @param max_frame_rate (optional)
        // @param max_height (optional)
        // @param max_width (optional)
        // @param padding_policy (optional)
        // @param resolution (optional)
        // @param sizing_policy (optional)
        new(rname, aspect_ratio=null, bit_rate=null, codec=null, display_aspect_ratio=null, fixed_gop=null, frame_rate=null, keyframes_max_dist=null, max_frame_rate=null, max_height=null, max_width=null, padding_policy=null, resolution=null, sizing_policy=null):: {
          rname:: rname,
          [if aspect_ratio != null then 'aspect_ratio']: aspect_ratio,
          [if bit_rate != null then 'bit_rate']: bit_rate,
          [if codec != null then 'codec']: codec,
          [if display_aspect_ratio != null then 'display_aspect_ratio']: display_aspect_ratio,
          [if fixed_gop != null then 'fixed_gop']: fixed_gop,
          [if frame_rate != null then 'frame_rate']: frame_rate,
          [if keyframes_max_dist != null then 'keyframes_max_dist']: keyframes_max_dist,
          [if max_frame_rate != null then 'max_frame_rate']: max_frame_rate,
          [if max_height != null then 'max_height']: max_height,
          [if max_width != null then 'max_width']: max_width,
          [if padding_policy != null then 'padding_policy']: padding_policy,
          [if resolution != null then 'resolution']: resolution,
          [if sizing_policy != null then 'sizing_policy']: sizing_policy,
        },
      },
      with_video_watermarks(video_watermarks):: self + {
        video_watermarks: video_watermarks,
      },
      video_watermarks:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param horizontal_align (optional)
        // @param horizontal_offset (optional)
        // @param id (optional)
        // @param max_height (optional)
        // @param max_width (optional)
        // @param opacity (optional)
        // @param sizing_policy (optional)
        // @param target (optional)
        // @param vertical_align (optional)
        // @param vertical_offset (optional)
        new(rname, horizontal_align=null, horizontal_offset=null, id=null, max_height=null, max_width=null, opacity=null, sizing_policy=null, target=null, vertical_align=null, vertical_offset=null):: {
          rname:: rname,
          [if horizontal_align != null then 'horizontal_align']: horizontal_align,
          [if horizontal_offset != null then 'horizontal_offset']: horizontal_offset,
          [if id != null then 'id']: id,
          [if max_height != null then 'max_height']: max_height,
          [if max_width != null then 'max_width']: max_width,
          [if opacity != null then 'opacity']: opacity,
          [if sizing_policy != null then 'sizing_policy']: sizing_policy,
          [if target != null then 'target']: target,
          [if vertical_align != null then 'vertical_align']: vertical_align,
          [if vertical_offset != null then 'vertical_offset']: vertical_offset,
        },
      },
    },
    // aws_elb - https://www.terraform.io/docs/providers/aws/r/elb.html
    aws_elb:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param connection_draining (optional)
      // @param connection_draining_timeout (optional)
      // @param cross_zone_load_balancing (optional)
      // @param idle_timeout (optional)
      // @param name_prefix (optional)
      // @param tags (optional)
      // @param listener (required)
      new(rname, listener, connection_draining=null, connection_draining_timeout=null, cross_zone_load_balancing=null, idle_timeout=null, name_prefix=null, tags=null):: {
        rname:: rname,
        [if connection_draining != null then 'connection_draining']: connection_draining,
        [if connection_draining_timeout != null then 'connection_draining_timeout']: connection_draining_timeout,
        [if cross_zone_load_balancing != null then 'cross_zone_load_balancing']: cross_zone_load_balancing,
        [if idle_timeout != null then 'idle_timeout']: idle_timeout,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_elb.%s.arn}' % rname,
        availability_zones:: '${aws_elb.%s.availability_zones}' % rname,
        dns_name:: '${aws_elb.%s.dns_name}' % rname,
        id:: '${aws_elb.%s.id}' % rname,
        instances:: '${aws_elb.%s.instances}' % rname,
        internal:: '${aws_elb.%s.internal}' % rname,
        name:: '${aws_elb.%s.name}' % rname,
        security_groups:: '${aws_elb.%s.security_groups}' % rname,
        source_security_group:: '${aws_elb.%s.source_security_group}' % rname,
        source_security_group_id:: '${aws_elb.%s.source_security_group_id}' % rname,
        subnets:: '${aws_elb.%s.subnets}' % rname,
        zone_id:: '${aws_elb.%s.zone_id}' % rname,
        access_logs:: {},
        health_check:: {},
        listener: listener,
      },
      with_availability_zones(availability_zones):: {
        availability_zones::: availability_zones,
      },
      with_id(id):: {
        id::: id,
      },
      with_instances(instances):: {
        instances::: instances,
      },
      with_internal(internal):: {
        internal::: internal,
      },
      with_name(name):: {
        name::: name,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_source_security_group(source_security_group):: {
        source_security_group::: source_security_group,
      },
      with_subnets(subnets):: {
        subnets::: subnets,
      },
      with_access_logs(access_logs):: self + {
        access_logs: access_logs,
      },
      access_logs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        // @param bucket_prefix (optional)
        // @param enabled (optional)
        // @param interval (optional)
        new(rname, bucket, bucket_prefix=null, enabled=null, interval=null):: {
          rname:: rname,
          bucket: bucket,
          [if bucket_prefix != null then 'bucket_prefix']: bucket_prefix,
          [if enabled != null then 'enabled']: enabled,
          [if interval != null then 'interval']: interval,
        },
      },
      with_health_check(health_check):: self + {
        health_check: health_check,
      },
      health_check:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param healthy_threshold (required)
        // @param interval (required)
        // @param target (required)
        // @param timeout (required)
        // @param unhealthy_threshold (required)
        new(rname, healthy_threshold, interval, target, timeout, unhealthy_threshold):: {
          rname:: rname,
          healthy_threshold: healthy_threshold,
          interval: interval,
          target: target,
          timeout: timeout,
          unhealthy_threshold: unhealthy_threshold,
        },
      },
      listener:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_port (required)
        // @param instance_protocol (required)
        // @param lb_port (required)
        // @param lb_protocol (required)
        // @param ssl_certificate_id (optional)
        new(rname, instance_port, instance_protocol, lb_port, lb_protocol, ssl_certificate_id=null):: {
          rname:: rname,
          instance_port: instance_port,
          instance_protocol: instance_protocol,
          lb_port: lb_port,
          lb_protocol: lb_protocol,
          [if ssl_certificate_id != null then 'ssl_certificate_id']: ssl_certificate_id,
        },
      },
    },
    // aws_elb_attachment - https://www.terraform.io/docs/providers/aws/r/elb_attachment.html
    aws_elb_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param elb (required)
      // @param instance (required)
      new(rname, elb, instance):: {
        rname:: rname,
        elb: elb,
        instance: instance,
        id:: '${aws_elb_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_emr_cluster - https://www.terraform.io/docs/providers/aws/r/emr_cluster.html
    aws_emr_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param release_label (required)
      // @param service_role (required)
      // @param additional_info (optional)
      // @param applications (optional)
      // @param autoscaling_role (optional)
      // @param configurations (optional)
      // @param configurations_json (optional)
      // @param custom_ami_id (optional)
      // @param ebs_root_volume_size (optional)
      // @param log_uri (optional)
      // @param security_configuration (optional)
      // @param step_concurrency_level (optional)
      // @param tags (optional)
      // @param visible_to_all_users (optional)
      new(rname, name, release_label, service_role, additional_info=null, applications=null, autoscaling_role=null, configurations=null, configurations_json=null, custom_ami_id=null, ebs_root_volume_size=null, log_uri=null, security_configuration=null, step_concurrency_level=null, tags=null, visible_to_all_users=null):: {
        rname:: rname,
        name: name,
        release_label: release_label,
        service_role: service_role,
        [if additional_info != null then 'additional_info']: additional_info,
        [if applications != null then 'applications']: applications,
        [if autoscaling_role != null then 'autoscaling_role']: autoscaling_role,
        [if configurations != null then 'configurations']: configurations,
        [if configurations_json != null then 'configurations_json']: configurations_json,
        [if custom_ami_id != null then 'custom_ami_id']: custom_ami_id,
        [if ebs_root_volume_size != null then 'ebs_root_volume_size']: ebs_root_volume_size,
        [if log_uri != null then 'log_uri']: log_uri,
        [if security_configuration != null then 'security_configuration']: security_configuration,
        [if step_concurrency_level != null then 'step_concurrency_level']: step_concurrency_level,
        [if tags != null then 'tags']: tags,
        [if visible_to_all_users != null then 'visible_to_all_users']: visible_to_all_users,
        arn:: '${aws_emr_cluster.%s.arn}' % rname,
        cluster_state:: '${aws_emr_cluster.%s.cluster_state}' % rname,
        core_instance_count:: '${aws_emr_cluster.%s.core_instance_count}' % rname,
        core_instance_type:: '${aws_emr_cluster.%s.core_instance_type}' % rname,
        id:: '${aws_emr_cluster.%s.id}' % rname,
        keep_job_flow_alive_when_no_steps:: '${aws_emr_cluster.%s.keep_job_flow_alive_when_no_steps}' % rname,
        master_instance_type:: '${aws_emr_cluster.%s.master_instance_type}' % rname,
        master_public_dns:: '${aws_emr_cluster.%s.master_public_dns}' % rname,
        scale_down_behavior:: '${aws_emr_cluster.%s.scale_down_behavior}' % rname,
        step:: '${aws_emr_cluster.%s.step}' % rname,
        termination_protection:: '${aws_emr_cluster.%s.termination_protection}' % rname,
        bootstrap_action:: {},
        core_instance_group:: {},
        ec2_attributes:: {},
        instance_group:: {},
        kerberos_attributes:: {},
        master_instance_group:: {},
      },
      with_core_instance_count(core_instance_count):: {
        core_instance_count::: core_instance_count,
      },
      with_core_instance_type(core_instance_type):: {
        core_instance_type::: core_instance_type,
      },
      with_id(id):: {
        id::: id,
      },
      with_keep_job_flow_alive_when_no_steps(keep_job_flow_alive_when_no_steps):: {
        keep_job_flow_alive_when_no_steps::: keep_job_flow_alive_when_no_steps,
      },
      with_master_instance_type(master_instance_type):: {
        master_instance_type::: master_instance_type,
      },
      with_scale_down_behavior(scale_down_behavior):: {
        scale_down_behavior::: scale_down_behavior,
      },
      with_step(step):: {
        step::: step,
      },
      with_termination_protection(termination_protection):: {
        termination_protection::: termination_protection,
      },
      with_bootstrap_action(bootstrap_action):: self + {
        bootstrap_action: bootstrap_action,
      },
      bootstrap_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param path (required)
        // @param args (optional)
        new(rname, name, path, args=null):: {
          rname:: rname,
          name: name,
          path: path,
          [if args != null then 'args']: args,
        },
      },
      with_core_instance_group(core_instance_group):: self + {
        core_instance_group: core_instance_group,
      },
      core_instance_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_type (required)
        // @param autoscaling_policy (optional)
        // @param bid_price (optional)
        // @param instance_count (optional)
        // @param name (optional)
        new(rname, instance_type, autoscaling_policy=null, bid_price=null, instance_count=null, name=null):: {
          rname:: rname,
          instance_type: instance_type,
          [if autoscaling_policy != null then 'autoscaling_policy']: autoscaling_policy,
          [if bid_price != null then 'bid_price']: bid_price,
          [if instance_count != null then 'instance_count']: instance_count,
          [if name != null then 'name']: name,
          id:: '${aws_emr_cluster.%s.core_instance_group.id}' % rname,
          ebs_config:: {},
        },
        with_ebs_config(ebs_config):: self + {
          ebs_config: ebs_config,
        },
        ebs_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param size (required)
          // @param type (required)
          // @param iops (optional)
          // @param volumes_per_instance (optional)
          new(rname, size, type, iops=null, volumes_per_instance=null):: {
            rname:: rname,
            size: size,
            type: type,
            [if iops != null then 'iops']: iops,
            [if volumes_per_instance != null then 'volumes_per_instance']: volumes_per_instance,
          },
        },
      },
      with_ec2_attributes(ec2_attributes):: self + {
        ec2_attributes: ec2_attributes,
      },
      ec2_attributes:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_profile (required)
        // @param additional_master_security_groups (optional)
        // @param additional_slave_security_groups (optional)
        // @param key_name (optional)
        // @param subnet_id (optional)
        new(rname, instance_profile, additional_master_security_groups=null, additional_slave_security_groups=null, key_name=null, subnet_id=null):: {
          rname:: rname,
          instance_profile: instance_profile,
          [if additional_master_security_groups != null then 'additional_master_security_groups']: additional_master_security_groups,
          [if additional_slave_security_groups != null then 'additional_slave_security_groups']: additional_slave_security_groups,
          [if key_name != null then 'key_name']: key_name,
          [if subnet_id != null then 'subnet_id']: subnet_id,
          emr_managed_master_security_group:: '${aws_emr_cluster.%s.ec2_attributes.emr_managed_master_security_group}' % rname,
          emr_managed_slave_security_group:: '${aws_emr_cluster.%s.ec2_attributes.emr_managed_slave_security_group}' % rname,
          service_access_security_group:: '${aws_emr_cluster.%s.ec2_attributes.service_access_security_group}' % rname,
        },
        with_emr_managed_master_security_group(emr_managed_master_security_group):: {
          emr_managed_master_security_group::: emr_managed_master_security_group,
        },
        with_emr_managed_slave_security_group(emr_managed_slave_security_group):: {
          emr_managed_slave_security_group::: emr_managed_slave_security_group,
        },
        with_service_access_security_group(service_access_security_group):: {
          service_access_security_group::: service_access_security_group,
        },
      },
      with_instance_group(instance_group):: self + {
        instance_group: instance_group,
      },
      instance_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_role (required)
        // @param instance_type (required)
        // @param autoscaling_policy (optional)
        // @param bid_price (optional)
        // @param instance_count (optional)
        // @param name (optional)
        new(rname, instance_role, instance_type, autoscaling_policy=null, bid_price=null, instance_count=null, name=null):: {
          rname:: rname,
          instance_role: instance_role,
          instance_type: instance_type,
          [if autoscaling_policy != null then 'autoscaling_policy']: autoscaling_policy,
          [if bid_price != null then 'bid_price']: bid_price,
          [if instance_count != null then 'instance_count']: instance_count,
          [if name != null then 'name']: name,
          id:: '${aws_emr_cluster.%s.instance_group.id}' % rname,
          ebs_config:: {},
        },
        with_ebs_config(ebs_config):: self + {
          ebs_config: ebs_config,
        },
        ebs_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param size (required)
          // @param type (required)
          // @param iops (optional)
          // @param volumes_per_instance (optional)
          new(rname, size, type, iops=null, volumes_per_instance=null):: {
            rname:: rname,
            size: size,
            type: type,
            [if iops != null then 'iops']: iops,
            [if volumes_per_instance != null then 'volumes_per_instance']: volumes_per_instance,
          },
        },
      },
      with_kerberos_attributes(kerberos_attributes):: self + {
        kerberos_attributes: kerberos_attributes,
      },
      kerberos_attributes:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param kdc_admin_password (required)
        // @param realm (required)
        // @param ad_domain_join_password (optional)
        // @param ad_domain_join_user (optional)
        // @param cross_realm_trust_principal_password (optional)
        new(rname, kdc_admin_password, realm, ad_domain_join_password=null, ad_domain_join_user=null, cross_realm_trust_principal_password=null):: {
          rname:: rname,
          kdc_admin_password: kdc_admin_password,
          realm: realm,
          [if ad_domain_join_password != null then 'ad_domain_join_password']: ad_domain_join_password,
          [if ad_domain_join_user != null then 'ad_domain_join_user']: ad_domain_join_user,
          [if cross_realm_trust_principal_password != null then 'cross_realm_trust_principal_password']: cross_realm_trust_principal_password,
        },
      },
      with_master_instance_group(master_instance_group):: self + {
        master_instance_group: master_instance_group,
      },
      master_instance_group:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param instance_type (required)
        // @param bid_price (optional)
        // @param instance_count (optional)
        // @param name (optional)
        new(rname, instance_type, bid_price=null, instance_count=null, name=null):: {
          rname:: rname,
          instance_type: instance_type,
          [if bid_price != null then 'bid_price']: bid_price,
          [if instance_count != null then 'instance_count']: instance_count,
          [if name != null then 'name']: name,
          id:: '${aws_emr_cluster.%s.master_instance_group.id}' % rname,
          ebs_config:: {},
        },
        with_ebs_config(ebs_config):: self + {
          ebs_config: ebs_config,
        },
        ebs_config:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param size (required)
          // @param type (required)
          // @param iops (optional)
          // @param volumes_per_instance (optional)
          new(rname, size, type, iops=null, volumes_per_instance=null):: {
            rname:: rname,
            size: size,
            type: type,
            [if iops != null then 'iops']: iops,
            [if volumes_per_instance != null then 'volumes_per_instance']: volumes_per_instance,
          },
        },
      },
    },
    // aws_emr_instance_group - https://www.terraform.io/docs/providers/aws/r/emr_instance_group.html
    aws_emr_instance_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_id (required)
      // @param instance_type (required)
      // @param autoscaling_policy (optional)
      // @param bid_price (optional)
      // @param configurations_json (optional)
      // @param ebs_optimized (optional)
      // @param instance_count (optional)
      // @param name (optional)
      new(rname, cluster_id, instance_type, autoscaling_policy=null, bid_price=null, configurations_json=null, ebs_optimized=null, instance_count=null, name=null):: {
        rname:: rname,
        cluster_id: cluster_id,
        instance_type: instance_type,
        [if autoscaling_policy != null then 'autoscaling_policy']: autoscaling_policy,
        [if bid_price != null then 'bid_price']: bid_price,
        [if configurations_json != null then 'configurations_json']: configurations_json,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if instance_count != null then 'instance_count']: instance_count,
        [if name != null then 'name']: name,
        id:: '${aws_emr_instance_group.%s.id}' % rname,
        running_instance_count:: '${aws_emr_instance_group.%s.running_instance_count}' % rname,
        status:: '${aws_emr_instance_group.%s.status}' % rname,
        ebs_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_config(ebs_config):: self + {
        ebs_config: ebs_config,
      },
      ebs_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param size (required)
        // @param type (required)
        // @param iops (optional)
        // @param volumes_per_instance (optional)
        new(rname, size, type, iops=null, volumes_per_instance=null):: {
          rname:: rname,
          size: size,
          type: type,
          [if iops != null then 'iops']: iops,
          [if volumes_per_instance != null then 'volumes_per_instance']: volumes_per_instance,
        },
      },
    },
    // aws_emr_security_configuration - https://www.terraform.io/docs/providers/aws/r/emr_security_configuration.html
    aws_emr_security_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param configuration (required)
      // @param name_prefix (optional)
      new(rname, configuration, name_prefix=null):: {
        rname:: rname,
        configuration: configuration,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        creation_date:: '${aws_emr_security_configuration.%s.creation_date}' % rname,
        id:: '${aws_emr_security_configuration.%s.id}' % rname,
        name:: '${aws_emr_security_configuration.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_flow_log - https://www.terraform.io/docs/providers/aws/r/flow_log.html
    aws_flow_log:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param traffic_type (required)
      // @param eni_id (optional)
      // @param iam_role_arn (optional)
      // @param log_destination_type (optional)
      // @param subnet_id (optional)
      // @param vpc_id (optional)
      new(rname, traffic_type, eni_id=null, iam_role_arn=null, log_destination_type=null, subnet_id=null, vpc_id=null):: {
        rname:: rname,
        traffic_type: traffic_type,
        [if eni_id != null then 'eni_id']: eni_id,
        [if iam_role_arn != null then 'iam_role_arn']: iam_role_arn,
        [if log_destination_type != null then 'log_destination_type']: log_destination_type,
        [if subnet_id != null then 'subnet_id']: subnet_id,
        [if vpc_id != null then 'vpc_id']: vpc_id,
        id:: '${aws_flow_log.%s.id}' % rname,
        log_destination:: '${aws_flow_log.%s.log_destination}' % rname,
        log_format:: '${aws_flow_log.%s.log_format}' % rname,
        log_group_name:: '${aws_flow_log.%s.log_group_name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_log_destination(log_destination):: {
        log_destination::: log_destination,
      },
      with_log_format(log_format):: {
        log_format::: log_format,
      },
      with_log_group_name(log_group_name):: {
        log_group_name::: log_group_name,
      },
    },
    // aws_fms_admin_account - https://www.terraform.io/docs/providers/aws/r/fms_admin_account.html
    aws_fms_admin_account:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      new(rname):: {
        rname:: rname,
        account_id:: '${aws_fms_admin_account.%s.account_id}' % rname,
        id:: '${aws_fms_admin_account.%s.id}' % rname,
      },
      with_account_id(account_id):: {
        account_id::: account_id,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_fsx_lustre_file_system - https://www.terraform.io/docs/providers/aws/r/fsx_lustre_file_system.html
    aws_fsx_lustre_file_system:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param storage_capacity (required)
      // @param subnet_ids (required)
      // @param import_path (optional)
      // @param security_group_ids (optional)
      // @param tags (optional)
      new(rname, storage_capacity, subnet_ids, import_path=null, security_group_ids=null, tags=null):: {
        rname:: rname,
        storage_capacity: storage_capacity,
        subnet_ids: subnet_ids,
        [if import_path != null then 'import_path']: import_path,
        [if security_group_ids != null then 'security_group_ids']: security_group_ids,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_fsx_lustre_file_system.%s.arn}' % rname,
        dns_name:: '${aws_fsx_lustre_file_system.%s.dns_name}' % rname,
        export_path:: '${aws_fsx_lustre_file_system.%s.export_path}' % rname,
        id:: '${aws_fsx_lustre_file_system.%s.id}' % rname,
        imported_file_chunk_size:: '${aws_fsx_lustre_file_system.%s.imported_file_chunk_size}' % rname,
        network_interface_ids:: '${aws_fsx_lustre_file_system.%s.network_interface_ids}' % rname,
        owner_id:: '${aws_fsx_lustre_file_system.%s.owner_id}' % rname,
        vpc_id:: '${aws_fsx_lustre_file_system.%s.vpc_id}' % rname,
        weekly_maintenance_start_time:: '${aws_fsx_lustre_file_system.%s.weekly_maintenance_start_time}' % rname,
        timeouts:: {},
      },
      with_export_path(export_path):: {
        export_path::: export_path,
      },
      with_id(id):: {
        id::: id,
      },
      with_imported_file_chunk_size(imported_file_chunk_size):: {
        imported_file_chunk_size::: imported_file_chunk_size,
      },
      with_weekly_maintenance_start_time(weekly_maintenance_start_time):: {
        weekly_maintenance_start_time::: weekly_maintenance_start_time,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_fsx_windows_file_system - https://www.terraform.io/docs/providers/aws/r/fsx_windows_file_system.html
    aws_fsx_windows_file_system:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param storage_capacity (required)
      // @param subnet_ids (required)
      // @param throughput_capacity (required)
      // @param active_directory_id (optional)
      // @param automatic_backup_retention_days (optional)
      // @param copy_tags_to_backups (optional)
      // @param security_group_ids (optional)
      // @param skip_final_backup (optional)
      // @param tags (optional)
      new(rname, storage_capacity, subnet_ids, throughput_capacity, active_directory_id=null, automatic_backup_retention_days=null, copy_tags_to_backups=null, security_group_ids=null, skip_final_backup=null, tags=null):: {
        rname:: rname,
        storage_capacity: storage_capacity,
        subnet_ids: subnet_ids,
        throughput_capacity: throughput_capacity,
        [if active_directory_id != null then 'active_directory_id']: active_directory_id,
        [if automatic_backup_retention_days != null then 'automatic_backup_retention_days']: automatic_backup_retention_days,
        [if copy_tags_to_backups != null then 'copy_tags_to_backups']: copy_tags_to_backups,
        [if security_group_ids != null then 'security_group_ids']: security_group_ids,
        [if skip_final_backup != null then 'skip_final_backup']: skip_final_backup,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_fsx_windows_file_system.%s.arn}' % rname,
        daily_automatic_backup_start_time:: '${aws_fsx_windows_file_system.%s.daily_automatic_backup_start_time}' % rname,
        dns_name:: '${aws_fsx_windows_file_system.%s.dns_name}' % rname,
        id:: '${aws_fsx_windows_file_system.%s.id}' % rname,
        kms_key_id:: '${aws_fsx_windows_file_system.%s.kms_key_id}' % rname,
        network_interface_ids:: '${aws_fsx_windows_file_system.%s.network_interface_ids}' % rname,
        owner_id:: '${aws_fsx_windows_file_system.%s.owner_id}' % rname,
        vpc_id:: '${aws_fsx_windows_file_system.%s.vpc_id}' % rname,
        weekly_maintenance_start_time:: '${aws_fsx_windows_file_system.%s.weekly_maintenance_start_time}' % rname,
        self_managed_active_directory:: {},
        timeouts:: {},
      },
      with_daily_automatic_backup_start_time(daily_automatic_backup_start_time):: {
        daily_automatic_backup_start_time::: daily_automatic_backup_start_time,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_weekly_maintenance_start_time(weekly_maintenance_start_time):: {
        weekly_maintenance_start_time::: weekly_maintenance_start_time,
      },
      with_self_managed_active_directory(self_managed_active_directory):: self + {
        self_managed_active_directory: self_managed_active_directory,
      },
      self_managed_active_directory:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param dns_ips (required)
        // @param domain_name (required)
        // @param password (required)
        // @param username (required)
        // @param file_system_administrators_group (optional)
        // @param organizational_unit_distinguished_name (optional)
        new(rname, dns_ips, domain_name, password, username, file_system_administrators_group=null, organizational_unit_distinguished_name=null):: {
          rname:: rname,
          dns_ips: dns_ips,
          domain_name: domain_name,
          password: password,
          username: username,
          [if file_system_administrators_group != null then 'file_system_administrators_group']: file_system_administrators_group,
          [if organizational_unit_distinguished_name != null then 'organizational_unit_distinguished_name']: organizational_unit_distinguished_name,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_gamelift_alias - https://www.terraform.io/docs/providers/aws/r/gamelift_alias.html
    aws_gamelift_alias:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      // @param routing_strategy (required)
      new(rname, name, routing_strategy, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_gamelift_alias.%s.arn}' % rname,
        id:: '${aws_gamelift_alias.%s.id}' % rname,
        routing_strategy: routing_strategy,
      },
      with_id(id):: {
        id::: id,
      },
      routing_strategy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param fleet_id (optional)
        // @param message (optional)
        new(rname, type, fleet_id=null, message=null):: {
          rname:: rname,
          type: type,
          [if fleet_id != null then 'fleet_id']: fleet_id,
          [if message != null then 'message']: message,
        },
      },
    },
    // aws_gamelift_build - https://www.terraform.io/docs/providers/aws/r/gamelift_build.html
    aws_gamelift_build:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param operating_system (required)
      // @param tags (optional)
      // @param version (optional)
      // @param storage_location (required)
      new(rname, name, operating_system, storage_location, tags=null, version=null):: {
        rname:: rname,
        name: name,
        operating_system: operating_system,
        [if tags != null then 'tags']: tags,
        [if version != null then 'version']: version,
        arn:: '${aws_gamelift_build.%s.arn}' % rname,
        id:: '${aws_gamelift_build.%s.id}' % rname,
        storage_location: storage_location,
      },
      with_id(id):: {
        id::: id,
      },
      storage_location:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        // @param key (required)
        // @param role_arn (required)
        new(rname, bucket, key, role_arn):: {
          rname:: rname,
          bucket: bucket,
          key: key,
          role_arn: role_arn,
        },
      },
    },
    // aws_gamelift_fleet - https://www.terraform.io/docs/providers/aws/r/gamelift_fleet.html
    aws_gamelift_fleet:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param build_id (required)
      // @param ec2_instance_type (required)
      // @param name (required)
      // @param description (optional)
      // @param fleet_type (optional)
      // @param instance_role_arn (optional)
      // @param new_game_session_protection_policy (optional)
      // @param tags (optional)
      new(rname, build_id, ec2_instance_type, name, description=null, fleet_type=null, instance_role_arn=null, new_game_session_protection_policy=null, tags=null):: {
        rname:: rname,
        build_id: build_id,
        ec2_instance_type: ec2_instance_type,
        name: name,
        [if description != null then 'description']: description,
        [if fleet_type != null then 'fleet_type']: fleet_type,
        [if instance_role_arn != null then 'instance_role_arn']: instance_role_arn,
        [if new_game_session_protection_policy != null then 'new_game_session_protection_policy']: new_game_session_protection_policy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_gamelift_fleet.%s.arn}' % rname,
        id:: '${aws_gamelift_fleet.%s.id}' % rname,
        log_paths:: '${aws_gamelift_fleet.%s.log_paths}' % rname,
        metric_groups:: '${aws_gamelift_fleet.%s.metric_groups}' % rname,
        operating_system:: '${aws_gamelift_fleet.%s.operating_system}' % rname,
        ec2_inbound_permission:: {},
        resource_creation_limit_policy:: {},
        runtime_configuration:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_metric_groups(metric_groups):: {
        metric_groups::: metric_groups,
      },
      with_ec2_inbound_permission(ec2_inbound_permission):: self + {
        ec2_inbound_permission: ec2_inbound_permission,
      },
      ec2_inbound_permission:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param from_port (required)
        // @param ip_range (required)
        // @param protocol (required)
        // @param to_port (required)
        new(rname, from_port, ip_range, protocol, to_port):: {
          rname:: rname,
          from_port: from_port,
          ip_range: ip_range,
          protocol: protocol,
          to_port: to_port,
        },
      },
      with_resource_creation_limit_policy(resource_creation_limit_policy):: self + {
        resource_creation_limit_policy: resource_creation_limit_policy,
      },
      resource_creation_limit_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param new_game_sessions_per_creator (optional)
        // @param policy_period_in_minutes (optional)
        new(rname, new_game_sessions_per_creator=null, policy_period_in_minutes=null):: {
          rname:: rname,
          [if new_game_sessions_per_creator != null then 'new_game_sessions_per_creator']: new_game_sessions_per_creator,
          [if policy_period_in_minutes != null then 'policy_period_in_minutes']: policy_period_in_minutes,
        },
      },
      with_runtime_configuration(runtime_configuration):: self + {
        runtime_configuration: runtime_configuration,
      },
      runtime_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param game_session_activation_timeout_seconds (optional)
        // @param max_concurrent_game_session_activations (optional)
        new(rname, game_session_activation_timeout_seconds=null, max_concurrent_game_session_activations=null):: {
          rname:: rname,
          [if game_session_activation_timeout_seconds != null then 'game_session_activation_timeout_seconds']: game_session_activation_timeout_seconds,
          [if max_concurrent_game_session_activations != null then 'max_concurrent_game_session_activations']: max_concurrent_game_session_activations,
          server_process:: {},
        },
        with_server_process(server_process):: self + {
          server_process: server_process,
        },
        server_process:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param concurrent_executions (required)
          // @param launch_path (required)
          // @param parameters (optional)
          new(rname, concurrent_executions, launch_path, parameters=null):: {
            rname:: rname,
            concurrent_executions: concurrent_executions,
            launch_path: launch_path,
            [if parameters != null then 'parameters']: parameters,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_gamelift_game_session_queue - https://www.terraform.io/docs/providers/aws/r/gamelift_game_session_queue.html
    aws_gamelift_game_session_queue:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param destinations (optional)
      // @param tags (optional)
      // @param timeout_in_seconds (optional)
      new(rname, name, destinations=null, tags=null, timeout_in_seconds=null):: {
        rname:: rname,
        name: name,
        [if destinations != null then 'destinations']: destinations,
        [if tags != null then 'tags']: tags,
        [if timeout_in_seconds != null then 'timeout_in_seconds']: timeout_in_seconds,
        arn:: '${aws_gamelift_game_session_queue.%s.arn}' % rname,
        id:: '${aws_gamelift_game_session_queue.%s.id}' % rname,
        player_latency_policy:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_player_latency_policy(player_latency_policy):: self + {
        player_latency_policy: player_latency_policy,
      },
      player_latency_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param maximum_individual_player_latency_milliseconds (required)
        // @param policy_duration_seconds (optional)
        new(rname, maximum_individual_player_latency_milliseconds, policy_duration_seconds=null):: {
          rname:: rname,
          maximum_individual_player_latency_milliseconds: maximum_individual_player_latency_milliseconds,
          [if policy_duration_seconds != null then 'policy_duration_seconds']: policy_duration_seconds,
        },
      },
    },
    // aws_glacier_vault - https://www.terraform.io/docs/providers/aws/r/glacier_vault.html
    aws_glacier_vault:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param access_policy (optional)
      // @param tags (optional)
      new(rname, name, access_policy=null, tags=null):: {
        rname:: rname,
        name: name,
        [if access_policy != null then 'access_policy']: access_policy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_glacier_vault.%s.arn}' % rname,
        id:: '${aws_glacier_vault.%s.id}' % rname,
        location:: '${aws_glacier_vault.%s.location}' % rname,
        notification:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_notification(notification):: self + {
        notification: notification,
      },
      notification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param events (required)
        // @param sns_topic (required)
        new(rname, events, sns_topic):: {
          rname:: rname,
          events: events,
          sns_topic: sns_topic,
        },
      },
    },
    // aws_glacier_vault_lock - https://www.terraform.io/docs/providers/aws/r/glacier_vault_lock.html
    aws_glacier_vault_lock:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param complete_lock (required)
      // @param policy (required)
      // @param vault_name (required)
      // @param ignore_deletion_error (optional)
      new(rname, complete_lock, policy, vault_name, ignore_deletion_error=null):: {
        rname:: rname,
        complete_lock: complete_lock,
        policy: policy,
        vault_name: vault_name,
        [if ignore_deletion_error != null then 'ignore_deletion_error']: ignore_deletion_error,
        id:: '${aws_glacier_vault_lock.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_globalaccelerator_accelerator - https://www.terraform.io/docs/providers/aws/r/globalaccelerator_accelerator.html
    aws_globalaccelerator_accelerator:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param enabled (optional)
      // @param ip_address_type (optional)
      new(rname, name, enabled=null, ip_address_type=null):: {
        rname:: rname,
        name: name,
        [if enabled != null then 'enabled']: enabled,
        [if ip_address_type != null then 'ip_address_type']: ip_address_type,
        dns_name:: '${aws_globalaccelerator_accelerator.%s.dns_name}' % rname,
        hosted_zone_id:: '${aws_globalaccelerator_accelerator.%s.hosted_zone_id}' % rname,
        id:: '${aws_globalaccelerator_accelerator.%s.id}' % rname,
        ip_sets:: '${aws_globalaccelerator_accelerator.%s.ip_sets}' % rname,
        attributes:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_attributes(attributes):: self + {
        attributes: attributes,
      },
      attributes:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param flow_logs_enabled (optional)
        // @param flow_logs_s3_bucket (optional)
        // @param flow_logs_s3_prefix (optional)
        new(rname, flow_logs_enabled=null, flow_logs_s3_bucket=null, flow_logs_s3_prefix=null):: {
          rname:: rname,
          [if flow_logs_enabled != null then 'flow_logs_enabled']: flow_logs_enabled,
          [if flow_logs_s3_bucket != null then 'flow_logs_s3_bucket']: flow_logs_s3_bucket,
          [if flow_logs_s3_prefix != null then 'flow_logs_s3_prefix']: flow_logs_s3_prefix,
        },
      },
    },
    // aws_globalaccelerator_endpoint_group - https://www.terraform.io/docs/providers/aws/r/globalaccelerator_endpoint_group.html
    aws_globalaccelerator_endpoint_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param listener_arn (required)
      // @param health_check_interval_seconds (optional)
      // @param health_check_path (optional)
      // @param health_check_port (optional)
      // @param health_check_protocol (optional)
      // @param threshold_count (optional)
      // @param traffic_dial_percentage (optional)
      new(rname, listener_arn, health_check_interval_seconds=null, health_check_path=null, health_check_port=null, health_check_protocol=null, threshold_count=null, traffic_dial_percentage=null):: {
        rname:: rname,
        listener_arn: listener_arn,
        [if health_check_interval_seconds != null then 'health_check_interval_seconds']: health_check_interval_seconds,
        [if health_check_path != null then 'health_check_path']: health_check_path,
        [if health_check_port != null then 'health_check_port']: health_check_port,
        [if health_check_protocol != null then 'health_check_protocol']: health_check_protocol,
        [if threshold_count != null then 'threshold_count']: threshold_count,
        [if traffic_dial_percentage != null then 'traffic_dial_percentage']: traffic_dial_percentage,
        endpoint_group_region:: '${aws_globalaccelerator_endpoint_group.%s.endpoint_group_region}' % rname,
        id:: '${aws_globalaccelerator_endpoint_group.%s.id}' % rname,
        endpoint_configuration:: {},
      },
      with_endpoint_group_region(endpoint_group_region):: {
        endpoint_group_region::: endpoint_group_region,
      },
      with_id(id):: {
        id::: id,
      },
      with_endpoint_configuration(endpoint_configuration):: self + {
        endpoint_configuration: endpoint_configuration,
      },
      endpoint_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param endpoint_id (optional)
        // @param weight (optional)
        new(rname, endpoint_id=null, weight=null):: {
          rname:: rname,
          [if endpoint_id != null then 'endpoint_id']: endpoint_id,
          [if weight != null then 'weight']: weight,
        },
      },
    },
    // aws_globalaccelerator_listener - https://www.terraform.io/docs/providers/aws/r/globalaccelerator_listener.html
    aws_globalaccelerator_listener:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param accelerator_arn (required)
      // @param protocol (required)
      // @param client_affinity (optional)
      // @param port_range (required)
      new(rname, accelerator_arn, protocol, port_range, client_affinity=null):: {
        rname:: rname,
        accelerator_arn: accelerator_arn,
        protocol: protocol,
        [if client_affinity != null then 'client_affinity']: client_affinity,
        id:: '${aws_globalaccelerator_listener.%s.id}' % rname,
        port_range: port_range,
      },
      with_id(id):: {
        id::: id,
      },
      port_range:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param from_port (optional)
        // @param to_port (optional)
        new(rname, from_port=null, to_port=null):: {
          rname:: rname,
          [if from_port != null then 'from_port']: from_port,
          [if to_port != null then 'to_port']: to_port,
        },
      },
    },
    // aws_glue_catalog_database - https://www.terraform.io/docs/providers/aws/r/glue_catalog_database.html
    aws_glue_catalog_database:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param location_uri (optional)
      // @param parameters (optional)
      new(rname, name, description=null, location_uri=null, parameters=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if location_uri != null then 'location_uri']: location_uri,
        [if parameters != null then 'parameters']: parameters,
        catalog_id:: '${aws_glue_catalog_database.%s.catalog_id}' % rname,
        id:: '${aws_glue_catalog_database.%s.id}' % rname,
      },
      with_catalog_id(catalog_id):: {
        catalog_id::: catalog_id,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_glue_catalog_table - https://www.terraform.io/docs/providers/aws/r/glue_catalog_table.html
    aws_glue_catalog_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param database_name (required)
      // @param name (required)
      // @param description (optional)
      // @param owner (optional)
      // @param parameters (optional)
      // @param retention (optional)
      // @param table_type (optional)
      // @param view_expanded_text (optional)
      // @param view_original_text (optional)
      new(rname, database_name, name, description=null, owner=null, parameters=null, retention=null, table_type=null, view_expanded_text=null, view_original_text=null):: {
        rname:: rname,
        database_name: database_name,
        name: name,
        [if description != null then 'description']: description,
        [if owner != null then 'owner']: owner,
        [if parameters != null then 'parameters']: parameters,
        [if retention != null then 'retention']: retention,
        [if table_type != null then 'table_type']: table_type,
        [if view_expanded_text != null then 'view_expanded_text']: view_expanded_text,
        [if view_original_text != null then 'view_original_text']: view_original_text,
        catalog_id:: '${aws_glue_catalog_table.%s.catalog_id}' % rname,
        id:: '${aws_glue_catalog_table.%s.id}' % rname,
        partition_keys:: {},
        storage_descriptor:: {},
      },
      with_catalog_id(catalog_id):: {
        catalog_id::: catalog_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_partition_keys(partition_keys):: self + {
        partition_keys: partition_keys,
      },
      partition_keys:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param comment (optional)
        // @param type (optional)
        new(rname, name, comment=null, type=null):: {
          rname:: rname,
          name: name,
          [if comment != null then 'comment']: comment,
          [if type != null then 'type']: type,
        },
      },
      with_storage_descriptor(storage_descriptor):: self + {
        storage_descriptor: storage_descriptor,
      },
      storage_descriptor:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_columns (optional)
        // @param compressed (optional)
        // @param input_format (optional)
        // @param location (optional)
        // @param number_of_buckets (optional)
        // @param output_format (optional)
        // @param parameters (optional)
        // @param stored_as_sub_directories (optional)
        new(rname, bucket_columns=null, compressed=null, input_format=null, location=null, number_of_buckets=null, output_format=null, parameters=null, stored_as_sub_directories=null):: {
          rname:: rname,
          [if bucket_columns != null then 'bucket_columns']: bucket_columns,
          [if compressed != null then 'compressed']: compressed,
          [if input_format != null then 'input_format']: input_format,
          [if location != null then 'location']: location,
          [if number_of_buckets != null then 'number_of_buckets']: number_of_buckets,
          [if output_format != null then 'output_format']: output_format,
          [if parameters != null then 'parameters']: parameters,
          [if stored_as_sub_directories != null then 'stored_as_sub_directories']: stored_as_sub_directories,
          columns:: {},
          ser_de_info:: {},
          skewed_info:: {},
          sort_columns:: {},
        },
        with_columns(columns):: self + {
          columns: columns,
        },
        columns:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (required)
          // @param comment (optional)
          // @param type (optional)
          new(rname, name, comment=null, type=null):: {
            rname:: rname,
            name: name,
            [if comment != null then 'comment']: comment,
            [if type != null then 'type']: type,
          },
        },
        with_ser_de_info(ser_de_info):: self + {
          ser_de_info: ser_de_info,
        },
        ser_de_info:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param name (optional)
          // @param parameters (optional)
          // @param serialization_library (optional)
          new(rname, name=null, parameters=null, serialization_library=null):: {
            rname:: rname,
            [if name != null then 'name']: name,
            [if parameters != null then 'parameters']: parameters,
            [if serialization_library != null then 'serialization_library']: serialization_library,
          },
        },
        with_skewed_info(skewed_info):: self + {
          skewed_info: skewed_info,
        },
        skewed_info:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param skewed_column_names (optional)
          // @param skewed_column_value_location_maps (optional)
          // @param skewed_column_values (optional)
          new(rname, skewed_column_names=null, skewed_column_value_location_maps=null, skewed_column_values=null):: {
            rname:: rname,
            [if skewed_column_names != null then 'skewed_column_names']: skewed_column_names,
            [if skewed_column_value_location_maps != null then 'skewed_column_value_location_maps']: skewed_column_value_location_maps,
            [if skewed_column_values != null then 'skewed_column_values']: skewed_column_values,
          },
        },
        with_sort_columns(sort_columns):: self + {
          sort_columns: sort_columns,
        },
        sort_columns:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param column (required)
          // @param sort_order (required)
          new(rname, column, sort_order):: {
            rname:: rname,
            column: column,
            sort_order: sort_order,
          },
        },
      },
    },
    // aws_glue_classifier - https://www.terraform.io/docs/providers/aws/r/glue_classifier.html
    aws_glue_classifier:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_glue_classifier.%s.id}' % rname,
        csv_classifier:: {},
        grok_classifier:: {},
        json_classifier:: {},
        xml_classifier:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_csv_classifier(csv_classifier):: self + {
        csv_classifier: csv_classifier,
      },
      csv_classifier:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_single_column (optional)
        // @param contains_header (optional)
        // @param delimiter (optional)
        // @param disable_value_trimming (optional)
        // @param header (optional)
        // @param quote_symbol (optional)
        new(rname, allow_single_column=null, contains_header=null, delimiter=null, disable_value_trimming=null, header=null, quote_symbol=null):: {
          rname:: rname,
          [if allow_single_column != null then 'allow_single_column']: allow_single_column,
          [if contains_header != null then 'contains_header']: contains_header,
          [if delimiter != null then 'delimiter']: delimiter,
          [if disable_value_trimming != null then 'disable_value_trimming']: disable_value_trimming,
          [if header != null then 'header']: header,
          [if quote_symbol != null then 'quote_symbol']: quote_symbol,
        },
      },
      with_grok_classifier(grok_classifier):: self + {
        grok_classifier: grok_classifier,
      },
      grok_classifier:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param classification (required)
        // @param grok_pattern (required)
        // @param custom_patterns (optional)
        new(rname, classification, grok_pattern, custom_patterns=null):: {
          rname:: rname,
          classification: classification,
          grok_pattern: grok_pattern,
          [if custom_patterns != null then 'custom_patterns']: custom_patterns,
        },
      },
      with_json_classifier(json_classifier):: self + {
        json_classifier: json_classifier,
      },
      json_classifier:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param json_path (required)
        new(rname, json_path):: {
          rname:: rname,
          json_path: json_path,
        },
      },
      with_xml_classifier(xml_classifier):: self + {
        xml_classifier: xml_classifier,
      },
      xml_classifier:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param classification (required)
        // @param row_tag (required)
        new(rname, classification, row_tag):: {
          rname:: rname,
          classification: classification,
          row_tag: row_tag,
        },
      },
    },
    // aws_glue_connection - https://www.terraform.io/docs/providers/aws/r/glue_connection.html
    aws_glue_connection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param connection_properties (required)
      // @param name (required)
      // @param connection_type (optional)
      // @param description (optional)
      // @param match_criteria (optional)
      new(rname, connection_properties, name, connection_type=null, description=null, match_criteria=null):: {
        rname:: rname,
        connection_properties: connection_properties,
        name: name,
        [if connection_type != null then 'connection_type']: connection_type,
        [if description != null then 'description']: description,
        [if match_criteria != null then 'match_criteria']: match_criteria,
        catalog_id:: '${aws_glue_connection.%s.catalog_id}' % rname,
        id:: '${aws_glue_connection.%s.id}' % rname,
        physical_connection_requirements:: {},
      },
      with_catalog_id(catalog_id):: {
        catalog_id::: catalog_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_physical_connection_requirements(physical_connection_requirements):: self + {
        physical_connection_requirements: physical_connection_requirements,
      },
      physical_connection_requirements:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param availability_zone (optional)
        // @param security_group_id_list (optional)
        // @param subnet_id (optional)
        new(rname, availability_zone=null, security_group_id_list=null, subnet_id=null):: {
          rname:: rname,
          [if availability_zone != null then 'availability_zone']: availability_zone,
          [if security_group_id_list != null then 'security_group_id_list']: security_group_id_list,
          [if subnet_id != null then 'subnet_id']: subnet_id,
        },
      },
    },
    // aws_glue_crawler - https://www.terraform.io/docs/providers/aws/r/glue_crawler.html
    aws_glue_crawler:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param database_name (required)
      // @param name (required)
      // @param role (required)
      // @param classifiers (optional)
      // @param configuration (optional)
      // @param description (optional)
      // @param schedule (optional)
      // @param security_configuration (optional)
      // @param table_prefix (optional)
      // @param tags (optional)
      new(rname, database_name, name, role, classifiers=null, configuration=null, description=null, schedule=null, security_configuration=null, table_prefix=null, tags=null):: {
        rname:: rname,
        database_name: database_name,
        name: name,
        role: role,
        [if classifiers != null then 'classifiers']: classifiers,
        [if configuration != null then 'configuration']: configuration,
        [if description != null then 'description']: description,
        [if schedule != null then 'schedule']: schedule,
        [if security_configuration != null then 'security_configuration']: security_configuration,
        [if table_prefix != null then 'table_prefix']: table_prefix,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_glue_crawler.%s.arn}' % rname,
        id:: '${aws_glue_crawler.%s.id}' % rname,
        catalog_target:: {},
        dynamodb_target:: {},
        jdbc_target:: {},
        s3_target:: {},
        schema_change_policy:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_catalog_target(catalog_target):: self + {
        catalog_target: catalog_target,
      },
      catalog_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param database_name (required)
        // @param tables (required)
        new(rname, database_name, tables):: {
          rname:: rname,
          database_name: database_name,
          tables: tables,
        },
      },
      with_dynamodb_target(dynamodb_target):: self + {
        dynamodb_target: dynamodb_target,
      },
      dynamodb_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param path (required)
        new(rname, path):: {
          rname:: rname,
          path: path,
        },
      },
      with_jdbc_target(jdbc_target):: self + {
        jdbc_target: jdbc_target,
      },
      jdbc_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param connection_name (required)
        // @param path (required)
        // @param exclusions (optional)
        new(rname, connection_name, path, exclusions=null):: {
          rname:: rname,
          connection_name: connection_name,
          path: path,
          [if exclusions != null then 'exclusions']: exclusions,
        },
      },
      with_s3_target(s3_target):: self + {
        s3_target: s3_target,
      },
      s3_target:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param path (required)
        // @param exclusions (optional)
        new(rname, path, exclusions=null):: {
          rname:: rname,
          path: path,
          [if exclusions != null then 'exclusions']: exclusions,
        },
      },
      with_schema_change_policy(schema_change_policy):: self + {
        schema_change_policy: schema_change_policy,
      },
      schema_change_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete_behavior (optional)
        // @param update_behavior (optional)
        new(rname, delete_behavior=null, update_behavior=null):: {
          rname:: rname,
          [if delete_behavior != null then 'delete_behavior']: delete_behavior,
          [if update_behavior != null then 'update_behavior']: update_behavior,
        },
      },
    },
    // aws_glue_job - https://www.terraform.io/docs/providers/aws/r/glue_job.html
    aws_glue_job:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param role_arn (required)
      // @param connections (optional)
      // @param default_arguments (optional)
      // @param description (optional)
      // @param max_retries (optional)
      // @param number_of_workers (optional)
      // @param security_configuration (optional)
      // @param tags (optional)
      // @param timeout (optional)
      // @param worker_type (optional)
      // @param command (required)
      new(rname, name, role_arn, command, connections=null, default_arguments=null, description=null, max_retries=null, number_of_workers=null, security_configuration=null, tags=null, timeout=null, worker_type=null):: {
        rname:: rname,
        name: name,
        role_arn: role_arn,
        [if connections != null then 'connections']: connections,
        [if default_arguments != null then 'default_arguments']: default_arguments,
        [if description != null then 'description']: description,
        [if max_retries != null then 'max_retries']: max_retries,
        [if number_of_workers != null then 'number_of_workers']: number_of_workers,
        [if security_configuration != null then 'security_configuration']: security_configuration,
        [if tags != null then 'tags']: tags,
        [if timeout != null then 'timeout']: timeout,
        [if worker_type != null then 'worker_type']: worker_type,
        allocated_capacity:: '${aws_glue_job.%s.allocated_capacity}' % rname,
        arn:: '${aws_glue_job.%s.arn}' % rname,
        glue_version:: '${aws_glue_job.%s.glue_version}' % rname,
        id:: '${aws_glue_job.%s.id}' % rname,
        max_capacity:: '${aws_glue_job.%s.max_capacity}' % rname,
        command: command,
        execution_property:: {},
        notification_property:: {},
      },
      with_allocated_capacity(allocated_capacity):: {
        allocated_capacity::: allocated_capacity,
      },
      with_glue_version(glue_version):: {
        glue_version::: glue_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_max_capacity(max_capacity):: {
        max_capacity::: max_capacity,
      },
      command:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param script_location (required)
        // @param name (optional)
        new(rname, script_location, name=null):: {
          rname:: rname,
          script_location: script_location,
          [if name != null then 'name']: name,
          python_version:: '${aws_glue_job.%s.command.python_version}' % rname,
        },
        with_python_version(python_version):: {
          python_version::: python_version,
        },
      },
      with_execution_property(execution_property):: self + {
        execution_property: execution_property,
      },
      execution_property:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param max_concurrent_runs (optional)
        new(rname, max_concurrent_runs=null):: {
          rname:: rname,
          [if max_concurrent_runs != null then 'max_concurrent_runs']: max_concurrent_runs,
        },
      },
      with_notification_property(notification_property):: self + {
        notification_property: notification_property,
      },
      notification_property:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param notify_delay_after (optional)
        new(rname, notify_delay_after=null):: {
          rname:: rname,
          [if notify_delay_after != null then 'notify_delay_after']: notify_delay_after,
        },
      },
    },
    // aws_glue_security_configuration - https://www.terraform.io/docs/providers/aws/r/glue_security_configuration.html
    aws_glue_security_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param encryption_configuration (required)
      new(rname, name, encryption_configuration):: {
        rname:: rname,
        name: name,
        id:: '${aws_glue_security_configuration.%s.id}' % rname,
        encryption_configuration: encryption_configuration,
      },
      with_id(id):: {
        id::: id,
      },
      encryption_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cloudwatch_encryption (required)
        // @param job_bookmarks_encryption (required)
        // @param s3_encryption (required)
        new(rname, cloudwatch_encryption, job_bookmarks_encryption, s3_encryption):: {
          rname:: rname,
          cloudwatch_encryption: cloudwatch_encryption,
          job_bookmarks_encryption: job_bookmarks_encryption,
          s3_encryption: s3_encryption,
        },
        cloudwatch_encryption:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param cloudwatch_encryption_mode (optional)
          // @param kms_key_arn (optional)
          new(rname, cloudwatch_encryption_mode=null, kms_key_arn=null):: {
            rname:: rname,
            [if cloudwatch_encryption_mode != null then 'cloudwatch_encryption_mode']: cloudwatch_encryption_mode,
            [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          },
        },
        job_bookmarks_encryption:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param job_bookmarks_encryption_mode (optional)
          // @param kms_key_arn (optional)
          new(rname, job_bookmarks_encryption_mode=null, kms_key_arn=null):: {
            rname:: rname,
            [if job_bookmarks_encryption_mode != null then 'job_bookmarks_encryption_mode']: job_bookmarks_encryption_mode,
            [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          },
        },
        s3_encryption:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param kms_key_arn (optional)
          // @param s3_encryption_mode (optional)
          new(rname, kms_key_arn=null, s3_encryption_mode=null):: {
            rname:: rname,
            [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
            [if s3_encryption_mode != null then 's3_encryption_mode']: s3_encryption_mode,
          },
        },
      },
    },
    // aws_glue_trigger - https://www.terraform.io/docs/providers/aws/r/glue_trigger.html
    aws_glue_trigger:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param type (required)
      // @param description (optional)
      // @param enabled (optional)
      // @param schedule (optional)
      // @param tags (optional)
      // @param workflow_name (optional)
      // @param actions (required)
      new(rname, name, type, actions, description=null, enabled=null, schedule=null, tags=null, workflow_name=null):: {
        rname:: rname,
        name: name,
        type: type,
        [if description != null then 'description']: description,
        [if enabled != null then 'enabled']: enabled,
        [if schedule != null then 'schedule']: schedule,
        [if tags != null then 'tags']: tags,
        [if workflow_name != null then 'workflow_name']: workflow_name,
        arn:: '${aws_glue_trigger.%s.arn}' % rname,
        id:: '${aws_glue_trigger.%s.id}' % rname,
        actions: actions,
        predicate:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      actions:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param arguments (optional)
        // @param crawler_name (optional)
        // @param job_name (optional)
        // @param timeout (optional)
        new(rname, arguments=null, crawler_name=null, job_name=null, timeout=null):: {
          rname:: rname,
          [if arguments != null then 'arguments']: arguments,
          [if crawler_name != null then 'crawler_name']: crawler_name,
          [if job_name != null then 'job_name']: job_name,
          [if timeout != null then 'timeout']: timeout,
        },
      },
      with_predicate(predicate):: self + {
        predicate: predicate,
      },
      predicate:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param logical (optional)
        // @param conditions (required)
        new(rname, conditions, logical=null):: {
          rname:: rname,
          [if logical != null then 'logical']: logical,
          conditions: conditions,
        },
        conditions:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param crawl_state (optional)
          // @param crawler_name (optional)
          // @param job_name (optional)
          // @param logical_operator (optional)
          // @param state (optional)
          new(rname, crawl_state=null, crawler_name=null, job_name=null, logical_operator=null, state=null):: {
            rname:: rname,
            [if crawl_state != null then 'crawl_state']: crawl_state,
            [if crawler_name != null then 'crawler_name']: crawler_name,
            [if job_name != null then 'job_name']: job_name,
            [if logical_operator != null then 'logical_operator']: logical_operator,
            [if state != null then 'state']: state,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_glue_workflow - https://www.terraform.io/docs/providers/aws/r/glue_workflow.html
    aws_glue_workflow:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param default_run_properties (optional)
      // @param description (optional)
      // @param name (optional)
      new(rname, default_run_properties=null, description=null, name=null):: {
        rname:: rname,
        [if default_run_properties != null then 'default_run_properties']: default_run_properties,
        [if description != null then 'description']: description,
        [if name != null then 'name']: name,
        id:: '${aws_glue_workflow.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_guardduty_detector - https://www.terraform.io/docs/providers/aws/r/guardduty_detector.html
    aws_guardduty_detector:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enable (optional)
      new(rname, enable=null):: {
        rname:: rname,
        [if enable != null then 'enable']: enable,
        account_id:: '${aws_guardduty_detector.%s.account_id}' % rname,
        finding_publishing_frequency:: '${aws_guardduty_detector.%s.finding_publishing_frequency}' % rname,
        id:: '${aws_guardduty_detector.%s.id}' % rname,
      },
      with_finding_publishing_frequency(finding_publishing_frequency):: {
        finding_publishing_frequency::: finding_publishing_frequency,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_guardduty_invite_accepter - https://www.terraform.io/docs/providers/aws/r/guardduty_invite_accepter.html
    aws_guardduty_invite_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param detector_id (required)
      // @param master_account_id (required)
      new(rname, detector_id, master_account_id):: {
        rname:: rname,
        detector_id: detector_id,
        master_account_id: master_account_id,
        id:: '${aws_guardduty_invite_accepter.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_guardduty_ipset - https://www.terraform.io/docs/providers/aws/r/guardduty_ipset.html
    aws_guardduty_ipset:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param activate (required)
      // @param detector_id (required)
      // @param format (required)
      // @param location (required)
      // @param name (required)
      new(rname, activate, detector_id, format, location, name):: {
        rname:: rname,
        activate: activate,
        detector_id: detector_id,
        format: format,
        location: location,
        name: name,
        id:: '${aws_guardduty_ipset.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_guardduty_member - https://www.terraform.io/docs/providers/aws/r/guardduty_member.html
    aws_guardduty_member:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param account_id (required)
      // @param detector_id (required)
      // @param email (required)
      // @param disable_email_notification (optional)
      // @param invitation_message (optional)
      // @param invite (optional)
      new(rname, account_id, detector_id, email, disable_email_notification=null, invitation_message=null, invite=null):: {
        rname:: rname,
        account_id: account_id,
        detector_id: detector_id,
        email: email,
        [if disable_email_notification != null then 'disable_email_notification']: disable_email_notification,
        [if invitation_message != null then 'invitation_message']: invitation_message,
        [if invite != null then 'invite']: invite,
        id:: '${aws_guardduty_member.%s.id}' % rname,
        relationship_status:: '${aws_guardduty_member.%s.relationship_status}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param update (optional)
        new(rname, create=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_guardduty_threatintelset - https://www.terraform.io/docs/providers/aws/r/guardduty_threatintelset.html
    aws_guardduty_threatintelset:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param activate (required)
      // @param detector_id (required)
      // @param format (required)
      // @param location (required)
      // @param name (required)
      new(rname, activate, detector_id, format, location, name):: {
        rname:: rname,
        activate: activate,
        detector_id: detector_id,
        format: format,
        location: location,
        name: name,
        id:: '${aws_guardduty_threatintelset.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_access_key - https://www.terraform.io/docs/providers/aws/r/iam_access_key.html
    aws_iam_access_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param user (required)
      // @param pgp_key (optional)
      new(rname, user, pgp_key=null):: {
        rname:: rname,
        user: user,
        [if pgp_key != null then 'pgp_key']: pgp_key,
        encrypted_secret:: '${aws_iam_access_key.%s.encrypted_secret}' % rname,
        id:: '${aws_iam_access_key.%s.id}' % rname,
        key_fingerprint:: '${aws_iam_access_key.%s.key_fingerprint}' % rname,
        secret:: '${aws_iam_access_key.%s.secret}' % rname,
        ses_smtp_password:: '${aws_iam_access_key.%s.ses_smtp_password}' % rname,
        ses_smtp_password_v4:: '${aws_iam_access_key.%s.ses_smtp_password_v4}' % rname,
        status:: '${aws_iam_access_key.%s.status}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_status(status):: {
        status::: status,
      },
    },
    // aws_iam_account_alias - https://www.terraform.io/docs/providers/aws/r/iam_account_alias.html
    aws_iam_account_alias:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param account_alias (required)
      new(rname, account_alias):: {
        rname:: rname,
        account_alias: account_alias,
        id:: '${aws_iam_account_alias.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_account_password_policy - https://www.terraform.io/docs/providers/aws/r/iam_account_password_policy.html
    aws_iam_account_password_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param allow_users_to_change_password (optional)
      // @param minimum_password_length (optional)
      new(rname, allow_users_to_change_password=null, minimum_password_length=null):: {
        rname:: rname,
        [if allow_users_to_change_password != null then 'allow_users_to_change_password']: allow_users_to_change_password,
        [if minimum_password_length != null then 'minimum_password_length']: minimum_password_length,
        expire_passwords:: '${aws_iam_account_password_policy.%s.expire_passwords}' % rname,
        hard_expiry:: '${aws_iam_account_password_policy.%s.hard_expiry}' % rname,
        id:: '${aws_iam_account_password_policy.%s.id}' % rname,
        max_password_age:: '${aws_iam_account_password_policy.%s.max_password_age}' % rname,
        password_reuse_prevention:: '${aws_iam_account_password_policy.%s.password_reuse_prevention}' % rname,
        require_lowercase_characters:: '${aws_iam_account_password_policy.%s.require_lowercase_characters}' % rname,
        require_numbers:: '${aws_iam_account_password_policy.%s.require_numbers}' % rname,
        require_symbols:: '${aws_iam_account_password_policy.%s.require_symbols}' % rname,
        require_uppercase_characters:: '${aws_iam_account_password_policy.%s.require_uppercase_characters}' % rname,
      },
      with_hard_expiry(hard_expiry):: {
        hard_expiry::: hard_expiry,
      },
      with_id(id):: {
        id::: id,
      },
      with_max_password_age(max_password_age):: {
        max_password_age::: max_password_age,
      },
      with_password_reuse_prevention(password_reuse_prevention):: {
        password_reuse_prevention::: password_reuse_prevention,
      },
      with_require_lowercase_characters(require_lowercase_characters):: {
        require_lowercase_characters::: require_lowercase_characters,
      },
      with_require_numbers(require_numbers):: {
        require_numbers::: require_numbers,
      },
      with_require_symbols(require_symbols):: {
        require_symbols::: require_symbols,
      },
      with_require_uppercase_characters(require_uppercase_characters):: {
        require_uppercase_characters::: require_uppercase_characters,
      },
    },
    // aws_iam_group - https://www.terraform.io/docs/providers/aws/r/iam_group.html
    aws_iam_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param path (optional)
      new(rname, name, path=null):: {
        rname:: rname,
        name: name,
        [if path != null then 'path']: path,
        arn:: '${aws_iam_group.%s.arn}' % rname,
        id:: '${aws_iam_group.%s.id}' % rname,
        unique_id:: '${aws_iam_group.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_group_membership - https://www.terraform.io/docs/providers/aws/r/iam_group_membership.html
    aws_iam_group_membership:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param group (required)
      // @param name (required)
      // @param users (required)
      new(rname, group, name, users):: {
        rname:: rname,
        group: group,
        name: name,
        users: users,
        id:: '${aws_iam_group_membership.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_group_policy - https://www.terraform.io/docs/providers/aws/r/iam_group_policy.html
    aws_iam_group_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param group (required)
      // @param policy (required)
      // @param name_prefix (optional)
      new(rname, group, policy, name_prefix=null):: {
        rname:: rname,
        group: group,
        policy: policy,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        id:: '${aws_iam_group_policy.%s.id}' % rname,
        name:: '${aws_iam_group_policy.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_group_policy_attachment - https://www.terraform.io/docs/providers/aws/r/iam_group_policy_attachment.html
    aws_iam_group_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param group (required)
      // @param policy_arn (required)
      new(rname, group, policy_arn):: {
        rname:: rname,
        group: group,
        policy_arn: policy_arn,
        id:: '${aws_iam_group_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_instance_profile - https://www.terraform.io/docs/providers/aws/r/iam_instance_profile.html
    aws_iam_instance_profile:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name_prefix (optional)
      // @param path (optional)
      new(rname, name_prefix=null, path=null):: {
        rname:: rname,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if path != null then 'path']: path,
        arn:: '${aws_iam_instance_profile.%s.arn}' % rname,
        create_date:: '${aws_iam_instance_profile.%s.create_date}' % rname,
        id:: '${aws_iam_instance_profile.%s.id}' % rname,
        name:: '${aws_iam_instance_profile.%s.name}' % rname,
        role:: '${aws_iam_instance_profile.%s.role}' % rname,
        roles:: '${aws_iam_instance_profile.%s.roles}' % rname,
        unique_id:: '${aws_iam_instance_profile.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_role(role):: {
        role::: role,
      },
      with_roles(roles):: {
        roles::: roles,
      },
    },
    // aws_iam_openid_connect_provider - https://www.terraform.io/docs/providers/aws/r/iam_openid_connect_provider.html
    aws_iam_openid_connect_provider:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param client_id_list (required)
      // @param thumbprint_list (required)
      // @param url (required)
      new(rname, client_id_list, thumbprint_list, url):: {
        rname:: rname,
        client_id_list: client_id_list,
        thumbprint_list: thumbprint_list,
        url: url,
        arn:: '${aws_iam_openid_connect_provider.%s.arn}' % rname,
        id:: '${aws_iam_openid_connect_provider.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_policy - https://www.terraform.io/docs/providers/aws/r/iam_policy.html
    aws_iam_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param description (optional)
      // @param name_prefix (optional)
      // @param path (optional)
      new(rname, policy, description=null, name_prefix=null, path=null):: {
        rname:: rname,
        policy: policy,
        [if description != null then 'description']: description,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if path != null then 'path']: path,
        arn:: '${aws_iam_policy.%s.arn}' % rname,
        id:: '${aws_iam_policy.%s.id}' % rname,
        name:: '${aws_iam_policy.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_policy_attachment - https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html
    aws_iam_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param policy_arn (required)
      // @param groups (optional)
      // @param roles (optional)
      // @param users (optional)
      new(rname, name, policy_arn, groups=null, roles=null, users=null):: {
        rname:: rname,
        name: name,
        policy_arn: policy_arn,
        [if groups != null then 'groups']: groups,
        [if roles != null then 'roles']: roles,
        [if users != null then 'users']: users,
        id:: '${aws_iam_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_role - https://www.terraform.io/docs/providers/aws/r/iam_role.html
    aws_iam_role:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param assume_role_policy (required)
      // @param description (optional)
      // @param force_detach_policies (optional)
      // @param max_session_duration (optional)
      // @param name_prefix (optional)
      // @param path (optional)
      // @param permissions_boundary (optional)
      // @param tags (optional)
      new(rname, assume_role_policy, description=null, force_detach_policies=null, max_session_duration=null, name_prefix=null, path=null, permissions_boundary=null, tags=null):: {
        rname:: rname,
        assume_role_policy: assume_role_policy,
        [if description != null then 'description']: description,
        [if force_detach_policies != null then 'force_detach_policies']: force_detach_policies,
        [if max_session_duration != null then 'max_session_duration']: max_session_duration,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if path != null then 'path']: path,
        [if permissions_boundary != null then 'permissions_boundary']: permissions_boundary,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_iam_role.%s.arn}' % rname,
        create_date:: '${aws_iam_role.%s.create_date}' % rname,
        id:: '${aws_iam_role.%s.id}' % rname,
        name:: '${aws_iam_role.%s.name}' % rname,
        unique_id:: '${aws_iam_role.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_role_policy - https://www.terraform.io/docs/providers/aws/r/iam_role_policy.html
    aws_iam_role_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param role (required)
      // @param name_prefix (optional)
      new(rname, policy, role, name_prefix=null):: {
        rname:: rname,
        policy: policy,
        role: role,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        id:: '${aws_iam_role_policy.%s.id}' % rname,
        name:: '${aws_iam_role_policy.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_role_policy_attachment - https://www.terraform.io/docs/providers/aws/r/iam_role_policy_attachment.html
    aws_iam_role_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy_arn (required)
      // @param role (required)
      new(rname, policy_arn, role):: {
        rname:: rname,
        policy_arn: policy_arn,
        role: role,
        id:: '${aws_iam_role_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_saml_provider - https://www.terraform.io/docs/providers/aws/r/iam_saml_provider.html
    aws_iam_saml_provider:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param saml_metadata_document (required)
      new(rname, name, saml_metadata_document):: {
        rname:: rname,
        name: name,
        saml_metadata_document: saml_metadata_document,
        arn:: '${aws_iam_saml_provider.%s.arn}' % rname,
        id:: '${aws_iam_saml_provider.%s.id}' % rname,
        valid_until:: '${aws_iam_saml_provider.%s.valid_until}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_server_certificate - https://www.terraform.io/docs/providers/aws/r/iam_server_certificate.html
    aws_iam_server_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_body (required)
      // @param private_key (required)
      // @param certificate_chain (optional)
      // @param name_prefix (optional)
      // @param path (optional)
      new(rname, certificate_body, private_key, certificate_chain=null, name_prefix=null, path=null):: {
        rname:: rname,
        certificate_body: certificate_body,
        private_key: private_key,
        [if certificate_chain != null then 'certificate_chain']: certificate_chain,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if path != null then 'path']: path,
        arn:: '${aws_iam_server_certificate.%s.arn}' % rname,
        id:: '${aws_iam_server_certificate.%s.id}' % rname,
        name:: '${aws_iam_server_certificate.%s.name}' % rname,
      },
      with_arn(arn):: {
        arn::: arn,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_service_linked_role - https://www.terraform.io/docs/providers/aws/r/iam_service_linked_role.html
    aws_iam_service_linked_role:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param aws_service_name (required)
      // @param custom_suffix (optional)
      // @param description (optional)
      new(rname, aws_service_name, custom_suffix=null, description=null):: {
        rname:: rname,
        aws_service_name: aws_service_name,
        [if custom_suffix != null then 'custom_suffix']: custom_suffix,
        [if description != null then 'description']: description,
        arn:: '${aws_iam_service_linked_role.%s.arn}' % rname,
        create_date:: '${aws_iam_service_linked_role.%s.create_date}' % rname,
        id:: '${aws_iam_service_linked_role.%s.id}' % rname,
        name:: '${aws_iam_service_linked_role.%s.name}' % rname,
        path:: '${aws_iam_service_linked_role.%s.path}' % rname,
        unique_id:: '${aws_iam_service_linked_role.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_user - https://www.terraform.io/docs/providers/aws/r/iam_user.html
    aws_iam_user:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param force_destroy (optional)
      // @param path (optional)
      // @param permissions_boundary (optional)
      // @param tags (optional)
      new(rname, name, force_destroy=null, path=null, permissions_boundary=null, tags=null):: {
        rname:: rname,
        name: name,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if path != null then 'path']: path,
        [if permissions_boundary != null then 'permissions_boundary']: permissions_boundary,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_iam_user.%s.arn}' % rname,
        id:: '${aws_iam_user.%s.id}' % rname,
        unique_id:: '${aws_iam_user.%s.unique_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_user_group_membership - https://www.terraform.io/docs/providers/aws/r/iam_user_group_membership.html
    aws_iam_user_group_membership:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param groups (required)
      // @param user (required)
      new(rname, groups, user):: {
        rname:: rname,
        groups: groups,
        user: user,
        id:: '${aws_iam_user_group_membership.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_user_login_profile - https://www.terraform.io/docs/providers/aws/r/iam_user_login_profile.html
    aws_iam_user_login_profile:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param pgp_key (required)
      // @param user (required)
      // @param password_length (optional)
      // @param password_reset_required (optional)
      new(rname, pgp_key, user, password_length=null, password_reset_required=null):: {
        rname:: rname,
        pgp_key: pgp_key,
        user: user,
        [if password_length != null then 'password_length']: password_length,
        [if password_reset_required != null then 'password_reset_required']: password_reset_required,
        encrypted_password:: '${aws_iam_user_login_profile.%s.encrypted_password}' % rname,
        id:: '${aws_iam_user_login_profile.%s.id}' % rname,
        key_fingerprint:: '${aws_iam_user_login_profile.%s.key_fingerprint}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_user_policy - https://www.terraform.io/docs/providers/aws/r/iam_user_policy.html
    aws_iam_user_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param user (required)
      // @param name_prefix (optional)
      new(rname, policy, user, name_prefix=null):: {
        rname:: rname,
        policy: policy,
        user: user,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        id:: '${aws_iam_user_policy.%s.id}' % rname,
        name:: '${aws_iam_user_policy.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_iam_user_policy_attachment - https://www.terraform.io/docs/providers/aws/r/iam_user_policy_attachment.html
    aws_iam_user_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy_arn (required)
      // @param user (required)
      new(rname, policy_arn, user):: {
        rname:: rname,
        policy_arn: policy_arn,
        user: user,
        id:: '${aws_iam_user_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iam_user_ssh_key - https://www.terraform.io/docs/providers/aws/r/iam_user_ssh_key.html
    aws_iam_user_ssh_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param encoding (required)
      // @param public_key (required)
      // @param username (required)
      new(rname, encoding, public_key, username):: {
        rname:: rname,
        encoding: encoding,
        public_key: public_key,
        username: username,
        fingerprint:: '${aws_iam_user_ssh_key.%s.fingerprint}' % rname,
        id:: '${aws_iam_user_ssh_key.%s.id}' % rname,
        ssh_public_key_id:: '${aws_iam_user_ssh_key.%s.ssh_public_key_id}' % rname,
        status:: '${aws_iam_user_ssh_key.%s.status}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_status(status):: {
        status::: status,
      },
    },
    // aws_inspector_assessment_target - https://www.terraform.io/docs/providers/aws/r/inspector_assessment_target.html
    aws_inspector_assessment_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param resource_group_arn (optional)
      new(rname, name, resource_group_arn=null):: {
        rname:: rname,
        name: name,
        [if resource_group_arn != null then 'resource_group_arn']: resource_group_arn,
        arn:: '${aws_inspector_assessment_target.%s.arn}' % rname,
        id:: '${aws_inspector_assessment_target.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_inspector_assessment_template - https://www.terraform.io/docs/providers/aws/r/inspector_assessment_template.html
    aws_inspector_assessment_template:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param duration (required)
      // @param name (required)
      // @param rules_package_arns (required)
      // @param target_arn (required)
      new(rname, duration, name, rules_package_arns, target_arn):: {
        rname:: rname,
        duration: duration,
        name: name,
        rules_package_arns: rules_package_arns,
        target_arn: target_arn,
        arn:: '${aws_inspector_assessment_template.%s.arn}' % rname,
        id:: '${aws_inspector_assessment_template.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_inspector_resource_group - https://www.terraform.io/docs/providers/aws/r/inspector_resource_group.html
    aws_inspector_resource_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param tags (required)
      new(rname, tags):: {
        rname:: rname,
        tags: tags,
        arn:: '${aws_inspector_resource_group.%s.arn}' % rname,
        id:: '${aws_inspector_resource_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_instance - https://www.terraform.io/docs/providers/aws/r/instance.html
    aws_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param ami (required)
      // @param instance_type (required)
      // @param disable_api_termination (optional)
      // @param ebs_optimized (optional)
      // @param get_password_data (optional)
      // @param hibernation (optional)
      // @param iam_instance_profile (optional)
      // @param instance_initiated_shutdown_behavior (optional)
      // @param monitoring (optional)
      // @param source_dest_check (optional)
      // @param tags (optional)
      // @param user_data (optional)
      // @param user_data_base64 (optional)
      new(rname, ami, instance_type, disable_api_termination=null, ebs_optimized=null, get_password_data=null, hibernation=null, iam_instance_profile=null, instance_initiated_shutdown_behavior=null, monitoring=null, source_dest_check=null, tags=null, user_data=null, user_data_base64=null):: {
        rname:: rname,
        ami: ami,
        instance_type: instance_type,
        [if disable_api_termination != null then 'disable_api_termination']: disable_api_termination,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if get_password_data != null then 'get_password_data']: get_password_data,
        [if hibernation != null then 'hibernation']: hibernation,
        [if iam_instance_profile != null then 'iam_instance_profile']: iam_instance_profile,
        [if instance_initiated_shutdown_behavior != null then 'instance_initiated_shutdown_behavior']: instance_initiated_shutdown_behavior,
        [if monitoring != null then 'monitoring']: monitoring,
        [if source_dest_check != null then 'source_dest_check']: source_dest_check,
        [if tags != null then 'tags']: tags,
        [if user_data != null then 'user_data']: user_data,
        [if user_data_base64 != null then 'user_data_base64']: user_data_base64,
        arn:: '${aws_instance.%s.arn}' % rname,
        associate_public_ip_address:: '${aws_instance.%s.associate_public_ip_address}' % rname,
        availability_zone:: '${aws_instance.%s.availability_zone}' % rname,
        cpu_core_count:: '${aws_instance.%s.cpu_core_count}' % rname,
        cpu_threads_per_core:: '${aws_instance.%s.cpu_threads_per_core}' % rname,
        host_id:: '${aws_instance.%s.host_id}' % rname,
        id:: '${aws_instance.%s.id}' % rname,
        instance_state:: '${aws_instance.%s.instance_state}' % rname,
        ipv6_address_count:: '${aws_instance.%s.ipv6_address_count}' % rname,
        ipv6_addresses:: '${aws_instance.%s.ipv6_addresses}' % rname,
        key_name:: '${aws_instance.%s.key_name}' % rname,
        network_interface_id:: '${aws_instance.%s.network_interface_id}' % rname,
        password_data:: '${aws_instance.%s.password_data}' % rname,
        placement_group:: '${aws_instance.%s.placement_group}' % rname,
        primary_network_interface_id:: '${aws_instance.%s.primary_network_interface_id}' % rname,
        private_dns:: '${aws_instance.%s.private_dns}' % rname,
        private_ip:: '${aws_instance.%s.private_ip}' % rname,
        public_dns:: '${aws_instance.%s.public_dns}' % rname,
        public_ip:: '${aws_instance.%s.public_ip}' % rname,
        security_groups:: '${aws_instance.%s.security_groups}' % rname,
        subnet_id:: '${aws_instance.%s.subnet_id}' % rname,
        tenancy:: '${aws_instance.%s.tenancy}' % rname,
        volume_tags:: '${aws_instance.%s.volume_tags}' % rname,
        vpc_security_group_ids:: '${aws_instance.%s.vpc_security_group_ids}' % rname,
        credit_specification:: {},
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        network_interface:: {},
        root_block_device:: {},
        timeouts:: {},
      },
      with_associate_public_ip_address(associate_public_ip_address):: {
        associate_public_ip_address::: associate_public_ip_address,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_cpu_core_count(cpu_core_count):: {
        cpu_core_count::: cpu_core_count,
      },
      with_cpu_threads_per_core(cpu_threads_per_core):: {
        cpu_threads_per_core::: cpu_threads_per_core,
      },
      with_host_id(host_id):: {
        host_id::: host_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_ipv6_address_count(ipv6_address_count):: {
        ipv6_address_count::: ipv6_address_count,
      },
      with_ipv6_addresses(ipv6_addresses):: {
        ipv6_addresses::: ipv6_addresses,
      },
      with_key_name(key_name):: {
        key_name::: key_name,
      },
      with_placement_group(placement_group):: {
        placement_group::: placement_group,
      },
      with_private_ip(private_ip):: {
        private_ip::: private_ip,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_subnet_id(subnet_id):: {
        subnet_id::: subnet_id,
      },
      with_tenancy(tenancy):: {
        tenancy::: tenancy,
      },
      with_volume_tags(volume_tags):: {
        volume_tags::: volume_tags,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_credit_specification(credit_specification):: self + {
        credit_specification: credit_specification,
      },
      credit_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cpu_credits (optional)
        new(rname, cpu_credits=null):: {
          rname:: rname,
          [if cpu_credits != null then 'cpu_credits']: cpu_credits,
        },
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param delete_on_termination (optional)
        new(rname, device_name, delete_on_termination=null):: {
          rname:: rname,
          device_name: device_name,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          encrypted:: '${aws_instance.%s.ebs_block_device.encrypted}' % rname,
          iops:: '${aws_instance.%s.ebs_block_device.iops}' % rname,
          kms_key_id:: '${aws_instance.%s.ebs_block_device.kms_key_id}' % rname,
          snapshot_id:: '${aws_instance.%s.ebs_block_device.snapshot_id}' % rname,
          volume_id:: '${aws_instance.%s.ebs_block_device.volume_id}' % rname,
          volume_size:: '${aws_instance.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_instance.%s.ebs_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
        with_snapshot_id(snapshot_id):: {
          snapshot_id::: snapshot_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param no_device (optional)
        // @param virtual_name (optional)
        new(rname, device_name, no_device=null, virtual_name=null):: {
          rname:: rname,
          device_name: device_name,
          [if no_device != null then 'no_device']: no_device,
          [if virtual_name != null then 'virtual_name']: virtual_name,
        },
      },
      with_network_interface(network_interface):: self + {
        network_interface: network_interface,
      },
      network_interface:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_index (required)
        // @param network_interface_id (required)
        // @param delete_on_termination (optional)
        new(rname, device_index, network_interface_id, delete_on_termination=null):: {
          rname:: rname,
          device_index: device_index,
          network_interface_id: network_interface_id,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
        },
      },
      with_root_block_device(root_block_device):: self + {
        root_block_device: root_block_device,
      },
      root_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete_on_termination (optional)
        new(rname, delete_on_termination=null):: {
          rname:: rname,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          encrypted:: '${aws_instance.%s.root_block_device.encrypted}' % rname,
          iops:: '${aws_instance.%s.root_block_device.iops}' % rname,
          kms_key_id:: '${aws_instance.%s.root_block_device.kms_key_id}' % rname,
          volume_id:: '${aws_instance.%s.root_block_device.volume_id}' % rname,
          volume_size:: '${aws_instance.%s.root_block_device.volume_size}' % rname,
          volume_type:: '${aws_instance.%s.root_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_internet_gateway - https://www.terraform.io/docs/providers/aws/r/internet_gateway.html
    aws_internet_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param tags (optional)
      // @param vpc_id (optional)
      new(rname, tags=null, vpc_id=null):: {
        rname:: rname,
        [if tags != null then 'tags']: tags,
        [if vpc_id != null then 'vpc_id']: vpc_id,
        id:: '${aws_internet_gateway.%s.id}' % rname,
        owner_id:: '${aws_internet_gateway.%s.owner_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_certificate - https://www.terraform.io/docs/providers/aws/r/iot_certificate.html
    aws_iot_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param active (required)
      // @param csr (optional)
      new(rname, active, csr=null):: {
        rname:: rname,
        active: active,
        [if csr != null then 'csr']: csr,
        arn:: '${aws_iot_certificate.%s.arn}' % rname,
        certificate_pem:: '${aws_iot_certificate.%s.certificate_pem}' % rname,
        id:: '${aws_iot_certificate.%s.id}' % rname,
        private_key:: '${aws_iot_certificate.%s.private_key}' % rname,
        public_key:: '${aws_iot_certificate.%s.public_key}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_policy - https://www.terraform.io/docs/providers/aws/r/iot_policy.html
    aws_iot_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param policy (required)
      new(rname, name, policy):: {
        rname:: rname,
        name: name,
        policy: policy,
        arn:: '${aws_iot_policy.%s.arn}' % rname,
        default_version_id:: '${aws_iot_policy.%s.default_version_id}' % rname,
        id:: '${aws_iot_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_policy_attachment - https://www.terraform.io/docs/providers/aws/r/iot_policy_attachment.html
    aws_iot_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param target (required)
      new(rname, policy, target):: {
        rname:: rname,
        policy: policy,
        target: target,
        id:: '${aws_iot_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_role_alias - https://www.terraform.io/docs/providers/aws/r/iot_role_alias.html
    aws_iot_role_alias:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param alias (required)
      // @param role_arn (required)
      // @param credential_duration (optional)
      new(rname, alias, role_arn, credential_duration=null):: {
        rname:: rname,
        alias: alias,
        role_arn: role_arn,
        [if credential_duration != null then 'credential_duration']: credential_duration,
        arn:: '${aws_iot_role_alias.%s.arn}' % rname,
        id:: '${aws_iot_role_alias.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_thing - https://www.terraform.io/docs/providers/aws/r/iot_thing.html
    aws_iot_thing:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param attributes (optional)
      // @param thing_type_name (optional)
      new(rname, name, attributes=null, thing_type_name=null):: {
        rname:: rname,
        name: name,
        [if attributes != null then 'attributes']: attributes,
        [if thing_type_name != null then 'thing_type_name']: thing_type_name,
        arn:: '${aws_iot_thing.%s.arn}' % rname,
        default_client_id:: '${aws_iot_thing.%s.default_client_id}' % rname,
        id:: '${aws_iot_thing.%s.id}' % rname,
        version:: '${aws_iot_thing.%s.version}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_thing_principal_attachment - https://www.terraform.io/docs/providers/aws/r/iot_thing_principal_attachment.html
    aws_iot_thing_principal_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param principal (required)
      // @param thing (required)
      new(rname, principal, thing):: {
        rname:: rname,
        principal: principal,
        thing: thing,
        id:: '${aws_iot_thing_principal_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_iot_thing_type - https://www.terraform.io/docs/providers/aws/r/iot_thing_type.html
    aws_iot_thing_type:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param deprecated (optional)
      new(rname, name, deprecated=null):: {
        rname:: rname,
        name: name,
        [if deprecated != null then 'deprecated']: deprecated,
        arn:: '${aws_iot_thing_type.%s.arn}' % rname,
        id:: '${aws_iot_thing_type.%s.id}' % rname,
        properties:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_properties(properties):: self + {
        properties: properties,
      },
      properties:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param description (optional)
        new(rname, description=null):: {
          rname:: rname,
          [if description != null then 'description']: description,
          searchable_attributes:: '${aws_iot_thing_type.%s.properties.searchable_attributes}' % rname,
        },
        with_searchable_attributes(searchable_attributes):: {
          searchable_attributes::: searchable_attributes,
        },
      },
    },
    // aws_iot_topic_rule - https://www.terraform.io/docs/providers/aws/r/iot_topic_rule.html
    aws_iot_topic_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enabled (required)
      // @param name (required)
      // @param sql (required)
      // @param sql_version (required)
      // @param description (optional)
      new(rname, enabled, name, sql, sql_version, description=null):: {
        rname:: rname,
        enabled: enabled,
        name: name,
        sql: sql,
        sql_version: sql_version,
        [if description != null then 'description']: description,
        arn:: '${aws_iot_topic_rule.%s.arn}' % rname,
        id:: '${aws_iot_topic_rule.%s.id}' % rname,
        cloudwatch_alarm:: {},
        cloudwatch_metric:: {},
        dynamodb:: {},
        elasticsearch:: {},
        firehose:: {},
        kinesis:: {},
        lambda:: {},
        republish:: {},
        s3:: {},
        sns:: {},
        sqs:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_cloudwatch_alarm(cloudwatch_alarm):: self + {
        cloudwatch_alarm: cloudwatch_alarm,
      },
      cloudwatch_alarm:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param alarm_name (required)
        // @param role_arn (required)
        // @param state_reason (required)
        // @param state_value (required)
        new(rname, alarm_name, role_arn, state_reason, state_value):: {
          rname:: rname,
          alarm_name: alarm_name,
          role_arn: role_arn,
          state_reason: state_reason,
          state_value: state_value,
        },
      },
      with_cloudwatch_metric(cloudwatch_metric):: self + {
        cloudwatch_metric: cloudwatch_metric,
      },
      cloudwatch_metric:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param metric_name (required)
        // @param metric_namespace (required)
        // @param metric_unit (required)
        // @param metric_value (required)
        // @param role_arn (required)
        // @param metric_timestamp (optional)
        new(rname, metric_name, metric_namespace, metric_unit, metric_value, role_arn, metric_timestamp=null):: {
          rname:: rname,
          metric_name: metric_name,
          metric_namespace: metric_namespace,
          metric_unit: metric_unit,
          metric_value: metric_value,
          role_arn: role_arn,
          [if metric_timestamp != null then 'metric_timestamp']: metric_timestamp,
        },
      },
      with_dynamodb(dynamodb):: self + {
        dynamodb: dynamodb,
      },
      dynamodb:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param hash_key_field (required)
        // @param hash_key_value (required)
        // @param role_arn (required)
        // @param table_name (required)
        // @param hash_key_type (optional)
        // @param payload_field (optional)
        // @param range_key_field (optional)
        // @param range_key_type (optional)
        // @param range_key_value (optional)
        new(rname, hash_key_field, hash_key_value, role_arn, table_name, hash_key_type=null, payload_field=null, range_key_field=null, range_key_type=null, range_key_value=null):: {
          rname:: rname,
          hash_key_field: hash_key_field,
          hash_key_value: hash_key_value,
          role_arn: role_arn,
          table_name: table_name,
          [if hash_key_type != null then 'hash_key_type']: hash_key_type,
          [if payload_field != null then 'payload_field']: payload_field,
          [if range_key_field != null then 'range_key_field']: range_key_field,
          [if range_key_type != null then 'range_key_type']: range_key_type,
          [if range_key_value != null then 'range_key_value']: range_key_value,
        },
      },
      with_elasticsearch(elasticsearch):: self + {
        elasticsearch: elasticsearch,
      },
      elasticsearch:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param endpoint (required)
        // @param id (required)
        // @param index (required)
        // @param role_arn (required)
        // @param type (required)
        new(rname, endpoint, id, index, role_arn, type):: {
          rname:: rname,
          endpoint: endpoint,
          id: id,
          index: index,
          role_arn: role_arn,
          type: type,
        },
      },
      with_firehose(firehose):: self + {
        firehose: firehose,
      },
      firehose:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delivery_stream_name (required)
        // @param role_arn (required)
        // @param separator (optional)
        new(rname, delivery_stream_name, role_arn, separator=null):: {
          rname:: rname,
          delivery_stream_name: delivery_stream_name,
          role_arn: role_arn,
          [if separator != null then 'separator']: separator,
        },
      },
      with_kinesis(kinesis):: self + {
        kinesis: kinesis,
      },
      kinesis:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role_arn (required)
        // @param stream_name (required)
        // @param partition_key (optional)
        new(rname, role_arn, stream_name, partition_key=null):: {
          rname:: rname,
          role_arn: role_arn,
          stream_name: stream_name,
          [if partition_key != null then 'partition_key']: partition_key,
        },
      },
      with_lambda(lambda):: self + {
        lambda: lambda,
      },
      lambda:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param function_arn (required)
        new(rname, function_arn):: {
          rname:: rname,
          function_arn: function_arn,
        },
      },
      with_republish(republish):: self + {
        republish: republish,
      },
      republish:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role_arn (required)
        // @param topic (required)
        new(rname, role_arn, topic):: {
          rname:: rname,
          role_arn: role_arn,
          topic: topic,
        },
      },
      with_s3(s3):: self + {
        s3: s3,
      },
      s3:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_name (required)
        // @param key (required)
        // @param role_arn (required)
        new(rname, bucket_name, key, role_arn):: {
          rname:: rname,
          bucket_name: bucket_name,
          key: key,
          role_arn: role_arn,
        },
      },
      with_sns(sns):: self + {
        sns: sns,
      },
      sns:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role_arn (required)
        // @param target_arn (required)
        // @param message_format (optional)
        new(rname, role_arn, target_arn, message_format=null):: {
          rname:: rname,
          role_arn: role_arn,
          target_arn: target_arn,
          [if message_format != null then 'message_format']: message_format,
        },
      },
      with_sqs(sqs):: self + {
        sqs: sqs,
      },
      sqs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param queue_url (required)
        // @param role_arn (required)
        // @param use_base64 (required)
        new(rname, queue_url, role_arn, use_base64):: {
          rname:: rname,
          queue_url: queue_url,
          role_arn: role_arn,
          use_base64: use_base64,
        },
      },
    },
    // aws_key_pair - https://www.terraform.io/docs/providers/aws/r/key_pair.html
    aws_key_pair:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param public_key (required)
      // @param key_name_prefix (optional)
      // @param tags (optional)
      new(rname, public_key, key_name_prefix=null, tags=null):: {
        rname:: rname,
        public_key: public_key,
        [if key_name_prefix != null then 'key_name_prefix']: key_name_prefix,
        [if tags != null then 'tags']: tags,
        fingerprint:: '${aws_key_pair.%s.fingerprint}' % rname,
        id:: '${aws_key_pair.%s.id}' % rname,
        key_name:: '${aws_key_pair.%s.key_name}' % rname,
        key_pair_id:: '${aws_key_pair.%s.key_pair_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_key_name(key_name):: {
        key_name::: key_name,
      },
    },
    // aws_kinesis_analytics_application - https://www.terraform.io/docs/providers/aws/r/kinesis_analytics_application.html
    aws_kinesis_analytics_application:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param code (optional)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, code=null, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if code != null then 'code']: code,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_kinesis_analytics_application.%s.arn}' % rname,
        create_timestamp:: '${aws_kinesis_analytics_application.%s.create_timestamp}' % rname,
        id:: '${aws_kinesis_analytics_application.%s.id}' % rname,
        last_update_timestamp:: '${aws_kinesis_analytics_application.%s.last_update_timestamp}' % rname,
        status:: '${aws_kinesis_analytics_application.%s.status}' % rname,
        version:: '${aws_kinesis_analytics_application.%s.version}' % rname,
        cloudwatch_logging_options:: {},
        inputs:: {},
        outputs:: {},
        reference_data_sources:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
        cloudwatch_logging_options: cloudwatch_logging_options,
      },
      cloudwatch_logging_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param log_stream_arn (required)
        // @param role_arn (required)
        new(rname, log_stream_arn, role_arn):: {
          rname:: rname,
          log_stream_arn: log_stream_arn,
          role_arn: role_arn,
          id:: '${aws_kinesis_analytics_application.%s.cloudwatch_logging_options.id}' % rname,
        },
      },
      with_inputs(inputs):: self + {
        inputs: inputs,
      },
      inputs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name_prefix (required)
        // @param schema (required)
        new(rname, name_prefix, schema):: {
          rname:: rname,
          name_prefix: name_prefix,
          id:: '${aws_kinesis_analytics_application.%s.inputs.id}' % rname,
          starting_position_configuration:: '${aws_kinesis_analytics_application.%s.inputs.starting_position_configuration}' % rname,
          stream_names:: '${aws_kinesis_analytics_application.%s.inputs.stream_names}' % rname,
          kinesis_firehose:: {},
          kinesis_stream:: {},
          parallelism:: {},
          processing_configuration:: {},
          schema: schema,
        },
        with_kinesis_firehose(kinesis_firehose):: self + {
          kinesis_firehose: kinesis_firehose,
        },
        kinesis_firehose:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param resource_arn (required)
          // @param role_arn (required)
          new(rname, resource_arn, role_arn):: {
            rname:: rname,
            resource_arn: resource_arn,
            role_arn: role_arn,
          },
        },
        with_kinesis_stream(kinesis_stream):: self + {
          kinesis_stream: kinesis_stream,
        },
        kinesis_stream:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param resource_arn (required)
          // @param role_arn (required)
          new(rname, resource_arn, role_arn):: {
            rname:: rname,
            resource_arn: resource_arn,
            role_arn: role_arn,
          },
        },
        with_parallelism(parallelism):: self + {
          parallelism: parallelism,
        },
        parallelism:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param count (required)
          new(rname, count):: {
            rname:: rname,
            count: count,
          },
        },
        with_processing_configuration(processing_configuration):: self + {
          processing_configuration: processing_configuration,
        },
        processing_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param lambda (required)
          new(rname, lambda):: {
            rname:: rname,
            lambda: lambda,
          },
          lambda:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param resource_arn (required)
            // @param role_arn (required)
            new(rname, resource_arn, role_arn):: {
              rname:: rname,
              resource_arn: resource_arn,
              role_arn: role_arn,
            },
          },
        },
        schema:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param record_encoding (optional)
          // @param record_columns (required)
          // @param record_format (required)
          new(rname, record_columns, record_format, record_encoding=null):: {
            rname:: rname,
            [if record_encoding != null then 'record_encoding']: record_encoding,
            record_columns: record_columns,
            record_format: record_format,
          },
          record_columns:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param sql_type (required)
            // @param mapping (optional)
            new(rname, name, sql_type, mapping=null):: {
              rname:: rname,
              name: name,
              sql_type: sql_type,
              [if mapping != null then 'mapping']: mapping,
            },
          },
          record_format:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            new(rname):: {
              rname:: rname,
              record_format_type:: '${aws_kinesis_analytics_application.%s.inputs.schema.record_format.record_format_type}' % rname,
              mapping_parameters:: {},
            },
            with_mapping_parameters(mapping_parameters):: self + {
              mapping_parameters: mapping_parameters,
            },
            mapping_parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              new(rname):: {
                rname:: rname,
                csv:: {},
                json:: {},
              },
              with_csv(csv):: self + {
                csv: csv,
              },
              csv:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param record_column_delimiter (required)
                // @param record_row_delimiter (required)
                new(rname, record_column_delimiter, record_row_delimiter):: {
                  rname:: rname,
                  record_column_delimiter: record_column_delimiter,
                  record_row_delimiter: record_row_delimiter,
                },
              },
              with_json(json):: self + {
                json: json,
              },
              json:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param record_row_path (required)
                new(rname, record_row_path):: {
                  rname:: rname,
                  record_row_path: record_row_path,
                },
              },
            },
          },
        },
      },
      with_outputs(outputs):: self + {
        outputs: outputs,
      },
      outputs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param schema (required)
        new(rname, name, schema):: {
          rname:: rname,
          name: name,
          id:: '${aws_kinesis_analytics_application.%s.outputs.id}' % rname,
          kinesis_firehose:: {},
          kinesis_stream:: {},
          lambda:: {},
          schema: schema,
        },
        with_kinesis_firehose(kinesis_firehose):: self + {
          kinesis_firehose: kinesis_firehose,
        },
        kinesis_firehose:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param resource_arn (required)
          // @param role_arn (required)
          new(rname, resource_arn, role_arn):: {
            rname:: rname,
            resource_arn: resource_arn,
            role_arn: role_arn,
          },
        },
        with_kinesis_stream(kinesis_stream):: self + {
          kinesis_stream: kinesis_stream,
        },
        kinesis_stream:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param resource_arn (required)
          // @param role_arn (required)
          new(rname, resource_arn, role_arn):: {
            rname:: rname,
            resource_arn: resource_arn,
            role_arn: role_arn,
          },
        },
        with_lambda(lambda):: self + {
          lambda: lambda,
        },
        lambda:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param resource_arn (required)
          // @param role_arn (required)
          new(rname, resource_arn, role_arn):: {
            rname:: rname,
            resource_arn: resource_arn,
            role_arn: role_arn,
          },
        },
        schema:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param record_format_type (optional)
          new(rname, record_format_type=null):: {
            rname:: rname,
            [if record_format_type != null then 'record_format_type']: record_format_type,
          },
        },
      },
      with_reference_data_sources(reference_data_sources):: self + {
        reference_data_sources: reference_data_sources,
      },
      reference_data_sources:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param table_name (required)
        // @param s3 (required)
        // @param schema (required)
        new(rname, table_name, s3, schema):: {
          rname:: rname,
          table_name: table_name,
          id:: '${aws_kinesis_analytics_application.%s.reference_data_sources.id}' % rname,
          s3: s3,
          schema: schema,
        },
        s3:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param bucket_arn (required)
          // @param file_key (required)
          // @param role_arn (required)
          new(rname, bucket_arn, file_key, role_arn):: {
            rname:: rname,
            bucket_arn: bucket_arn,
            file_key: file_key,
            role_arn: role_arn,
          },
        },
        schema:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param record_encoding (optional)
          // @param record_columns (required)
          // @param record_format (required)
          new(rname, record_columns, record_format, record_encoding=null):: {
            rname:: rname,
            [if record_encoding != null then 'record_encoding']: record_encoding,
            record_columns: record_columns,
            record_format: record_format,
          },
          record_columns:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param sql_type (required)
            // @param mapping (optional)
            new(rname, name, sql_type, mapping=null):: {
              rname:: rname,
              name: name,
              sql_type: sql_type,
              [if mapping != null then 'mapping']: mapping,
            },
          },
          record_format:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            new(rname):: {
              rname:: rname,
              record_format_type:: '${aws_kinesis_analytics_application.%s.reference_data_sources.schema.record_format.record_format_type}' % rname,
              mapping_parameters:: {},
            },
            with_mapping_parameters(mapping_parameters):: self + {
              mapping_parameters: mapping_parameters,
            },
            mapping_parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              new(rname):: {
                rname:: rname,
                csv:: {},
                json:: {},
              },
              with_csv(csv):: self + {
                csv: csv,
              },
              csv:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param record_column_delimiter (required)
                // @param record_row_delimiter (required)
                new(rname, record_column_delimiter, record_row_delimiter):: {
                  rname:: rname,
                  record_column_delimiter: record_column_delimiter,
                  record_row_delimiter: record_row_delimiter,
                },
              },
              with_json(json):: self + {
                json: json,
              },
              json:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param record_row_path (required)
                new(rname, record_row_path):: {
                  rname:: rname,
                  record_row_path: record_row_path,
                },
              },
            },
          },
        },
      },
    },
    // aws_kinesis_firehose_delivery_stream - https://www.terraform.io/docs/providers/aws/r/kinesis_firehose_delivery_stream.html
    aws_kinesis_firehose_delivery_stream:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, destination, name, tags=null):: {
        rname:: rname,
        destination: destination,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_kinesis_firehose_delivery_stream.%s.arn}' % rname,
        destination_id:: '${aws_kinesis_firehose_delivery_stream.%s.destination_id}' % rname,
        id:: '${aws_kinesis_firehose_delivery_stream.%s.id}' % rname,
        version_id:: '${aws_kinesis_firehose_delivery_stream.%s.version_id}' % rname,
        elasticsearch_configuration:: {},
        extended_s3_configuration:: {},
        kinesis_source_configuration:: {},
        redshift_configuration:: {},
        s3_configuration:: {},
        server_side_encryption:: {},
        splunk_configuration:: {},
      },
      with_arn(arn):: {
        arn::: arn,
      },
      with_destination_id(destination_id):: {
        destination_id::: destination_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_version_id(version_id):: {
        version_id::: version_id,
      },
      with_elasticsearch_configuration(elasticsearch_configuration):: self + {
        elasticsearch_configuration: elasticsearch_configuration,
      },
      elasticsearch_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param domain_arn (required)
        // @param index_name (required)
        // @param role_arn (required)
        // @param buffering_interval (optional)
        // @param buffering_size (optional)
        // @param index_rotation_period (optional)
        // @param retry_duration (optional)
        // @param s3_backup_mode (optional)
        // @param type_name (optional)
        new(rname, domain_arn, index_name, role_arn, buffering_interval=null, buffering_size=null, index_rotation_period=null, retry_duration=null, s3_backup_mode=null, type_name=null):: {
          rname:: rname,
          domain_arn: domain_arn,
          index_name: index_name,
          role_arn: role_arn,
          [if buffering_interval != null then 'buffering_interval']: buffering_interval,
          [if buffering_size != null then 'buffering_size']: buffering_size,
          [if index_rotation_period != null then 'index_rotation_period']: index_rotation_period,
          [if retry_duration != null then 'retry_duration']: retry_duration,
          [if s3_backup_mode != null then 's3_backup_mode']: s3_backup_mode,
          [if type_name != null then 'type_name']: type_name,
          cloudwatch_logging_options:: {},
          processing_configuration:: {},
        },
        with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
          cloudwatch_logging_options: cloudwatch_logging_options,
        },
        cloudwatch_logging_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param log_group_name (optional)
          // @param log_stream_name (optional)
          new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            [if log_group_name != null then 'log_group_name']: log_group_name,
            [if log_stream_name != null then 'log_stream_name']: log_stream_name,
          },
        },
        with_processing_configuration(processing_configuration):: self + {
          processing_configuration: processing_configuration,
        },
        processing_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          new(rname, enabled=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            processors:: {},
          },
          with_processors(processors):: self + {
            processors: processors,
          },
          processors:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            new(rname, type):: {
              rname:: rname,
              type: type,
              parameters:: {},
            },
            with_parameters(parameters):: self + {
              parameters: parameters,
            },
            parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param parameter_name (required)
              // @param parameter_value (required)
              new(rname, parameter_name, parameter_value):: {
                rname:: rname,
                parameter_name: parameter_name,
                parameter_value: parameter_value,
              },
            },
          },
        },
      },
      with_extended_s3_configuration(extended_s3_configuration):: self + {
        extended_s3_configuration: extended_s3_configuration,
      },
      extended_s3_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_arn (required)
        // @param role_arn (required)
        // @param buffer_interval (optional)
        // @param buffer_size (optional)
        // @param compression_format (optional)
        // @param error_output_prefix (optional)
        // @param kms_key_arn (optional)
        // @param prefix (optional)
        // @param s3_backup_mode (optional)
        new(rname, bucket_arn, role_arn, buffer_interval=null, buffer_size=null, compression_format=null, error_output_prefix=null, kms_key_arn=null, prefix=null, s3_backup_mode=null):: {
          rname:: rname,
          bucket_arn: bucket_arn,
          role_arn: role_arn,
          [if buffer_interval != null then 'buffer_interval']: buffer_interval,
          [if buffer_size != null then 'buffer_size']: buffer_size,
          [if compression_format != null then 'compression_format']: compression_format,
          [if error_output_prefix != null then 'error_output_prefix']: error_output_prefix,
          [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          [if prefix != null then 'prefix']: prefix,
          [if s3_backup_mode != null then 's3_backup_mode']: s3_backup_mode,
          cloudwatch_logging_options:: {},
          data_format_conversion_configuration:: {},
          processing_configuration:: {},
          s3_backup_configuration:: {},
        },
        with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
          cloudwatch_logging_options: cloudwatch_logging_options,
        },
        cloudwatch_logging_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param log_group_name (optional)
          // @param log_stream_name (optional)
          new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            [if log_group_name != null then 'log_group_name']: log_group_name,
            [if log_stream_name != null then 'log_stream_name']: log_stream_name,
          },
        },
        with_data_format_conversion_configuration(data_format_conversion_configuration):: self + {
          data_format_conversion_configuration: data_format_conversion_configuration,
        },
        data_format_conversion_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param input_format_configuration (required)
          // @param output_format_configuration (required)
          // @param schema_configuration (required)
          new(rname, input_format_configuration, output_format_configuration, schema_configuration, enabled=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            input_format_configuration: input_format_configuration,
            output_format_configuration: output_format_configuration,
            schema_configuration: schema_configuration,
          },
          input_format_configuration:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param deserializer (required)
            new(rname, deserializer):: {
              rname:: rname,
              deserializer: deserializer,
            },
            deserializer:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              new(rname):: {
                rname:: rname,
                hive_json_ser_de:: {},
                open_x_json_ser_de:: {},
              },
              with_hive_json_ser_de(hive_json_ser_de):: self + {
                hive_json_ser_de: hive_json_ser_de,
              },
              hive_json_ser_de:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param timestamp_formats (optional)
                new(rname, timestamp_formats=null):: {
                  rname:: rname,
                  [if timestamp_formats != null then 'timestamp_formats']: timestamp_formats,
                },
              },
              with_open_x_json_ser_de(open_x_json_ser_de):: self + {
                open_x_json_ser_de: open_x_json_ser_de,
              },
              open_x_json_ser_de:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param case_insensitive (optional)
                // @param column_to_json_key_mappings (optional)
                // @param convert_dots_in_json_keys_to_underscores (optional)
                new(rname, case_insensitive=null, column_to_json_key_mappings=null, convert_dots_in_json_keys_to_underscores=null):: {
                  rname:: rname,
                  [if case_insensitive != null then 'case_insensitive']: case_insensitive,
                  [if column_to_json_key_mappings != null then 'column_to_json_key_mappings']: column_to_json_key_mappings,
                  [if convert_dots_in_json_keys_to_underscores != null then 'convert_dots_in_json_keys_to_underscores']: convert_dots_in_json_keys_to_underscores,
                },
              },
            },
          },
          output_format_configuration:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param serializer (required)
            new(rname, serializer):: {
              rname:: rname,
              serializer: serializer,
            },
            serializer:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              new(rname):: {
                rname:: rname,
                orc_ser_de:: {},
                parquet_ser_de:: {},
              },
              with_orc_ser_de(orc_ser_de):: self + {
                orc_ser_de: orc_ser_de,
              },
              orc_ser_de:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param block_size_bytes (optional)
                // @param bloom_filter_columns (optional)
                // @param bloom_filter_false_positive_probability (optional)
                // @param compression (optional)
                // @param dictionary_key_threshold (optional)
                // @param enable_padding (optional)
                // @param format_version (optional)
                // @param padding_tolerance (optional)
                // @param row_index_stride (optional)
                // @param stripe_size_bytes (optional)
                new(rname, block_size_bytes=null, bloom_filter_columns=null, bloom_filter_false_positive_probability=null, compression=null, dictionary_key_threshold=null, enable_padding=null, format_version=null, padding_tolerance=null, row_index_stride=null, stripe_size_bytes=null):: {
                  rname:: rname,
                  [if block_size_bytes != null then 'block_size_bytes']: block_size_bytes,
                  [if bloom_filter_columns != null then 'bloom_filter_columns']: bloom_filter_columns,
                  [if bloom_filter_false_positive_probability != null then 'bloom_filter_false_positive_probability']: bloom_filter_false_positive_probability,
                  [if compression != null then 'compression']: compression,
                  [if dictionary_key_threshold != null then 'dictionary_key_threshold']: dictionary_key_threshold,
                  [if enable_padding != null then 'enable_padding']: enable_padding,
                  [if format_version != null then 'format_version']: format_version,
                  [if padding_tolerance != null then 'padding_tolerance']: padding_tolerance,
                  [if row_index_stride != null then 'row_index_stride']: row_index_stride,
                  [if stripe_size_bytes != null then 'stripe_size_bytes']: stripe_size_bytes,
                },
              },
              with_parquet_ser_de(parquet_ser_de):: self + {
                parquet_ser_de: parquet_ser_de,
              },
              parquet_ser_de:: {
                // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
                // @param block_size_bytes (optional)
                // @param compression (optional)
                // @param enable_dictionary_compression (optional)
                // @param max_padding_bytes (optional)
                // @param page_size_bytes (optional)
                // @param writer_version (optional)
                new(rname, block_size_bytes=null, compression=null, enable_dictionary_compression=null, max_padding_bytes=null, page_size_bytes=null, writer_version=null):: {
                  rname:: rname,
                  [if block_size_bytes != null then 'block_size_bytes']: block_size_bytes,
                  [if compression != null then 'compression']: compression,
                  [if enable_dictionary_compression != null then 'enable_dictionary_compression']: enable_dictionary_compression,
                  [if max_padding_bytes != null then 'max_padding_bytes']: max_padding_bytes,
                  [if page_size_bytes != null then 'page_size_bytes']: page_size_bytes,
                  [if writer_version != null then 'writer_version']: writer_version,
                },
              },
            },
          },
          schema_configuration:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param database_name (required)
            // @param role_arn (required)
            // @param table_name (required)
            // @param version_id (optional)
            new(rname, database_name, role_arn, table_name, version_id=null):: {
              rname:: rname,
              database_name: database_name,
              role_arn: role_arn,
              table_name: table_name,
              [if version_id != null then 'version_id']: version_id,
              catalog_id:: '${aws_kinesis_firehose_delivery_stream.%s.extended_s3_configuration.data_format_conversion_configuration.schema_configuration.catalog_id}' % rname,
              region:: '${aws_kinesis_firehose_delivery_stream.%s.extended_s3_configuration.data_format_conversion_configuration.schema_configuration.region}' % rname,
            },
            with_catalog_id(catalog_id):: {
              catalog_id::: catalog_id,
            },
            with_region(region):: {
              region::: region,
            },
          },
        },
        with_processing_configuration(processing_configuration):: self + {
          processing_configuration: processing_configuration,
        },
        processing_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          new(rname, enabled=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            processors:: {},
          },
          with_processors(processors):: self + {
            processors: processors,
          },
          processors:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            new(rname, type):: {
              rname:: rname,
              type: type,
              parameters:: {},
            },
            with_parameters(parameters):: self + {
              parameters: parameters,
            },
            parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param parameter_name (required)
              // @param parameter_value (required)
              new(rname, parameter_name, parameter_value):: {
                rname:: rname,
                parameter_name: parameter_name,
                parameter_value: parameter_value,
              },
            },
          },
        },
        with_s3_backup_configuration(s3_backup_configuration):: self + {
          s3_backup_configuration: s3_backup_configuration,
        },
        s3_backup_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param bucket_arn (required)
          // @param role_arn (required)
          // @param buffer_interval (optional)
          // @param buffer_size (optional)
          // @param compression_format (optional)
          // @param kms_key_arn (optional)
          // @param prefix (optional)
          new(rname, bucket_arn, role_arn, buffer_interval=null, buffer_size=null, compression_format=null, kms_key_arn=null, prefix=null):: {
            rname:: rname,
            bucket_arn: bucket_arn,
            role_arn: role_arn,
            [if buffer_interval != null then 'buffer_interval']: buffer_interval,
            [if buffer_size != null then 'buffer_size']: buffer_size,
            [if compression_format != null then 'compression_format']: compression_format,
            [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
            [if prefix != null then 'prefix']: prefix,
            cloudwatch_logging_options:: {},
          },
          with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
            cloudwatch_logging_options: cloudwatch_logging_options,
          },
          cloudwatch_logging_options:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param enabled (optional)
            // @param log_group_name (optional)
            // @param log_stream_name (optional)
            new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
              rname:: rname,
              [if enabled != null then 'enabled']: enabled,
              [if log_group_name != null then 'log_group_name']: log_group_name,
              [if log_stream_name != null then 'log_stream_name']: log_stream_name,
            },
          },
        },
      },
      with_kinesis_source_configuration(kinesis_source_configuration):: self + {
        kinesis_source_configuration: kinesis_source_configuration,
      },
      kinesis_source_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param kinesis_stream_arn (required)
        // @param role_arn (required)
        new(rname, kinesis_stream_arn, role_arn):: {
          rname:: rname,
          kinesis_stream_arn: kinesis_stream_arn,
          role_arn: role_arn,
        },
      },
      with_redshift_configuration(redshift_configuration):: self + {
        redshift_configuration: redshift_configuration,
      },
      redshift_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cluster_jdbcurl (required)
        // @param data_table_name (required)
        // @param password (required)
        // @param role_arn (required)
        // @param username (required)
        // @param copy_options (optional)
        // @param data_table_columns (optional)
        // @param retry_duration (optional)
        // @param s3_backup_mode (optional)
        new(rname, cluster_jdbcurl, data_table_name, password, role_arn, username, copy_options=null, data_table_columns=null, retry_duration=null, s3_backup_mode=null):: {
          rname:: rname,
          cluster_jdbcurl: cluster_jdbcurl,
          data_table_name: data_table_name,
          password: password,
          role_arn: role_arn,
          username: username,
          [if copy_options != null then 'copy_options']: copy_options,
          [if data_table_columns != null then 'data_table_columns']: data_table_columns,
          [if retry_duration != null then 'retry_duration']: retry_duration,
          [if s3_backup_mode != null then 's3_backup_mode']: s3_backup_mode,
          cloudwatch_logging_options:: {},
          processing_configuration:: {},
          s3_backup_configuration:: {},
        },
        with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
          cloudwatch_logging_options: cloudwatch_logging_options,
        },
        cloudwatch_logging_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param log_group_name (optional)
          // @param log_stream_name (optional)
          new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            [if log_group_name != null then 'log_group_name']: log_group_name,
            [if log_stream_name != null then 'log_stream_name']: log_stream_name,
          },
        },
        with_processing_configuration(processing_configuration):: self + {
          processing_configuration: processing_configuration,
        },
        processing_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          new(rname, enabled=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            processors:: {},
          },
          with_processors(processors):: self + {
            processors: processors,
          },
          processors:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            new(rname, type):: {
              rname:: rname,
              type: type,
              parameters:: {},
            },
            with_parameters(parameters):: self + {
              parameters: parameters,
            },
            parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param parameter_name (required)
              // @param parameter_value (required)
              new(rname, parameter_name, parameter_value):: {
                rname:: rname,
                parameter_name: parameter_name,
                parameter_value: parameter_value,
              },
            },
          },
        },
        with_s3_backup_configuration(s3_backup_configuration):: self + {
          s3_backup_configuration: s3_backup_configuration,
        },
        s3_backup_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param bucket_arn (required)
          // @param role_arn (required)
          // @param buffer_interval (optional)
          // @param buffer_size (optional)
          // @param compression_format (optional)
          // @param kms_key_arn (optional)
          // @param prefix (optional)
          new(rname, bucket_arn, role_arn, buffer_interval=null, buffer_size=null, compression_format=null, kms_key_arn=null, prefix=null):: {
            rname:: rname,
            bucket_arn: bucket_arn,
            role_arn: role_arn,
            [if buffer_interval != null then 'buffer_interval']: buffer_interval,
            [if buffer_size != null then 'buffer_size']: buffer_size,
            [if compression_format != null then 'compression_format']: compression_format,
            [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
            [if prefix != null then 'prefix']: prefix,
            cloudwatch_logging_options:: {},
          },
          with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
            cloudwatch_logging_options: cloudwatch_logging_options,
          },
          cloudwatch_logging_options:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param enabled (optional)
            // @param log_group_name (optional)
            // @param log_stream_name (optional)
            new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
              rname:: rname,
              [if enabled != null then 'enabled']: enabled,
              [if log_group_name != null then 'log_group_name']: log_group_name,
              [if log_stream_name != null then 'log_stream_name']: log_stream_name,
            },
          },
        },
      },
      with_s3_configuration(s3_configuration):: self + {
        s3_configuration: s3_configuration,
      },
      s3_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_arn (required)
        // @param role_arn (required)
        // @param buffer_interval (optional)
        // @param buffer_size (optional)
        // @param compression_format (optional)
        // @param kms_key_arn (optional)
        // @param prefix (optional)
        new(rname, bucket_arn, role_arn, buffer_interval=null, buffer_size=null, compression_format=null, kms_key_arn=null, prefix=null):: {
          rname:: rname,
          bucket_arn: bucket_arn,
          role_arn: role_arn,
          [if buffer_interval != null then 'buffer_interval']: buffer_interval,
          [if buffer_size != null then 'buffer_size']: buffer_size,
          [if compression_format != null then 'compression_format']: compression_format,
          [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          [if prefix != null then 'prefix']: prefix,
          cloudwatch_logging_options:: {},
        },
        with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
          cloudwatch_logging_options: cloudwatch_logging_options,
        },
        cloudwatch_logging_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param log_group_name (optional)
          // @param log_stream_name (optional)
          new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            [if log_group_name != null then 'log_group_name']: log_group_name,
            [if log_stream_name != null then 'log_stream_name']: log_stream_name,
          },
        },
      },
      with_server_side_encryption(server_side_encryption):: self + {
        server_side_encryption: server_side_encryption,
      },
      server_side_encryption:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        new(rname, enabled=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
        },
      },
      with_splunk_configuration(splunk_configuration):: self + {
        splunk_configuration: splunk_configuration,
      },
      splunk_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param hec_endpoint (required)
        // @param hec_token (required)
        // @param hec_acknowledgment_timeout (optional)
        // @param hec_endpoint_type (optional)
        // @param retry_duration (optional)
        // @param s3_backup_mode (optional)
        new(rname, hec_endpoint, hec_token, hec_acknowledgment_timeout=null, hec_endpoint_type=null, retry_duration=null, s3_backup_mode=null):: {
          rname:: rname,
          hec_endpoint: hec_endpoint,
          hec_token: hec_token,
          [if hec_acknowledgment_timeout != null then 'hec_acknowledgment_timeout']: hec_acknowledgment_timeout,
          [if hec_endpoint_type != null then 'hec_endpoint_type']: hec_endpoint_type,
          [if retry_duration != null then 'retry_duration']: retry_duration,
          [if s3_backup_mode != null then 's3_backup_mode']: s3_backup_mode,
          cloudwatch_logging_options:: {},
          processing_configuration:: {},
        },
        with_cloudwatch_logging_options(cloudwatch_logging_options):: self + {
          cloudwatch_logging_options: cloudwatch_logging_options,
        },
        cloudwatch_logging_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          // @param log_group_name (optional)
          // @param log_stream_name (optional)
          new(rname, enabled=null, log_group_name=null, log_stream_name=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            [if log_group_name != null then 'log_group_name']: log_group_name,
            [if log_stream_name != null then 'log_stream_name']: log_stream_name,
          },
        },
        with_processing_configuration(processing_configuration):: self + {
          processing_configuration: processing_configuration,
        },
        processing_configuration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param enabled (optional)
          new(rname, enabled=null):: {
            rname:: rname,
            [if enabled != null then 'enabled']: enabled,
            processors:: {},
          },
          with_processors(processors):: self + {
            processors: processors,
          },
          processors:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            new(rname, type):: {
              rname:: rname,
              type: type,
              parameters:: {},
            },
            with_parameters(parameters):: self + {
              parameters: parameters,
            },
            parameters:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param parameter_name (required)
              // @param parameter_value (required)
              new(rname, parameter_name, parameter_value):: {
                rname:: rname,
                parameter_name: parameter_name,
                parameter_value: parameter_value,
              },
            },
          },
        },
      },
    },
    // aws_kinesis_stream - https://www.terraform.io/docs/providers/aws/r/kinesis_stream.html
    aws_kinesis_stream:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param shard_count (required)
      // @param encryption_type (optional)
      // @param enforce_consumer_deletion (optional)
      // @param kms_key_id (optional)
      // @param retention_period (optional)
      // @param shard_level_metrics (optional)
      // @param tags (optional)
      new(rname, name, shard_count, encryption_type=null, enforce_consumer_deletion=null, kms_key_id=null, retention_period=null, shard_level_metrics=null, tags=null):: {
        rname:: rname,
        name: name,
        shard_count: shard_count,
        [if encryption_type != null then 'encryption_type']: encryption_type,
        [if enforce_consumer_deletion != null then 'enforce_consumer_deletion']: enforce_consumer_deletion,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if retention_period != null then 'retention_period']: retention_period,
        [if shard_level_metrics != null then 'shard_level_metrics']: shard_level_metrics,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_kinesis_stream.%s.arn}' % rname,
        id:: '${aws_kinesis_stream.%s.id}' % rname,
        timeouts:: {},
      },
      with_arn(arn):: {
        arn::: arn,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_kms_alias - https://www.terraform.io/docs/providers/aws/r/kms_alias.html
    aws_kms_alias:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param target_key_id (required)
      // @param name (optional)
      // @param name_prefix (optional)
      new(rname, target_key_id, name=null, name_prefix=null):: {
        rname:: rname,
        target_key_id: target_key_id,
        [if name != null then 'name']: name,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        arn:: '${aws_kms_alias.%s.arn}' % rname,
        id:: '${aws_kms_alias.%s.id}' % rname,
        target_key_arn:: '${aws_kms_alias.%s.target_key_arn}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_kms_ciphertext - https://www.terraform.io/docs/providers/aws/r/kms_ciphertext.html
    aws_kms_ciphertext:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param key_id (required)
      // @param plaintext (required)
      // @param context (optional)
      new(rname, key_id, plaintext, context=null):: {
        rname:: rname,
        key_id: key_id,
        plaintext: plaintext,
        [if context != null then 'context']: context,
        ciphertext_blob:: '${aws_kms_ciphertext.%s.ciphertext_blob}' % rname,
        id:: '${aws_kms_ciphertext.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_kms_external_key - https://www.terraform.io/docs/providers/aws/r/kms_external_key.html
    aws_kms_external_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deletion_window_in_days (optional)
      // @param description (optional)
      // @param key_material_base64 (optional)
      // @param tags (optional)
      // @param valid_to (optional)
      new(rname, deletion_window_in_days=null, description=null, key_material_base64=null, tags=null, valid_to=null):: {
        rname:: rname,
        [if deletion_window_in_days != null then 'deletion_window_in_days']: deletion_window_in_days,
        [if description != null then 'description']: description,
        [if key_material_base64 != null then 'key_material_base64']: key_material_base64,
        [if tags != null then 'tags']: tags,
        [if valid_to != null then 'valid_to']: valid_to,
        arn:: '${aws_kms_external_key.%s.arn}' % rname,
        enabled:: '${aws_kms_external_key.%s.enabled}' % rname,
        expiration_model:: '${aws_kms_external_key.%s.expiration_model}' % rname,
        id:: '${aws_kms_external_key.%s.id}' % rname,
        key_state:: '${aws_kms_external_key.%s.key_state}' % rname,
        key_usage:: '${aws_kms_external_key.%s.key_usage}' % rname,
        policy:: '${aws_kms_external_key.%s.policy}' % rname,
      },
      with_enabled(enabled):: {
        enabled::: enabled,
      },
      with_id(id):: {
        id::: id,
      },
      with_policy(policy):: {
        policy::: policy,
      },
    },
    // aws_kms_grant - https://www.terraform.io/docs/providers/aws/r/kms_grant.html
    aws_kms_grant:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param grantee_principal (required)
      // @param key_id (required)
      // @param operations (required)
      // @param grant_creation_tokens (optional)
      // @param name (optional)
      // @param retire_on_delete (optional)
      // @param retiring_principal (optional)
      new(rname, grantee_principal, key_id, operations, grant_creation_tokens=null, name=null, retire_on_delete=null, retiring_principal=null):: {
        rname:: rname,
        grantee_principal: grantee_principal,
        key_id: key_id,
        operations: operations,
        [if grant_creation_tokens != null then 'grant_creation_tokens']: grant_creation_tokens,
        [if name != null then 'name']: name,
        [if retire_on_delete != null then 'retire_on_delete']: retire_on_delete,
        [if retiring_principal != null then 'retiring_principal']: retiring_principal,
        grant_id:: '${aws_kms_grant.%s.grant_id}' % rname,
        grant_token:: '${aws_kms_grant.%s.grant_token}' % rname,
        id:: '${aws_kms_grant.%s.id}' % rname,
        constraints:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_constraints(constraints):: self + {
        constraints: constraints,
      },
      constraints:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param encryption_context_equals (optional)
        // @param encryption_context_subset (optional)
        new(rname, encryption_context_equals=null, encryption_context_subset=null):: {
          rname:: rname,
          [if encryption_context_equals != null then 'encryption_context_equals']: encryption_context_equals,
          [if encryption_context_subset != null then 'encryption_context_subset']: encryption_context_subset,
        },
      },
    },
    // aws_kms_key - https://www.terraform.io/docs/providers/aws/r/kms_key.html
    aws_kms_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param customer_master_key_spec (optional)
      // @param deletion_window_in_days (optional)
      // @param enable_key_rotation (optional)
      // @param is_enabled (optional)
      // @param key_usage (optional)
      // @param tags (optional)
      new(rname, customer_master_key_spec=null, deletion_window_in_days=null, enable_key_rotation=null, is_enabled=null, key_usage=null, tags=null):: {
        rname:: rname,
        [if customer_master_key_spec != null then 'customer_master_key_spec']: customer_master_key_spec,
        [if deletion_window_in_days != null then 'deletion_window_in_days']: deletion_window_in_days,
        [if enable_key_rotation != null then 'enable_key_rotation']: enable_key_rotation,
        [if is_enabled != null then 'is_enabled']: is_enabled,
        [if key_usage != null then 'key_usage']: key_usage,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_kms_key.%s.arn}' % rname,
        description:: '${aws_kms_key.%s.description}' % rname,
        id:: '${aws_kms_key.%s.id}' % rname,
        key_id:: '${aws_kms_key.%s.key_id}' % rname,
        policy:: '${aws_kms_key.%s.policy}' % rname,
      },
      with_description(description):: {
        description::: description,
      },
      with_id(id):: {
        id::: id,
      },
      with_policy(policy):: {
        policy::: policy,
      },
    },
    // aws_lambda_alias - https://www.terraform.io/docs/providers/aws/r/lambda_alias.html
    aws_lambda_alias:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param function_name (required)
      // @param function_version (required)
      // @param name (required)
      // @param description (optional)
      new(rname, function_name, function_version, name, description=null):: {
        rname:: rname,
        function_name: function_name,
        function_version: function_version,
        name: name,
        [if description != null then 'description']: description,
        arn:: '${aws_lambda_alias.%s.arn}' % rname,
        id:: '${aws_lambda_alias.%s.id}' % rname,
        invoke_arn:: '${aws_lambda_alias.%s.invoke_arn}' % rname,
        routing_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_routing_config(routing_config):: self + {
        routing_config: routing_config,
      },
      routing_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param additional_version_weights (optional)
        new(rname, additional_version_weights=null):: {
          rname:: rname,
          [if additional_version_weights != null then 'additional_version_weights']: additional_version_weights,
        },
      },
    },
    // aws_lambda_event_source_mapping - https://www.terraform.io/docs/providers/aws/r/lambda_event_source_mapping.html
    aws_lambda_event_source_mapping:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param event_source_arn (required)
      // @param function_name (required)
      // @param batch_size (optional)
      // @param bisect_batch_on_function_error (optional)
      // @param enabled (optional)
      // @param maximum_batching_window_in_seconds (optional)
      // @param starting_position (optional)
      // @param starting_position_timestamp (optional)
      new(rname, event_source_arn, function_name, batch_size=null, bisect_batch_on_function_error=null, enabled=null, maximum_batching_window_in_seconds=null, starting_position=null, starting_position_timestamp=null):: {
        rname:: rname,
        event_source_arn: event_source_arn,
        function_name: function_name,
        [if batch_size != null then 'batch_size']: batch_size,
        [if bisect_batch_on_function_error != null then 'bisect_batch_on_function_error']: bisect_batch_on_function_error,
        [if enabled != null then 'enabled']: enabled,
        [if maximum_batching_window_in_seconds != null then 'maximum_batching_window_in_seconds']: maximum_batching_window_in_seconds,
        [if starting_position != null then 'starting_position']: starting_position,
        [if starting_position_timestamp != null then 'starting_position_timestamp']: starting_position_timestamp,
        function_arn:: '${aws_lambda_event_source_mapping.%s.function_arn}' % rname,
        id:: '${aws_lambda_event_source_mapping.%s.id}' % rname,
        last_modified:: '${aws_lambda_event_source_mapping.%s.last_modified}' % rname,
        last_processing_result:: '${aws_lambda_event_source_mapping.%s.last_processing_result}' % rname,
        maximum_record_age_in_seconds:: '${aws_lambda_event_source_mapping.%s.maximum_record_age_in_seconds}' % rname,
        maximum_retry_attempts:: '${aws_lambda_event_source_mapping.%s.maximum_retry_attempts}' % rname,
        parallelization_factor:: '${aws_lambda_event_source_mapping.%s.parallelization_factor}' % rname,
        state:: '${aws_lambda_event_source_mapping.%s.state}' % rname,
        state_transition_reason:: '${aws_lambda_event_source_mapping.%s.state_transition_reason}' % rname,
        uuid:: '${aws_lambda_event_source_mapping.%s.uuid}' % rname,
        destination_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_maximum_record_age_in_seconds(maximum_record_age_in_seconds):: {
        maximum_record_age_in_seconds::: maximum_record_age_in_seconds,
      },
      with_maximum_retry_attempts(maximum_retry_attempts):: {
        maximum_retry_attempts::: maximum_retry_attempts,
      },
      with_parallelization_factor(parallelization_factor):: {
        parallelization_factor::: parallelization_factor,
      },
      with_destination_config(destination_config):: self + {
        destination_config: destination_config,
      },
      destination_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          on_failure:: {},
        },
        with_on_failure(on_failure):: self + {
          on_failure: on_failure,
        },
        on_failure:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param destination_arn (required)
          new(rname, destination_arn):: {
            rname:: rname,
            destination_arn: destination_arn,
          },
        },
      },
    },
    // aws_lambda_function - https://www.terraform.io/docs/providers/aws/r/lambda_function.html
    aws_lambda_function:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param function_name (required)
      // @param handler (required)
      // @param role (required)
      // @param runtime (required)
      // @param description (optional)
      // @param filename (optional)
      // @param kms_key_arn (optional)
      // @param layers (optional)
      // @param memory_size (optional)
      // @param publish (optional)
      // @param reserved_concurrent_executions (optional)
      // @param s3_bucket (optional)
      // @param s3_key (optional)
      // @param s3_object_version (optional)
      // @param tags (optional)
      // @param timeout (optional)
      new(rname, function_name, handler, role, runtime, description=null, filename=null, kms_key_arn=null, layers=null, memory_size=null, publish=null, reserved_concurrent_executions=null, s3_bucket=null, s3_key=null, s3_object_version=null, tags=null, timeout=null):: {
        rname:: rname,
        function_name: function_name,
        handler: handler,
        role: role,
        runtime: runtime,
        [if description != null then 'description']: description,
        [if filename != null then 'filename']: filename,
        [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
        [if layers != null then 'layers']: layers,
        [if memory_size != null then 'memory_size']: memory_size,
        [if publish != null then 'publish']: publish,
        [if reserved_concurrent_executions != null then 'reserved_concurrent_executions']: reserved_concurrent_executions,
        [if s3_bucket != null then 's3_bucket']: s3_bucket,
        [if s3_key != null then 's3_key']: s3_key,
        [if s3_object_version != null then 's3_object_version']: s3_object_version,
        [if tags != null then 'tags']: tags,
        [if timeout != null then 'timeout']: timeout,
        arn:: '${aws_lambda_function.%s.arn}' % rname,
        id:: '${aws_lambda_function.%s.id}' % rname,
        invoke_arn:: '${aws_lambda_function.%s.invoke_arn}' % rname,
        last_modified:: '${aws_lambda_function.%s.last_modified}' % rname,
        qualified_arn:: '${aws_lambda_function.%s.qualified_arn}' % rname,
        source_code_hash:: '${aws_lambda_function.%s.source_code_hash}' % rname,
        source_code_size:: '${aws_lambda_function.%s.source_code_size}' % rname,
        version:: '${aws_lambda_function.%s.version}' % rname,
        dead_letter_config:: {},
        environment:: {},
        timeouts:: {},
        tracing_config:: {},
        vpc_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_source_code_hash(source_code_hash):: {
        source_code_hash::: source_code_hash,
      },
      with_dead_letter_config(dead_letter_config):: self + {
        dead_letter_config: dead_letter_config,
      },
      dead_letter_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param target_arn (required)
        new(rname, target_arn):: {
          rname:: rname,
          target_arn: target_arn,
        },
      },
      with_environment(environment):: self + {
        environment: environment,
      },
      environment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param variables (optional)
        new(rname, variables=null):: {
          rname:: rname,
          [if variables != null then 'variables']: variables,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
      with_tracing_config(tracing_config):: self + {
        tracing_config: tracing_config,
      },
      tracing_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mode (required)
        new(rname, mode):: {
          rname:: rname,
          mode: mode,
        },
      },
      with_vpc_config(vpc_config):: self + {
        vpc_config: vpc_config,
      },
      vpc_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_ids (required)
        // @param subnet_ids (required)
        new(rname, security_group_ids, subnet_ids):: {
          rname:: rname,
          security_group_ids: security_group_ids,
          subnet_ids: subnet_ids,
          vpc_id:: '${aws_lambda_function.%s.vpc_config.vpc_id}' % rname,
        },
      },
    },
    // aws_lambda_function_event_invoke_config - https://www.terraform.io/docs/providers/aws/r/lambda_function_event_invoke_config.html
    aws_lambda_function_event_invoke_config:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param function_name (required)
      // @param maximum_event_age_in_seconds (optional)
      // @param maximum_retry_attempts (optional)
      // @param qualifier (optional)
      new(rname, function_name, maximum_event_age_in_seconds=null, maximum_retry_attempts=null, qualifier=null):: {
        rname:: rname,
        function_name: function_name,
        [if maximum_event_age_in_seconds != null then 'maximum_event_age_in_seconds']: maximum_event_age_in_seconds,
        [if maximum_retry_attempts != null then 'maximum_retry_attempts']: maximum_retry_attempts,
        [if qualifier != null then 'qualifier']: qualifier,
        id:: '${aws_lambda_function_event_invoke_config.%s.id}' % rname,
        destination_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_destination_config(destination_config):: self + {
        destination_config: destination_config,
      },
      destination_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          on_failure:: {},
          on_success:: {},
        },
        with_on_failure(on_failure):: self + {
          on_failure: on_failure,
        },
        on_failure:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param destination (required)
          new(rname, destination):: {
            rname:: rname,
            destination: destination,
          },
        },
        with_on_success(on_success):: self + {
          on_success: on_success,
        },
        on_success:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param destination (required)
          new(rname, destination):: {
            rname:: rname,
            destination: destination,
          },
        },
      },
    },
    // aws_lambda_layer_version - https://www.terraform.io/docs/providers/aws/r/lambda_layer_version.html
    aws_lambda_layer_version:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param layer_name (required)
      // @param compatible_runtimes (optional)
      // @param description (optional)
      // @param filename (optional)
      // @param license_info (optional)
      // @param s3_bucket (optional)
      // @param s3_key (optional)
      // @param s3_object_version (optional)
      new(rname, layer_name, compatible_runtimes=null, description=null, filename=null, license_info=null, s3_bucket=null, s3_key=null, s3_object_version=null):: {
        rname:: rname,
        layer_name: layer_name,
        [if compatible_runtimes != null then 'compatible_runtimes']: compatible_runtimes,
        [if description != null then 'description']: description,
        [if filename != null then 'filename']: filename,
        [if license_info != null then 'license_info']: license_info,
        [if s3_bucket != null then 's3_bucket']: s3_bucket,
        [if s3_key != null then 's3_key']: s3_key,
        [if s3_object_version != null then 's3_object_version']: s3_object_version,
        arn:: '${aws_lambda_layer_version.%s.arn}' % rname,
        created_date:: '${aws_lambda_layer_version.%s.created_date}' % rname,
        id:: '${aws_lambda_layer_version.%s.id}' % rname,
        layer_arn:: '${aws_lambda_layer_version.%s.layer_arn}' % rname,
        source_code_hash:: '${aws_lambda_layer_version.%s.source_code_hash}' % rname,
        source_code_size:: '${aws_lambda_layer_version.%s.source_code_size}' % rname,
        version:: '${aws_lambda_layer_version.%s.version}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_source_code_hash(source_code_hash):: {
        source_code_hash::: source_code_hash,
      },
    },
    // aws_lambda_permission - https://www.terraform.io/docs/providers/aws/r/lambda_permission.html
    aws_lambda_permission:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param action (required)
      // @param function_name (required)
      // @param principal (required)
      // @param event_source_token (optional)
      // @param qualifier (optional)
      // @param source_account (optional)
      // @param source_arn (optional)
      // @param statement_id_prefix (optional)
      new(rname, action, function_name, principal, event_source_token=null, qualifier=null, source_account=null, source_arn=null, statement_id_prefix=null):: {
        rname:: rname,
        action: action,
        function_name: function_name,
        principal: principal,
        [if event_source_token != null then 'event_source_token']: event_source_token,
        [if qualifier != null then 'qualifier']: qualifier,
        [if source_account != null then 'source_account']: source_account,
        [if source_arn != null then 'source_arn']: source_arn,
        [if statement_id_prefix != null then 'statement_id_prefix']: statement_id_prefix,
        id:: '${aws_lambda_permission.%s.id}' % rname,
        statement_id:: '${aws_lambda_permission.%s.statement_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_statement_id(statement_id):: {
        statement_id::: statement_id,
      },
    },
    // aws_lambda_provisioned_concurrency_config - https://www.terraform.io/docs/providers/aws/r/lambda_provisioned_concurrency_config.html
    aws_lambda_provisioned_concurrency_config:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param function_name (required)
      // @param provisioned_concurrent_executions (required)
      // @param qualifier (required)
      new(rname, function_name, provisioned_concurrent_executions, qualifier):: {
        rname:: rname,
        function_name: function_name,
        provisioned_concurrent_executions: provisioned_concurrent_executions,
        qualifier: qualifier,
        id:: '${aws_lambda_provisioned_concurrency_config.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param update (optional)
        new(rname, create=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_launch_configuration - https://www.terraform.io/docs/providers/aws/r/launch_configuration.html
    aws_launch_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param image_id (required)
      // @param instance_type (required)
      // @param associate_public_ip_address (optional)
      // @param enable_monitoring (optional)
      // @param iam_instance_profile (optional)
      // @param name_prefix (optional)
      // @param placement_tenancy (optional)
      // @param security_groups (optional)
      // @param spot_price (optional)
      // @param user_data (optional)
      // @param user_data_base64 (optional)
      // @param vpc_classic_link_id (optional)
      // @param vpc_classic_link_security_groups (optional)
      new(rname, image_id, instance_type, associate_public_ip_address=null, enable_monitoring=null, iam_instance_profile=null, name_prefix=null, placement_tenancy=null, security_groups=null, spot_price=null, user_data=null, user_data_base64=null, vpc_classic_link_id=null, vpc_classic_link_security_groups=null):: {
        rname:: rname,
        image_id: image_id,
        instance_type: instance_type,
        [if associate_public_ip_address != null then 'associate_public_ip_address']: associate_public_ip_address,
        [if enable_monitoring != null then 'enable_monitoring']: enable_monitoring,
        [if iam_instance_profile != null then 'iam_instance_profile']: iam_instance_profile,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if placement_tenancy != null then 'placement_tenancy']: placement_tenancy,
        [if security_groups != null then 'security_groups']: security_groups,
        [if spot_price != null then 'spot_price']: spot_price,
        [if user_data != null then 'user_data']: user_data,
        [if user_data_base64 != null then 'user_data_base64']: user_data_base64,
        [if vpc_classic_link_id != null then 'vpc_classic_link_id']: vpc_classic_link_id,
        [if vpc_classic_link_security_groups != null then 'vpc_classic_link_security_groups']: vpc_classic_link_security_groups,
        arn:: '${aws_launch_configuration.%s.arn}' % rname,
        ebs_optimized:: '${aws_launch_configuration.%s.ebs_optimized}' % rname,
        id:: '${aws_launch_configuration.%s.id}' % rname,
        key_name:: '${aws_launch_configuration.%s.key_name}' % rname,
        name:: '${aws_launch_configuration.%s.name}' % rname,
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        root_block_device:: {},
      },
      with_ebs_optimized(ebs_optimized):: {
        ebs_optimized::: ebs_optimized,
      },
      with_id(id):: {
        id::: id,
      },
      with_key_name(key_name):: {
        key_name::: key_name,
      },
      with_name(name):: {
        name::: name,
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param delete_on_termination (optional)
        // @param no_device (optional)
        new(rname, device_name, delete_on_termination=null, no_device=null):: {
          rname:: rname,
          device_name: device_name,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          [if no_device != null then 'no_device']: no_device,
          encrypted:: '${aws_launch_configuration.%s.ebs_block_device.encrypted}' % rname,
          iops:: '${aws_launch_configuration.%s.ebs_block_device.iops}' % rname,
          snapshot_id:: '${aws_launch_configuration.%s.ebs_block_device.snapshot_id}' % rname,
          volume_size:: '${aws_launch_configuration.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_launch_configuration.%s.ebs_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_snapshot_id(snapshot_id):: {
          snapshot_id::: snapshot_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param virtual_name (required)
        new(rname, device_name, virtual_name):: {
          rname:: rname,
          device_name: device_name,
          virtual_name: virtual_name,
        },
      },
      with_root_block_device(root_block_device):: self + {
        root_block_device: root_block_device,
      },
      root_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete_on_termination (optional)
        new(rname, delete_on_termination=null):: {
          rname:: rname,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          encrypted:: '${aws_launch_configuration.%s.root_block_device.encrypted}' % rname,
          iops:: '${aws_launch_configuration.%s.root_block_device.iops}' % rname,
          volume_size:: '${aws_launch_configuration.%s.root_block_device.volume_size}' % rname,
          volume_type:: '${aws_launch_configuration.%s.root_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
    },
    // aws_launch_template - https://www.terraform.io/docs/providers/aws/r/launch_template.html
    aws_launch_template:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param disable_api_termination (optional)
      // @param ebs_optimized (optional)
      // @param image_id (optional)
      // @param instance_initiated_shutdown_behavior (optional)
      // @param instance_type (optional)
      // @param kernel_id (optional)
      // @param key_name (optional)
      // @param name_prefix (optional)
      // @param ram_disk_id (optional)
      // @param security_group_names (optional)
      // @param tags (optional)
      // @param user_data (optional)
      // @param vpc_security_group_ids (optional)
      new(rname, description=null, disable_api_termination=null, ebs_optimized=null, image_id=null, instance_initiated_shutdown_behavior=null, instance_type=null, kernel_id=null, key_name=null, name_prefix=null, ram_disk_id=null, security_group_names=null, tags=null, user_data=null, vpc_security_group_ids=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if disable_api_termination != null then 'disable_api_termination']: disable_api_termination,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if image_id != null then 'image_id']: image_id,
        [if instance_initiated_shutdown_behavior != null then 'instance_initiated_shutdown_behavior']: instance_initiated_shutdown_behavior,
        [if instance_type != null then 'instance_type']: instance_type,
        [if kernel_id != null then 'kernel_id']: kernel_id,
        [if key_name != null then 'key_name']: key_name,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if ram_disk_id != null then 'ram_disk_id']: ram_disk_id,
        [if security_group_names != null then 'security_group_names']: security_group_names,
        [if tags != null then 'tags']: tags,
        [if user_data != null then 'user_data']: user_data,
        [if vpc_security_group_ids != null then 'vpc_security_group_ids']: vpc_security_group_ids,
        arn:: '${aws_launch_template.%s.arn}' % rname,
        default_version:: '${aws_launch_template.%s.default_version}' % rname,
        id:: '${aws_launch_template.%s.id}' % rname,
        latest_version:: '${aws_launch_template.%s.latest_version}' % rname,
        name:: '${aws_launch_template.%s.name}' % rname,
        block_device_mappings:: {},
        capacity_reservation_specification:: {},
        cpu_options:: {},
        credit_specification:: {},
        elastic_gpu_specifications:: {},
        elastic_inference_accelerator:: {},
        iam_instance_profile:: {},
        instance_market_options:: {},
        license_specification:: {},
        monitoring:: {},
        network_interfaces:: {},
        placement:: {},
        tag_specifications:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_block_device_mappings(block_device_mappings):: self + {
        block_device_mappings: block_device_mappings,
      },
      block_device_mappings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (optional)
        // @param no_device (optional)
        // @param virtual_name (optional)
        new(rname, device_name=null, no_device=null, virtual_name=null):: {
          rname:: rname,
          [if device_name != null then 'device_name']: device_name,
          [if no_device != null then 'no_device']: no_device,
          [if virtual_name != null then 'virtual_name']: virtual_name,
          ebs:: {},
        },
        with_ebs(ebs):: self + {
          ebs: ebs,
        },
        ebs:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param delete_on_termination (optional)
          // @param encrypted (optional)
          // @param kms_key_id (optional)
          // @param snapshot_id (optional)
          new(rname, delete_on_termination=null, encrypted=null, kms_key_id=null, snapshot_id=null):: {
            rname:: rname,
            [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
            [if encrypted != null then 'encrypted']: encrypted,
            [if kms_key_id != null then 'kms_key_id']: kms_key_id,
            [if snapshot_id != null then 'snapshot_id']: snapshot_id,
            iops:: '${aws_launch_template.%s.block_device_mappings.ebs.iops}' % rname,
            volume_size:: '${aws_launch_template.%s.block_device_mappings.ebs.volume_size}' % rname,
            volume_type:: '${aws_launch_template.%s.block_device_mappings.ebs.volume_type}' % rname,
          },
          with_iops(iops):: {
            iops::: iops,
          },
          with_volume_size(volume_size):: {
            volume_size::: volume_size,
          },
          with_volume_type(volume_type):: {
            volume_type::: volume_type,
          },
        },
      },
      with_capacity_reservation_specification(capacity_reservation_specification):: self + {
        capacity_reservation_specification: capacity_reservation_specification,
      },
      capacity_reservation_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param capacity_reservation_preference (optional)
        new(rname, capacity_reservation_preference=null):: {
          rname:: rname,
          [if capacity_reservation_preference != null then 'capacity_reservation_preference']: capacity_reservation_preference,
          capacity_reservation_target:: {},
        },
        with_capacity_reservation_target(capacity_reservation_target):: self + {
          capacity_reservation_target: capacity_reservation_target,
        },
        capacity_reservation_target:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param capacity_reservation_id (optional)
          new(rname, capacity_reservation_id=null):: {
            rname:: rname,
            [if capacity_reservation_id != null then 'capacity_reservation_id']: capacity_reservation_id,
          },
        },
      },
      with_cpu_options(cpu_options):: self + {
        cpu_options: cpu_options,
      },
      cpu_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param core_count (optional)
        // @param threads_per_core (optional)
        new(rname, core_count=null, threads_per_core=null):: {
          rname:: rname,
          [if core_count != null then 'core_count']: core_count,
          [if threads_per_core != null then 'threads_per_core']: threads_per_core,
        },
      },
      with_credit_specification(credit_specification):: self + {
        credit_specification: credit_specification,
      },
      credit_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cpu_credits (optional)
        new(rname, cpu_credits=null):: {
          rname:: rname,
          [if cpu_credits != null then 'cpu_credits']: cpu_credits,
        },
      },
      with_elastic_gpu_specifications(elastic_gpu_specifications):: self + {
        elastic_gpu_specifications: elastic_gpu_specifications,
      },
      elastic_gpu_specifications:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        new(rname, type):: {
          rname:: rname,
          type: type,
        },
      },
      with_elastic_inference_accelerator(elastic_inference_accelerator):: self + {
        elastic_inference_accelerator: elastic_inference_accelerator,
      },
      elastic_inference_accelerator:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        new(rname, type):: {
          rname:: rname,
          type: type,
        },
      },
      with_iam_instance_profile(iam_instance_profile):: self + {
        iam_instance_profile: iam_instance_profile,
      },
      iam_instance_profile:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param arn (optional)
        // @param name (optional)
        new(rname, arn=null, name=null):: {
          rname:: rname,
          [if arn != null then 'arn']: arn,
          [if name != null then 'name']: name,
        },
      },
      with_instance_market_options(instance_market_options):: self + {
        instance_market_options: instance_market_options,
      },
      instance_market_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param market_type (optional)
        new(rname, market_type=null):: {
          rname:: rname,
          [if market_type != null then 'market_type']: market_type,
          spot_options:: {},
        },
        with_spot_options(spot_options):: self + {
          spot_options: spot_options,
        },
        spot_options:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param block_duration_minutes (optional)
          // @param instance_interruption_behavior (optional)
          // @param max_price (optional)
          // @param spot_instance_type (optional)
          new(rname, block_duration_minutes=null, instance_interruption_behavior=null, max_price=null, spot_instance_type=null):: {
            rname:: rname,
            [if block_duration_minutes != null then 'block_duration_minutes']: block_duration_minutes,
            [if instance_interruption_behavior != null then 'instance_interruption_behavior']: instance_interruption_behavior,
            [if max_price != null then 'max_price']: max_price,
            [if spot_instance_type != null then 'spot_instance_type']: spot_instance_type,
            valid_until:: '${aws_launch_template.%s.instance_market_options.spot_options.valid_until}' % rname,
          },
          with_valid_until(valid_until):: {
            valid_until::: valid_until,
          },
        },
      },
      with_license_specification(license_specification):: self + {
        license_specification: license_specification,
      },
      license_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param license_configuration_arn (required)
        new(rname, license_configuration_arn):: {
          rname:: rname,
          license_configuration_arn: license_configuration_arn,
        },
      },
      with_monitoring(monitoring):: self + {
        monitoring: monitoring,
      },
      monitoring:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        new(rname, enabled=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
        },
      },
      with_network_interfaces(network_interfaces):: self + {
        network_interfaces: network_interfaces,
      },
      network_interfaces:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param associate_public_ip_address (optional)
        // @param delete_on_termination (optional)
        // @param description (optional)
        // @param device_index (optional)
        // @param ipv4_address_count (optional)
        // @param ipv4_addresses (optional)
        // @param ipv6_address_count (optional)
        // @param ipv6_addresses (optional)
        // @param network_interface_id (optional)
        // @param private_ip_address (optional)
        // @param security_groups (optional)
        // @param subnet_id (optional)
        new(rname, associate_public_ip_address=null, delete_on_termination=null, description=null, device_index=null, ipv4_address_count=null, ipv4_addresses=null, ipv6_address_count=null, ipv6_addresses=null, network_interface_id=null, private_ip_address=null, security_groups=null, subnet_id=null):: {
          rname:: rname,
          [if associate_public_ip_address != null then 'associate_public_ip_address']: associate_public_ip_address,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          [if description != null then 'description']: description,
          [if device_index != null then 'device_index']: device_index,
          [if ipv4_address_count != null then 'ipv4_address_count']: ipv4_address_count,
          [if ipv4_addresses != null then 'ipv4_addresses']: ipv4_addresses,
          [if ipv6_address_count != null then 'ipv6_address_count']: ipv6_address_count,
          [if ipv6_addresses != null then 'ipv6_addresses']: ipv6_addresses,
          [if network_interface_id != null then 'network_interface_id']: network_interface_id,
          [if private_ip_address != null then 'private_ip_address']: private_ip_address,
          [if security_groups != null then 'security_groups']: security_groups,
          [if subnet_id != null then 'subnet_id']: subnet_id,
        },
      },
      with_placement(placement):: self + {
        placement: placement,
      },
      placement:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param affinity (optional)
        // @param availability_zone (optional)
        // @param group_name (optional)
        // @param host_id (optional)
        // @param spread_domain (optional)
        // @param tenancy (optional)
        new(rname, affinity=null, availability_zone=null, group_name=null, host_id=null, spread_domain=null, tenancy=null):: {
          rname:: rname,
          [if affinity != null then 'affinity']: affinity,
          [if availability_zone != null then 'availability_zone']: availability_zone,
          [if group_name != null then 'group_name']: group_name,
          [if host_id != null then 'host_id']: host_id,
          [if spread_domain != null then 'spread_domain']: spread_domain,
          [if tenancy != null then 'tenancy']: tenancy,
        },
      },
      with_tag_specifications(tag_specifications):: self + {
        tag_specifications: tag_specifications,
      },
      tag_specifications:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param resource_type (optional)
        // @param tags (optional)
        new(rname, resource_type=null, tags=null):: {
          rname:: rname,
          [if resource_type != null then 'resource_type']: resource_type,
          [if tags != null then 'tags']: tags,
        },
      },
    },
    // aws_lb - https://www.terraform.io/docs/providers/aws/r/lb.html
    aws_lb:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param enable_cross_zone_load_balancing (optional)
      // @param enable_deletion_protection (optional)
      // @param enable_http2 (optional)
      // @param idle_timeout (optional)
      // @param load_balancer_type (optional)
      // @param name_prefix (optional)
      // @param tags (optional)
      new(rname, enable_cross_zone_load_balancing=null, enable_deletion_protection=null, enable_http2=null, idle_timeout=null, load_balancer_type=null, name_prefix=null, tags=null):: {
        rname:: rname,
        [if enable_cross_zone_load_balancing != null then 'enable_cross_zone_load_balancing']: enable_cross_zone_load_balancing,
        [if enable_deletion_protection != null then 'enable_deletion_protection']: enable_deletion_protection,
        [if enable_http2 != null then 'enable_http2']: enable_http2,
        [if idle_timeout != null then 'idle_timeout']: idle_timeout,
        [if load_balancer_type != null then 'load_balancer_type']: load_balancer_type,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_lb.%s.arn}' % rname,
        arn_suffix:: '${aws_lb.%s.arn_suffix}' % rname,
        dns_name:: '${aws_lb.%s.dns_name}' % rname,
        id:: '${aws_lb.%s.id}' % rname,
        internal:: '${aws_lb.%s.internal}' % rname,
        ip_address_type:: '${aws_lb.%s.ip_address_type}' % rname,
        name:: '${aws_lb.%s.name}' % rname,
        security_groups:: '${aws_lb.%s.security_groups}' % rname,
        subnets:: '${aws_lb.%s.subnets}' % rname,
        vpc_id:: '${aws_lb.%s.vpc_id}' % rname,
        zone_id:: '${aws_lb.%s.zone_id}' % rname,
        access_logs:: {},
        subnet_mapping:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_internal(internal):: {
        internal::: internal,
      },
      with_ip_address_type(ip_address_type):: {
        ip_address_type::: ip_address_type,
      },
      with_name(name):: {
        name::: name,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_subnets(subnets):: {
        subnets::: subnets,
      },
      with_access_logs(access_logs):: self + {
        access_logs: access_logs,
      },
      access_logs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        // @param enabled (optional)
        // @param prefix (optional)
        new(rname, bucket, enabled=null, prefix=null):: {
          rname:: rname,
          bucket: bucket,
          [if enabled != null then 'enabled']: enabled,
          [if prefix != null then 'prefix']: prefix,
        },
      },
      with_subnet_mapping(subnet_mapping):: self + {
        subnet_mapping: subnet_mapping,
      },
      subnet_mapping:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnet_id (required)
        // @param allocation_id (optional)
        new(rname, subnet_id, allocation_id=null):: {
          rname:: rname,
          subnet_id: subnet_id,
          [if allocation_id != null then 'allocation_id']: allocation_id,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_lb_cookie_stickiness_policy - https://www.terraform.io/docs/providers/aws/r/lb_cookie_stickiness_policy.html
    aws_lb_cookie_stickiness_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param lb_port (required)
      // @param load_balancer (required)
      // @param name (required)
      // @param cookie_expiration_period (optional)
      new(rname, lb_port, load_balancer, name, cookie_expiration_period=null):: {
        rname:: rname,
        lb_port: lb_port,
        load_balancer: load_balancer,
        name: name,
        [if cookie_expiration_period != null then 'cookie_expiration_period']: cookie_expiration_period,
        id:: '${aws_lb_cookie_stickiness_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lb_listener - https://www.terraform.io/docs/providers/aws/r/lb_listener.html
    aws_lb_listener:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param load_balancer_arn (required)
      // @param port (required)
      // @param certificate_arn (optional)
      // @param protocol (optional)
      // @param default_action (required)
      new(rname, load_balancer_arn, port, default_action, certificate_arn=null, protocol=null):: {
        rname:: rname,
        load_balancer_arn: load_balancer_arn,
        port: port,
        [if certificate_arn != null then 'certificate_arn']: certificate_arn,
        [if protocol != null then 'protocol']: protocol,
        arn:: '${aws_lb_listener.%s.arn}' % rname,
        id:: '${aws_lb_listener.%s.id}' % rname,
        ssl_policy:: '${aws_lb_listener.%s.ssl_policy}' % rname,
        default_action: default_action,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ssl_policy(ssl_policy):: {
        ssl_policy::: ssl_policy,
      },
      default_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param target_group_arn (optional)
        new(rname, type, target_group_arn=null):: {
          rname:: rname,
          type: type,
          [if target_group_arn != null then 'target_group_arn']: target_group_arn,
          order:: '${aws_lb_listener.%s.default_action.order}' % rname,
          authenticate_cognito:: {},
          authenticate_oidc:: {},
          fixed_response:: {},
          redirect:: {},
        },
        with_order(order):: {
          order::: order,
        },
        with_authenticate_cognito(authenticate_cognito):: self + {
          authenticate_cognito: authenticate_cognito,
        },
        authenticate_cognito:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param user_pool_arn (required)
          // @param user_pool_client_id (required)
          // @param user_pool_domain (required)
          // @param authentication_request_extra_params (optional)
          new(rname, user_pool_arn, user_pool_client_id, user_pool_domain, authentication_request_extra_params=null):: {
            rname:: rname,
            user_pool_arn: user_pool_arn,
            user_pool_client_id: user_pool_client_id,
            user_pool_domain: user_pool_domain,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_lb_listener.%s.default_action.authenticate_cognito.on_unauthenticated_request}' % rname,
            scope:: '${aws_lb_listener.%s.default_action.authenticate_cognito.scope}' % rname,
            session_cookie_name:: '${aws_lb_listener.%s.default_action.authenticate_cognito.session_cookie_name}' % rname,
            session_timeout:: '${aws_lb_listener.%s.default_action.authenticate_cognito.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_authenticate_oidc(authenticate_oidc):: self + {
          authenticate_oidc: authenticate_oidc,
        },
        authenticate_oidc:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param authorization_endpoint (required)
          // @param client_id (required)
          // @param client_secret (required)
          // @param issuer (required)
          // @param token_endpoint (required)
          // @param user_info_endpoint (required)
          // @param authentication_request_extra_params (optional)
          new(rname, authorization_endpoint, client_id, client_secret, issuer, token_endpoint, user_info_endpoint, authentication_request_extra_params=null):: {
            rname:: rname,
            authorization_endpoint: authorization_endpoint,
            client_id: client_id,
            client_secret: client_secret,
            issuer: issuer,
            token_endpoint: token_endpoint,
            user_info_endpoint: user_info_endpoint,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_lb_listener.%s.default_action.authenticate_oidc.on_unauthenticated_request}' % rname,
            scope:: '${aws_lb_listener.%s.default_action.authenticate_oidc.scope}' % rname,
            session_cookie_name:: '${aws_lb_listener.%s.default_action.authenticate_oidc.session_cookie_name}' % rname,
            session_timeout:: '${aws_lb_listener.%s.default_action.authenticate_oidc.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_fixed_response(fixed_response):: self + {
          fixed_response: fixed_response,
        },
        fixed_response:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param content_type (required)
          // @param message_body (optional)
          new(rname, content_type, message_body=null):: {
            rname:: rname,
            content_type: content_type,
            [if message_body != null then 'message_body']: message_body,
            status_code:: '${aws_lb_listener.%s.default_action.fixed_response.status_code}' % rname,
          },
          with_status_code(status_code):: {
            status_code::: status_code,
          },
        },
        with_redirect(redirect):: self + {
          redirect: redirect,
        },
        redirect:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status_code (required)
          // @param host (optional)
          // @param path (optional)
          // @param port (optional)
          // @param protocol (optional)
          // @param query (optional)
          new(rname, status_code, host=null, path=null, port=null, protocol=null, query=null):: {
            rname:: rname,
            status_code: status_code,
            [if host != null then 'host']: host,
            [if path != null then 'path']: path,
            [if port != null then 'port']: port,
            [if protocol != null then 'protocol']: protocol,
            [if query != null then 'query']: query,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param read (optional)
        new(rname, read=null):: {
          rname:: rname,
          [if read != null then 'read']: read,
        },
      },
    },
    // aws_lb_listener_certificate - https://www.terraform.io/docs/providers/aws/r/lb_listener_certificate.html
    aws_lb_listener_certificate:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate_arn (required)
      // @param listener_arn (required)
      new(rname, certificate_arn, listener_arn):: {
        rname:: rname,
        certificate_arn: certificate_arn,
        listener_arn: listener_arn,
        id:: '${aws_lb_listener_certificate.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lb_listener_rule - https://www.terraform.io/docs/providers/aws/r/lb_listener_rule.html
    aws_lb_listener_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param listener_arn (required)
      // @param action (required)
      // @param condition (required)
      new(rname, listener_arn, action, condition):: {
        rname:: rname,
        listener_arn: listener_arn,
        arn:: '${aws_lb_listener_rule.%s.arn}' % rname,
        id:: '${aws_lb_listener_rule.%s.id}' % rname,
        priority:: '${aws_lb_listener_rule.%s.priority}' % rname,
        action: action,
        condition: condition,
      },
      with_id(id):: {
        id::: id,
      },
      with_priority(priority):: {
        priority::: priority,
      },
      action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param target_group_arn (optional)
        new(rname, type, target_group_arn=null):: {
          rname:: rname,
          type: type,
          [if target_group_arn != null then 'target_group_arn']: target_group_arn,
          order:: '${aws_lb_listener_rule.%s.action.order}' % rname,
          authenticate_cognito:: {},
          authenticate_oidc:: {},
          fixed_response:: {},
          redirect:: {},
        },
        with_order(order):: {
          order::: order,
        },
        with_authenticate_cognito(authenticate_cognito):: self + {
          authenticate_cognito: authenticate_cognito,
        },
        authenticate_cognito:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param user_pool_arn (required)
          // @param user_pool_client_id (required)
          // @param user_pool_domain (required)
          // @param authentication_request_extra_params (optional)
          new(rname, user_pool_arn, user_pool_client_id, user_pool_domain, authentication_request_extra_params=null):: {
            rname:: rname,
            user_pool_arn: user_pool_arn,
            user_pool_client_id: user_pool_client_id,
            user_pool_domain: user_pool_domain,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_lb_listener_rule.%s.action.authenticate_cognito.on_unauthenticated_request}' % rname,
            scope:: '${aws_lb_listener_rule.%s.action.authenticate_cognito.scope}' % rname,
            session_cookie_name:: '${aws_lb_listener_rule.%s.action.authenticate_cognito.session_cookie_name}' % rname,
            session_timeout:: '${aws_lb_listener_rule.%s.action.authenticate_cognito.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_authenticate_oidc(authenticate_oidc):: self + {
          authenticate_oidc: authenticate_oidc,
        },
        authenticate_oidc:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param authorization_endpoint (required)
          // @param client_id (required)
          // @param client_secret (required)
          // @param issuer (required)
          // @param token_endpoint (required)
          // @param user_info_endpoint (required)
          // @param authentication_request_extra_params (optional)
          new(rname, authorization_endpoint, client_id, client_secret, issuer, token_endpoint, user_info_endpoint, authentication_request_extra_params=null):: {
            rname:: rname,
            authorization_endpoint: authorization_endpoint,
            client_id: client_id,
            client_secret: client_secret,
            issuer: issuer,
            token_endpoint: token_endpoint,
            user_info_endpoint: user_info_endpoint,
            [if authentication_request_extra_params != null then 'authentication_request_extra_params']: authentication_request_extra_params,
            on_unauthenticated_request:: '${aws_lb_listener_rule.%s.action.authenticate_oidc.on_unauthenticated_request}' % rname,
            scope:: '${aws_lb_listener_rule.%s.action.authenticate_oidc.scope}' % rname,
            session_cookie_name:: '${aws_lb_listener_rule.%s.action.authenticate_oidc.session_cookie_name}' % rname,
            session_timeout:: '${aws_lb_listener_rule.%s.action.authenticate_oidc.session_timeout}' % rname,
          },
          with_on_unauthenticated_request(on_unauthenticated_request):: {
            on_unauthenticated_request::: on_unauthenticated_request,
          },
          with_scope(scope):: {
            scope::: scope,
          },
          with_session_cookie_name(session_cookie_name):: {
            session_cookie_name::: session_cookie_name,
          },
          with_session_timeout(session_timeout):: {
            session_timeout::: session_timeout,
          },
        },
        with_fixed_response(fixed_response):: self + {
          fixed_response: fixed_response,
        },
        fixed_response:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param content_type (required)
          // @param message_body (optional)
          new(rname, content_type, message_body=null):: {
            rname:: rname,
            content_type: content_type,
            [if message_body != null then 'message_body']: message_body,
            status_code:: '${aws_lb_listener_rule.%s.action.fixed_response.status_code}' % rname,
          },
          with_status_code(status_code):: {
            status_code::: status_code,
          },
        },
        with_redirect(redirect):: self + {
          redirect: redirect,
        },
        redirect:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status_code (required)
          // @param host (optional)
          // @param path (optional)
          // @param port (optional)
          // @param protocol (optional)
          // @param query (optional)
          new(rname, status_code, host=null, path=null, port=null, protocol=null, query=null):: {
            rname:: rname,
            status_code: status_code,
            [if host != null then 'host']: host,
            [if path != null then 'path']: path,
            [if port != null then 'port']: port,
            [if protocol != null then 'protocol']: protocol,
            [if query != null then 'query']: query,
          },
        },
      },
      condition:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          field:: '${aws_lb_listener_rule.%s.condition.field}' % rname,
          values:: '${aws_lb_listener_rule.%s.condition.values}' % rname,
          host_header:: {},
          http_header:: {},
          http_request_method:: {},
          path_pattern:: {},
          query_string:: {},
          source_ip:: {},
        },
        with_field(field):: {
          field::: field,
        },
        with_values(values):: {
          values::: values,
        },
        with_host_header(host_header):: self + {
          host_header: host_header,
        },
        host_header:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            values:: '${aws_lb_listener_rule.%s.condition.host_header.values}' % rname,
          },
          with_values(values):: {
            values::: values,
          },
        },
        with_http_header(http_header):: self + {
          http_header: http_header,
        },
        http_header:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param http_header_name (required)
          // @param values (required)
          new(rname, http_header_name, values):: {
            rname:: rname,
            http_header_name: http_header_name,
            values: values,
          },
        },
        with_http_request_method(http_request_method):: self + {
          http_request_method: http_request_method,
        },
        http_request_method:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param values (required)
          new(rname, values):: {
            rname:: rname,
            values: values,
          },
        },
        with_path_pattern(path_pattern):: self + {
          path_pattern: path_pattern,
        },
        path_pattern:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            values:: '${aws_lb_listener_rule.%s.condition.path_pattern.values}' % rname,
          },
          with_values(values):: {
            values::: values,
          },
        },
        with_query_string(query_string):: self + {
          query_string: query_string,
        },
        query_string:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param value (required)
          // @param key (optional)
          new(rname, value, key=null):: {
            rname:: rname,
            value: value,
            [if key != null then 'key']: key,
          },
        },
        with_source_ip(source_ip):: self + {
          source_ip: source_ip,
        },
        source_ip:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param values (required)
          new(rname, values):: {
            rname:: rname,
            values: values,
          },
        },
      },
    },
    // aws_lb_ssl_negotiation_policy - https://www.terraform.io/docs/providers/aws/r/lb_ssl_negotiation_policy.html
    aws_lb_ssl_negotiation_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param lb_port (required)
      // @param load_balancer (required)
      // @param name (required)
      new(rname, lb_port, load_balancer, name):: {
        rname:: rname,
        lb_port: lb_port,
        load_balancer: load_balancer,
        name: name,
        id:: '${aws_lb_ssl_negotiation_policy.%s.id}' % rname,
        attribute:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_attribute(attribute):: self + {
        attribute: attribute,
      },
      attribute:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        new(rname, name, value):: {
          rname:: rname,
          name: name,
          value: value,
        },
      },
    },
    // aws_lb_target_group - https://www.terraform.io/docs/providers/aws/r/lb_target_group.html
    aws_lb_target_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deregistration_delay (optional)
      // @param lambda_multi_value_headers_enabled (optional)
      // @param name_prefix (optional)
      // @param port (optional)
      // @param protocol (optional)
      // @param proxy_protocol_v2 (optional)
      // @param slow_start (optional)
      // @param tags (optional)
      // @param target_type (optional)
      // @param vpc_id (optional)
      new(rname, deregistration_delay=null, lambda_multi_value_headers_enabled=null, name_prefix=null, port=null, protocol=null, proxy_protocol_v2=null, slow_start=null, tags=null, target_type=null, vpc_id=null):: {
        rname:: rname,
        [if deregistration_delay != null then 'deregistration_delay']: deregistration_delay,
        [if lambda_multi_value_headers_enabled != null then 'lambda_multi_value_headers_enabled']: lambda_multi_value_headers_enabled,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if port != null then 'port']: port,
        [if protocol != null then 'protocol']: protocol,
        [if proxy_protocol_v2 != null then 'proxy_protocol_v2']: proxy_protocol_v2,
        [if slow_start != null then 'slow_start']: slow_start,
        [if tags != null then 'tags']: tags,
        [if target_type != null then 'target_type']: target_type,
        [if vpc_id != null then 'vpc_id']: vpc_id,
        arn:: '${aws_lb_target_group.%s.arn}' % rname,
        arn_suffix:: '${aws_lb_target_group.%s.arn_suffix}' % rname,
        id:: '${aws_lb_target_group.%s.id}' % rname,
        load_balancing_algorithm_type:: '${aws_lb_target_group.%s.load_balancing_algorithm_type}' % rname,
        name:: '${aws_lb_target_group.%s.name}' % rname,
        health_check:: {},
        stickiness:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_load_balancing_algorithm_type(load_balancing_algorithm_type):: {
        load_balancing_algorithm_type::: load_balancing_algorithm_type,
      },
      with_name(name):: {
        name::: name,
      },
      with_health_check(health_check):: self + {
        health_check: health_check,
      },
      health_check:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        // @param healthy_threshold (optional)
        // @param interval (optional)
        // @param port (optional)
        // @param protocol (optional)
        // @param unhealthy_threshold (optional)
        new(rname, enabled=null, healthy_threshold=null, interval=null, port=null, protocol=null, unhealthy_threshold=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
          [if healthy_threshold != null then 'healthy_threshold']: healthy_threshold,
          [if interval != null then 'interval']: interval,
          [if port != null then 'port']: port,
          [if protocol != null then 'protocol']: protocol,
          [if unhealthy_threshold != null then 'unhealthy_threshold']: unhealthy_threshold,
          matcher:: '${aws_lb_target_group.%s.health_check.matcher}' % rname,
          path:: '${aws_lb_target_group.%s.health_check.path}' % rname,
          timeout:: '${aws_lb_target_group.%s.health_check.timeout}' % rname,
        },
        with_matcher(matcher):: {
          matcher::: matcher,
        },
        with_path(path):: {
          path::: path,
        },
        with_timeout(timeout):: {
          timeout::: timeout,
        },
      },
      with_stickiness(stickiness):: self + {
        stickiness: stickiness,
      },
      stickiness:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param cookie_duration (optional)
        // @param enabled (optional)
        new(rname, type, cookie_duration=null, enabled=null):: {
          rname:: rname,
          type: type,
          [if cookie_duration != null then 'cookie_duration']: cookie_duration,
          [if enabled != null then 'enabled']: enabled,
        },
      },
    },
    // aws_lb_target_group_attachment - https://www.terraform.io/docs/providers/aws/r/lb_target_group_attachment.html
    aws_lb_target_group_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param target_group_arn (required)
      // @param target_id (required)
      // @param availability_zone (optional)
      // @param port (optional)
      new(rname, target_group_arn, target_id, availability_zone=null, port=null):: {
        rname:: rname,
        target_group_arn: target_group_arn,
        target_id: target_id,
        [if availability_zone != null then 'availability_zone']: availability_zone,
        [if port != null then 'port']: port,
        id:: '${aws_lb_target_group_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_licensemanager_association - https://www.terraform.io/docs/providers/aws/r/licensemanager_association.html
    aws_licensemanager_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param license_configuration_arn (required)
      // @param resource_arn (required)
      new(rname, license_configuration_arn, resource_arn):: {
        rname:: rname,
        license_configuration_arn: license_configuration_arn,
        resource_arn: resource_arn,
        id:: '${aws_licensemanager_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_licensemanager_license_configuration - https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html
    aws_licensemanager_license_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param license_counting_type (required)
      // @param name (required)
      // @param description (optional)
      // @param license_count (optional)
      // @param license_count_hard_limit (optional)
      // @param license_rules (optional)
      // @param tags (optional)
      new(rname, license_counting_type, name, description=null, license_count=null, license_count_hard_limit=null, license_rules=null, tags=null):: {
        rname:: rname,
        license_counting_type: license_counting_type,
        name: name,
        [if description != null then 'description']: description,
        [if license_count != null then 'license_count']: license_count,
        [if license_count_hard_limit != null then 'license_count_hard_limit']: license_count_hard_limit,
        [if license_rules != null then 'license_rules']: license_rules,
        [if tags != null then 'tags']: tags,
        id:: '${aws_licensemanager_license_configuration.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lightsail_domain - https://www.terraform.io/docs/providers/aws/r/lightsail_domain.html
    aws_lightsail_domain:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain_name (required)
      new(rname, domain_name):: {
        rname:: rname,
        domain_name: domain_name,
        arn:: '${aws_lightsail_domain.%s.arn}' % rname,
        id:: '${aws_lightsail_domain.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lightsail_instance - https://www.terraform.io/docs/providers/aws/r/lightsail_instance.html
    aws_lightsail_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param availability_zone (required)
      // @param blueprint_id (required)
      // @param bundle_id (required)
      // @param name (required)
      // @param key_pair_name (optional)
      // @param tags (optional)
      // @param user_data (optional)
      new(rname, availability_zone, blueprint_id, bundle_id, name, key_pair_name=null, tags=null, user_data=null):: {
        rname:: rname,
        availability_zone: availability_zone,
        blueprint_id: blueprint_id,
        bundle_id: bundle_id,
        name: name,
        [if key_pair_name != null then 'key_pair_name']: key_pair_name,
        [if tags != null then 'tags']: tags,
        [if user_data != null then 'user_data']: user_data,
        arn:: '${aws_lightsail_instance.%s.arn}' % rname,
        cpu_count:: '${aws_lightsail_instance.%s.cpu_count}' % rname,
        created_at:: '${aws_lightsail_instance.%s.created_at}' % rname,
        id:: '${aws_lightsail_instance.%s.id}' % rname,
        ipv6_address:: '${aws_lightsail_instance.%s.ipv6_address}' % rname,
        is_static_ip:: '${aws_lightsail_instance.%s.is_static_ip}' % rname,
        private_ip_address:: '${aws_lightsail_instance.%s.private_ip_address}' % rname,
        public_ip_address:: '${aws_lightsail_instance.%s.public_ip_address}' % rname,
        ram_size:: '${aws_lightsail_instance.%s.ram_size}' % rname,
        username:: '${aws_lightsail_instance.%s.username}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lightsail_key_pair - https://www.terraform.io/docs/providers/aws/r/lightsail_key_pair.html
    aws_lightsail_key_pair:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name_prefix (optional)
      // @param pgp_key (optional)
      new(rname, name_prefix=null, pgp_key=null):: {
        rname:: rname,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if pgp_key != null then 'pgp_key']: pgp_key,
        arn:: '${aws_lightsail_key_pair.%s.arn}' % rname,
        encrypted_fingerprint:: '${aws_lightsail_key_pair.%s.encrypted_fingerprint}' % rname,
        encrypted_private_key:: '${aws_lightsail_key_pair.%s.encrypted_private_key}' % rname,
        fingerprint:: '${aws_lightsail_key_pair.%s.fingerprint}' % rname,
        id:: '${aws_lightsail_key_pair.%s.id}' % rname,
        name:: '${aws_lightsail_key_pair.%s.name}' % rname,
        private_key:: '${aws_lightsail_key_pair.%s.private_key}' % rname,
        public_key:: '${aws_lightsail_key_pair.%s.public_key}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_public_key(public_key):: {
        public_key::: public_key,
      },
    },
    // aws_lightsail_static_ip - https://www.terraform.io/docs/providers/aws/r/lightsail_static_ip.html
    aws_lightsail_static_ip:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_lightsail_static_ip.%s.arn}' % rname,
        id:: '${aws_lightsail_static_ip.%s.id}' % rname,
        ip_address:: '${aws_lightsail_static_ip.%s.ip_address}' % rname,
        support_code:: '${aws_lightsail_static_ip.%s.support_code}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_lightsail_static_ip_attachment - https://www.terraform.io/docs/providers/aws/r/lightsail_static_ip_attachment.html
    aws_lightsail_static_ip_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_name (required)
      // @param static_ip_name (required)
      new(rname, instance_name, static_ip_name):: {
        rname:: rname,
        instance_name: instance_name,
        static_ip_name: static_ip_name,
        id:: '${aws_lightsail_static_ip_attachment.%s.id}' % rname,
        ip_address:: '${aws_lightsail_static_ip_attachment.%s.ip_address}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_load_balancer_backend_server_policy - https://www.terraform.io/docs/providers/aws/r/load_balancer_backend_server_policy.html
    aws_load_balancer_backend_server_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_port (required)
      // @param load_balancer_name (required)
      // @param policy_names (optional)
      new(rname, instance_port, load_balancer_name, policy_names=null):: {
        rname:: rname,
        instance_port: instance_port,
        load_balancer_name: load_balancer_name,
        [if policy_names != null then 'policy_names']: policy_names,
        id:: '${aws_load_balancer_backend_server_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_load_balancer_listener_policy - https://www.terraform.io/docs/providers/aws/r/load_balancer_listener_policy.html
    aws_load_balancer_listener_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param load_balancer_name (required)
      // @param load_balancer_port (required)
      // @param policy_names (optional)
      new(rname, load_balancer_name, load_balancer_port, policy_names=null):: {
        rname:: rname,
        load_balancer_name: load_balancer_name,
        load_balancer_port: load_balancer_port,
        [if policy_names != null then 'policy_names']: policy_names,
        id:: '${aws_load_balancer_listener_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_load_balancer_policy - https://www.terraform.io/docs/providers/aws/r/load_balancer_policy.html
    aws_load_balancer_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param load_balancer_name (required)
      // @param policy_name (required)
      // @param policy_type_name (required)
      new(rname, load_balancer_name, policy_name, policy_type_name):: {
        rname:: rname,
        load_balancer_name: load_balancer_name,
        policy_name: policy_name,
        policy_type_name: policy_type_name,
        id:: '${aws_load_balancer_policy.%s.id}' % rname,
        policy_attribute:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_policy_attribute(policy_attribute):: self + {
        policy_attribute: policy_attribute,
      },
      policy_attribute:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (optional)
        // @param value (optional)
        new(rname, name=null, value=null):: {
          rname:: rname,
          [if name != null then 'name']: name,
          [if value != null then 'value']: value,
        },
      },
    },
    // aws_macie_member_account_association - https://www.terraform.io/docs/providers/aws/r/macie_member_account_association.html
    aws_macie_member_account_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param member_account_id (required)
      new(rname, member_account_id):: {
        rname:: rname,
        member_account_id: member_account_id,
        id:: '${aws_macie_member_account_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_macie_s3_bucket_association - https://www.terraform.io/docs/providers/aws/r/macie_s3_bucket_association.html
    aws_macie_s3_bucket_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket_name (required)
      // @param member_account_id (optional)
      // @param prefix (optional)
      new(rname, bucket_name, member_account_id=null, prefix=null):: {
        rname:: rname,
        bucket_name: bucket_name,
        [if member_account_id != null then 'member_account_id']: member_account_id,
        [if prefix != null then 'prefix']: prefix,
        id:: '${aws_macie_s3_bucket_association.%s.id}' % rname,
        classification_type:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_classification_type(classification_type):: self + {
        classification_type: classification_type,
      },
      classification_type:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param continuous (optional)
        // @param one_time (optional)
        new(rname, continuous=null, one_time=null):: {
          rname:: rname,
          [if continuous != null then 'continuous']: continuous,
          [if one_time != null then 'one_time']: one_time,
        },
      },
    },
    // aws_main_route_table_association - https://www.terraform.io/docs/providers/aws/r/main_route_table_association.html
    aws_main_route_table_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param route_table_id (required)
      // @param vpc_id (required)
      new(rname, route_table_id, vpc_id):: {
        rname:: rname,
        route_table_id: route_table_id,
        vpc_id: vpc_id,
        id:: '${aws_main_route_table_association.%s.id}' % rname,
        original_route_table_id:: '${aws_main_route_table_association.%s.original_route_table_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_media_convert_queue - https://www.terraform.io/docs/providers/aws/r/media_convert_queue.html
    aws_media_convert_queue:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param pricing_plan (optional)
      // @param status (optional)
      // @param tags (optional)
      new(rname, name, description=null, pricing_plan=null, status=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if pricing_plan != null then 'pricing_plan']: pricing_plan,
        [if status != null then 'status']: status,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_media_convert_queue.%s.arn}' % rname,
        id:: '${aws_media_convert_queue.%s.id}' % rname,
        reservation_plan_settings:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_reservation_plan_settings(reservation_plan_settings):: self + {
        reservation_plan_settings: reservation_plan_settings,
      },
      reservation_plan_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param commitment (required)
        // @param renewal_type (required)
        // @param reserved_slots (required)
        new(rname, commitment, renewal_type, reserved_slots):: {
          rname:: rname,
          commitment: commitment,
          renewal_type: renewal_type,
          reserved_slots: reserved_slots,
        },
      },
    },
    // aws_media_package_channel - https://www.terraform.io/docs/providers/aws/r/media_package_channel.html
    aws_media_package_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param channel_id (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, channel_id, description=null, tags=null):: {
        rname:: rname,
        channel_id: channel_id,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_media_package_channel.%s.arn}' % rname,
        hls_ingest:: '${aws_media_package_channel.%s.hls_ingest}' % rname,
        id:: '${aws_media_package_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_media_store_container - https://www.terraform.io/docs/providers/aws/r/media_store_container.html
    aws_media_store_container:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      new(rname, name, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_media_store_container.%s.arn}' % rname,
        endpoint:: '${aws_media_store_container.%s.endpoint}' % rname,
        id:: '${aws_media_store_container.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_media_store_container_policy - https://www.terraform.io/docs/providers/aws/r/media_store_container_policy.html
    aws_media_store_container_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param container_name (required)
      // @param policy (required)
      new(rname, container_name, policy):: {
        rname:: rname,
        container_name: container_name,
        policy: policy,
        id:: '${aws_media_store_container_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_mq_broker - https://www.terraform.io/docs/providers/aws/r/mq_broker.html
    aws_mq_broker:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param broker_name (required)
      // @param engine_type (required)
      // @param engine_version (required)
      // @param host_instance_type (required)
      // @param security_groups (required)
      // @param apply_immediately (optional)
      // @param auto_minor_version_upgrade (optional)
      // @param deployment_mode (optional)
      // @param publicly_accessible (optional)
      // @param tags (optional)
      // @param user (required)
      new(rname, broker_name, engine_type, engine_version, host_instance_type, security_groups, user, apply_immediately=null, auto_minor_version_upgrade=null, deployment_mode=null, publicly_accessible=null, tags=null):: {
        rname:: rname,
        broker_name: broker_name,
        engine_type: engine_type,
        engine_version: engine_version,
        host_instance_type: host_instance_type,
        security_groups: security_groups,
        [if apply_immediately != null then 'apply_immediately']: apply_immediately,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if deployment_mode != null then 'deployment_mode']: deployment_mode,
        [if publicly_accessible != null then 'publicly_accessible']: publicly_accessible,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_mq_broker.%s.arn}' % rname,
        id:: '${aws_mq_broker.%s.id}' % rname,
        instances:: '${aws_mq_broker.%s.instances}' % rname,
        subnet_ids:: '${aws_mq_broker.%s.subnet_ids}' % rname,
        configuration:: {},
        encryption_options:: {},
        logs:: {},
        maintenance_window_start_time:: {},
        user: user,
      },
      with_id(id):: {
        id::: id,
      },
      with_subnet_ids(subnet_ids):: {
        subnet_ids::: subnet_ids,
      },
      with_configuration(configuration):: self + {
        configuration: configuration,
      },
      configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          id:: '${aws_mq_broker.%s.configuration.id}' % rname,
          revision:: '${aws_mq_broker.%s.configuration.revision}' % rname,
        },
        with_id(id):: {
          id::: id,
        },
        with_revision(revision):: {
          revision::: revision,
        },
      },
      with_encryption_options(encryption_options):: self + {
        encryption_options: encryption_options,
      },
      encryption_options:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param use_aws_owned_key (optional)
        new(rname, use_aws_owned_key=null):: {
          rname:: rname,
          [if use_aws_owned_key != null then 'use_aws_owned_key']: use_aws_owned_key,
          kms_key_id:: '${aws_mq_broker.%s.encryption_options.kms_key_id}' % rname,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
      },
      with_logs(logs):: self + {
        logs: logs,
      },
      logs:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param audit (optional)
        // @param general (optional)
        new(rname, audit=null, general=null):: {
          rname:: rname,
          [if audit != null then 'audit']: audit,
          [if general != null then 'general']: general,
        },
      },
      with_maintenance_window_start_time(maintenance_window_start_time):: self + {
        maintenance_window_start_time: maintenance_window_start_time,
      },
      maintenance_window_start_time:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param day_of_week (required)
        // @param time_of_day (required)
        // @param time_zone (required)
        new(rname, day_of_week, time_of_day, time_zone):: {
          rname:: rname,
          day_of_week: day_of_week,
          time_of_day: time_of_day,
          time_zone: time_zone,
        },
      },
      user:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param password (required)
        // @param username (required)
        // @param console_access (optional)
        // @param groups (optional)
        new(rname, password, username, console_access=null, groups=null):: {
          rname:: rname,
          password: password,
          username: username,
          [if console_access != null then 'console_access']: console_access,
          [if groups != null then 'groups']: groups,
        },
      },
    },
    // aws_mq_configuration - https://www.terraform.io/docs/providers/aws/r/mq_configuration.html
    aws_mq_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param data (required)
      // @param engine_type (required)
      // @param engine_version (required)
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, data, engine_type, engine_version, name, description=null, tags=null):: {
        rname:: rname,
        data: data,
        engine_type: engine_type,
        engine_version: engine_version,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_mq_configuration.%s.arn}' % rname,
        id:: '${aws_mq_configuration.%s.id}' % rname,
        latest_revision:: '${aws_mq_configuration.%s.latest_revision}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_msk_cluster - https://www.terraform.io/docs/providers/aws/r/msk_cluster.html
    aws_msk_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_name (required)
      // @param kafka_version (required)
      // @param number_of_broker_nodes (required)
      // @param enhanced_monitoring (optional)
      // @param tags (optional)
      // @param broker_node_group_info (required)
      new(rname, cluster_name, kafka_version, number_of_broker_nodes, broker_node_group_info, enhanced_monitoring=null, tags=null):: {
        rname:: rname,
        cluster_name: cluster_name,
        kafka_version: kafka_version,
        number_of_broker_nodes: number_of_broker_nodes,
        [if enhanced_monitoring != null then 'enhanced_monitoring']: enhanced_monitoring,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_msk_cluster.%s.arn}' % rname,
        bootstrap_brokers:: '${aws_msk_cluster.%s.bootstrap_brokers}' % rname,
        bootstrap_brokers_tls:: '${aws_msk_cluster.%s.bootstrap_brokers_tls}' % rname,
        current_version:: '${aws_msk_cluster.%s.current_version}' % rname,
        id:: '${aws_msk_cluster.%s.id}' % rname,
        zookeeper_connect_string:: '${aws_msk_cluster.%s.zookeeper_connect_string}' % rname,
        broker_node_group_info: broker_node_group_info,
        client_authentication:: {},
        configuration_info:: {},
        encryption_info:: {},
        open_monitoring:: {},
      },
      with_id(id):: {
        id::: id,
      },
      broker_node_group_info:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param client_subnets (required)
        // @param ebs_volume_size (required)
        // @param instance_type (required)
        // @param security_groups (required)
        // @param az_distribution (optional)
        new(rname, client_subnets, ebs_volume_size, instance_type, security_groups, az_distribution=null):: {
          rname:: rname,
          client_subnets: client_subnets,
          ebs_volume_size: ebs_volume_size,
          instance_type: instance_type,
          security_groups: security_groups,
          [if az_distribution != null then 'az_distribution']: az_distribution,
        },
      },
      with_client_authentication(client_authentication):: self + {
        client_authentication: client_authentication,
      },
      client_authentication:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          tls:: {},
        },
        with_tls(tls):: self + {
          tls: tls,
        },
        tls:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param certificate_authority_arns (optional)
          new(rname, certificate_authority_arns=null):: {
            rname:: rname,
            [if certificate_authority_arns != null then 'certificate_authority_arns']: certificate_authority_arns,
          },
        },
      },
      with_configuration_info(configuration_info):: self + {
        configuration_info: configuration_info,
      },
      configuration_info:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param arn (required)
        // @param revision (required)
        new(rname, arn, revision):: {
          rname:: rname,
          arn: arn,
          revision: revision,
        },
      },
      with_encryption_info(encryption_info):: self + {
        encryption_info: encryption_info,
      },
      encryption_info:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          encryption_at_rest_kms_key_arn:: '${aws_msk_cluster.%s.encryption_info.encryption_at_rest_kms_key_arn}' % rname,
          encryption_in_transit:: {},
        },
        with_encryption_at_rest_kms_key_arn(encryption_at_rest_kms_key_arn):: {
          encryption_at_rest_kms_key_arn::: encryption_at_rest_kms_key_arn,
        },
        with_encryption_in_transit(encryption_in_transit):: self + {
          encryption_in_transit: encryption_in_transit,
        },
        encryption_in_transit:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param client_broker (optional)
          // @param in_cluster (optional)
          new(rname, client_broker=null, in_cluster=null):: {
            rname:: rname,
            [if client_broker != null then 'client_broker']: client_broker,
            [if in_cluster != null then 'in_cluster']: in_cluster,
          },
        },
      },
      with_open_monitoring(open_monitoring):: self + {
        open_monitoring: open_monitoring,
      },
      open_monitoring:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param prometheus (required)
        new(rname, prometheus):: {
          rname:: rname,
          prometheus: prometheus,
        },
        prometheus:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          new(rname):: {
            rname:: rname,
            jmx_exporter:: {},
            node_exporter:: {},
          },
          with_jmx_exporter(jmx_exporter):: self + {
            jmx_exporter: jmx_exporter,
          },
          jmx_exporter:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param enabled_in_broker (required)
            new(rname, enabled_in_broker):: {
              rname:: rname,
              enabled_in_broker: enabled_in_broker,
            },
          },
          with_node_exporter(node_exporter):: self + {
            node_exporter: node_exporter,
          },
          node_exporter:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param enabled_in_broker (required)
            new(rname, enabled_in_broker):: {
              rname:: rname,
              enabled_in_broker: enabled_in_broker,
            },
          },
        },
      },
    },
    // aws_msk_configuration - https://www.terraform.io/docs/providers/aws/r/msk_configuration.html
    aws_msk_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param kafka_versions (required)
      // @param name (required)
      // @param server_properties (required)
      // @param description (optional)
      new(rname, kafka_versions, name, server_properties, description=null):: {
        rname:: rname,
        kafka_versions: kafka_versions,
        name: name,
        server_properties: server_properties,
        [if description != null then 'description']: description,
        arn:: '${aws_msk_configuration.%s.arn}' % rname,
        id:: '${aws_msk_configuration.%s.id}' % rname,
        latest_revision:: '${aws_msk_configuration.%s.latest_revision}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_nat_gateway - https://www.terraform.io/docs/providers/aws/r/nat_gateway.html
    aws_nat_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param allocation_id (required)
      // @param subnet_id (required)
      // @param tags (optional)
      new(rname, allocation_id, subnet_id, tags=null):: {
        rname:: rname,
        allocation_id: allocation_id,
        subnet_id: subnet_id,
        [if tags != null then 'tags']: tags,
        id:: '${aws_nat_gateway.%s.id}' % rname,
        network_interface_id:: '${aws_nat_gateway.%s.network_interface_id}' % rname,
        private_ip:: '${aws_nat_gateway.%s.private_ip}' % rname,
        public_ip:: '${aws_nat_gateway.%s.public_ip}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_neptune_cluster - https://www.terraform.io/docs/providers/aws/r/neptune_cluster.html
    aws_neptune_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param backup_retention_period (optional)
      // @param deletion_protection (optional)
      // @param enable_cloudwatch_logs_exports (optional)
      // @param engine (optional)
      // @param final_snapshot_identifier (optional)
      // @param iam_database_authentication_enabled (optional)
      // @param iam_roles (optional)
      // @param neptune_cluster_parameter_group_name (optional)
      // @param port (optional)
      // @param replication_source_identifier (optional)
      // @param skip_final_snapshot (optional)
      // @param snapshot_identifier (optional)
      // @param storage_encrypted (optional)
      // @param tags (optional)
      new(rname, backup_retention_period=null, deletion_protection=null, enable_cloudwatch_logs_exports=null, engine=null, final_snapshot_identifier=null, iam_database_authentication_enabled=null, iam_roles=null, neptune_cluster_parameter_group_name=null, port=null, replication_source_identifier=null, skip_final_snapshot=null, snapshot_identifier=null, storage_encrypted=null, tags=null):: {
        rname:: rname,
        [if backup_retention_period != null then 'backup_retention_period']: backup_retention_period,
        [if deletion_protection != null then 'deletion_protection']: deletion_protection,
        [if enable_cloudwatch_logs_exports != null then 'enable_cloudwatch_logs_exports']: enable_cloudwatch_logs_exports,
        [if engine != null then 'engine']: engine,
        [if final_snapshot_identifier != null then 'final_snapshot_identifier']: final_snapshot_identifier,
        [if iam_database_authentication_enabled != null then 'iam_database_authentication_enabled']: iam_database_authentication_enabled,
        [if iam_roles != null then 'iam_roles']: iam_roles,
        [if neptune_cluster_parameter_group_name != null then 'neptune_cluster_parameter_group_name']: neptune_cluster_parameter_group_name,
        [if port != null then 'port']: port,
        [if replication_source_identifier != null then 'replication_source_identifier']: replication_source_identifier,
        [if skip_final_snapshot != null then 'skip_final_snapshot']: skip_final_snapshot,
        [if snapshot_identifier != null then 'snapshot_identifier']: snapshot_identifier,
        [if storage_encrypted != null then 'storage_encrypted']: storage_encrypted,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_neptune_cluster.%s.apply_immediately}' % rname,
        arn:: '${aws_neptune_cluster.%s.arn}' % rname,
        availability_zones:: '${aws_neptune_cluster.%s.availability_zones}' % rname,
        cluster_identifier:: '${aws_neptune_cluster.%s.cluster_identifier}' % rname,
        cluster_identifier_prefix:: '${aws_neptune_cluster.%s.cluster_identifier_prefix}' % rname,
        cluster_members:: '${aws_neptune_cluster.%s.cluster_members}' % rname,
        cluster_resource_id:: '${aws_neptune_cluster.%s.cluster_resource_id}' % rname,
        endpoint:: '${aws_neptune_cluster.%s.endpoint}' % rname,
        engine_version:: '${aws_neptune_cluster.%s.engine_version}' % rname,
        hosted_zone_id:: '${aws_neptune_cluster.%s.hosted_zone_id}' % rname,
        id:: '${aws_neptune_cluster.%s.id}' % rname,
        kms_key_arn:: '${aws_neptune_cluster.%s.kms_key_arn}' % rname,
        neptune_subnet_group_name:: '${aws_neptune_cluster.%s.neptune_subnet_group_name}' % rname,
        preferred_backup_window:: '${aws_neptune_cluster.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_neptune_cluster.%s.preferred_maintenance_window}' % rname,
        reader_endpoint:: '${aws_neptune_cluster.%s.reader_endpoint}' % rname,
        vpc_security_group_ids:: '${aws_neptune_cluster.%s.vpc_security_group_ids}' % rname,
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zones(availability_zones):: {
        availability_zones::: availability_zones,
      },
      with_cluster_identifier(cluster_identifier):: {
        cluster_identifier::: cluster_identifier,
      },
      with_cluster_identifier_prefix(cluster_identifier_prefix):: {
        cluster_identifier_prefix::: cluster_identifier_prefix,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_arn(kms_key_arn):: {
        kms_key_arn::: kms_key_arn,
      },
      with_neptune_subnet_group_name(neptune_subnet_group_name):: {
        neptune_subnet_group_name::: neptune_subnet_group_name,
      },
      with_preferred_backup_window(preferred_backup_window):: {
        preferred_backup_window::: preferred_backup_window,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_neptune_cluster_instance - https://www.terraform.io/docs/providers/aws/r/neptune_cluster_instance.html
    aws_neptune_cluster_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_identifier (required)
      // @param instance_class (required)
      // @param auto_minor_version_upgrade (optional)
      // @param engine (optional)
      // @param neptune_parameter_group_name (optional)
      // @param port (optional)
      // @param promotion_tier (optional)
      // @param publicly_accessible (optional)
      // @param tags (optional)
      new(rname, cluster_identifier, instance_class, auto_minor_version_upgrade=null, engine=null, neptune_parameter_group_name=null, port=null, promotion_tier=null, publicly_accessible=null, tags=null):: {
        rname:: rname,
        cluster_identifier: cluster_identifier,
        instance_class: instance_class,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if engine != null then 'engine']: engine,
        [if neptune_parameter_group_name != null then 'neptune_parameter_group_name']: neptune_parameter_group_name,
        [if port != null then 'port']: port,
        [if promotion_tier != null then 'promotion_tier']: promotion_tier,
        [if publicly_accessible != null then 'publicly_accessible']: publicly_accessible,
        [if tags != null then 'tags']: tags,
        address:: '${aws_neptune_cluster_instance.%s.address}' % rname,
        apply_immediately:: '${aws_neptune_cluster_instance.%s.apply_immediately}' % rname,
        arn:: '${aws_neptune_cluster_instance.%s.arn}' % rname,
        availability_zone:: '${aws_neptune_cluster_instance.%s.availability_zone}' % rname,
        dbi_resource_id:: '${aws_neptune_cluster_instance.%s.dbi_resource_id}' % rname,
        endpoint:: '${aws_neptune_cluster_instance.%s.endpoint}' % rname,
        engine_version:: '${aws_neptune_cluster_instance.%s.engine_version}' % rname,
        id:: '${aws_neptune_cluster_instance.%s.id}' % rname,
        identifier:: '${aws_neptune_cluster_instance.%s.identifier}' % rname,
        identifier_prefix:: '${aws_neptune_cluster_instance.%s.identifier_prefix}' % rname,
        kms_key_arn:: '${aws_neptune_cluster_instance.%s.kms_key_arn}' % rname,
        neptune_subnet_group_name:: '${aws_neptune_cluster_instance.%s.neptune_subnet_group_name}' % rname,
        preferred_backup_window:: '${aws_neptune_cluster_instance.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_neptune_cluster_instance.%s.preferred_maintenance_window}' % rname,
        storage_encrypted:: '${aws_neptune_cluster_instance.%s.storage_encrypted}' % rname,
        writer:: '${aws_neptune_cluster_instance.%s.writer}' % rname,
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_identifier(identifier):: {
        identifier::: identifier,
      },
      with_identifier_prefix(identifier_prefix):: {
        identifier_prefix::: identifier_prefix,
      },
      with_neptune_subnet_group_name(neptune_subnet_group_name):: {
        neptune_subnet_group_name::: neptune_subnet_group_name,
      },
      with_preferred_backup_window(preferred_backup_window):: {
        preferred_backup_window::: preferred_backup_window,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_neptune_cluster_parameter_group - https://www.terraform.io/docs/providers/aws/r/neptune_cluster_parameter_group.html
    aws_neptune_cluster_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, description=null, tags=null):: {
        rname:: rname,
        family: family,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_neptune_cluster_parameter_group.%s.arn}' % rname,
        id:: '${aws_neptune_cluster_parameter_group.%s.id}' % rname,
        name:: '${aws_neptune_cluster_parameter_group.%s.name}' % rname,
        name_prefix:: '${aws_neptune_cluster_parameter_group.%s.name_prefix}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        // @param apply_method (optional)
        new(rname, name, value, apply_method=null):: {
          rname:: rname,
          name: name,
          value: value,
          [if apply_method != null then 'apply_method']: apply_method,
        },
      },
    },
    // aws_neptune_cluster_snapshot - https://www.terraform.io/docs/providers/aws/r/neptune_cluster_snapshot.html
    aws_neptune_cluster_snapshot:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_cluster_identifier (required)
      // @param db_cluster_snapshot_identifier (required)
      new(rname, db_cluster_identifier, db_cluster_snapshot_identifier):: {
        rname:: rname,
        db_cluster_identifier: db_cluster_identifier,
        db_cluster_snapshot_identifier: db_cluster_snapshot_identifier,
        allocated_storage:: '${aws_neptune_cluster_snapshot.%s.allocated_storage}' % rname,
        availability_zones:: '${aws_neptune_cluster_snapshot.%s.availability_zones}' % rname,
        db_cluster_snapshot_arn:: '${aws_neptune_cluster_snapshot.%s.db_cluster_snapshot_arn}' % rname,
        engine:: '${aws_neptune_cluster_snapshot.%s.engine}' % rname,
        engine_version:: '${aws_neptune_cluster_snapshot.%s.engine_version}' % rname,
        id:: '${aws_neptune_cluster_snapshot.%s.id}' % rname,
        kms_key_id:: '${aws_neptune_cluster_snapshot.%s.kms_key_id}' % rname,
        license_model:: '${aws_neptune_cluster_snapshot.%s.license_model}' % rname,
        port:: '${aws_neptune_cluster_snapshot.%s.port}' % rname,
        snapshot_type:: '${aws_neptune_cluster_snapshot.%s.snapshot_type}' % rname,
        source_db_cluster_snapshot_arn:: '${aws_neptune_cluster_snapshot.%s.source_db_cluster_snapshot_arn}' % rname,
        status:: '${aws_neptune_cluster_snapshot.%s.status}' % rname,
        storage_encrypted:: '${aws_neptune_cluster_snapshot.%s.storage_encrypted}' % rname,
        vpc_id:: '${aws_neptune_cluster_snapshot.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_neptune_event_subscription - https://www.terraform.io/docs/providers/aws/r/neptune_event_subscription.html
    aws_neptune_event_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param sns_topic_arn (required)
      // @param enabled (optional)
      // @param event_categories (optional)
      // @param source_ids (optional)
      // @param source_type (optional)
      // @param tags (optional)
      new(rname, sns_topic_arn, enabled=null, event_categories=null, source_ids=null, source_type=null, tags=null):: {
        rname:: rname,
        sns_topic_arn: sns_topic_arn,
        [if enabled != null then 'enabled']: enabled,
        [if event_categories != null then 'event_categories']: event_categories,
        [if source_ids != null then 'source_ids']: source_ids,
        [if source_type != null then 'source_type']: source_type,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_neptune_event_subscription.%s.arn}' % rname,
        customer_aws_id:: '${aws_neptune_event_subscription.%s.customer_aws_id}' % rname,
        id:: '${aws_neptune_event_subscription.%s.id}' % rname,
        name:: '${aws_neptune_event_subscription.%s.name}' % rname,
        name_prefix:: '${aws_neptune_event_subscription.%s.name_prefix}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_neptune_parameter_group - https://www.terraform.io/docs/providers/aws/r/neptune_parameter_group.html
    aws_neptune_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, name, description=null, tags=null):: {
        rname:: rname,
        family: family,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_neptune_parameter_group.%s.arn}' % rname,
        id:: '${aws_neptune_parameter_group.%s.id}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        // @param apply_method (optional)
        new(rname, name, value, apply_method=null):: {
          rname:: rname,
          name: name,
          value: value,
          [if apply_method != null then 'apply_method']: apply_method,
        },
      },
    },
    // aws_neptune_subnet_group - https://www.terraform.io/docs/providers/aws/r/neptune_subnet_group.html
    aws_neptune_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_ids (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, subnet_ids, description=null, tags=null):: {
        rname:: rname,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_neptune_subnet_group.%s.arn}' % rname,
        id:: '${aws_neptune_subnet_group.%s.id}' % rname,
        name:: '${aws_neptune_subnet_group.%s.name}' % rname,
        name_prefix:: '${aws_neptune_subnet_group.%s.name_prefix}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
    },
    // aws_network_acl - https://www.terraform.io/docs/providers/aws/r/network_acl.html
    aws_network_acl:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_id (required)
      // @param subnet_id (optional)
      // @param tags (optional)
      new(rname, vpc_id, subnet_id=null, tags=null):: {
        rname:: rname,
        vpc_id: vpc_id,
        [if subnet_id != null then 'subnet_id']: subnet_id,
        [if tags != null then 'tags']: tags,
        egress:: '${aws_network_acl.%s.egress}' % rname,
        id:: '${aws_network_acl.%s.id}' % rname,
        ingress:: '${aws_network_acl.%s.ingress}' % rname,
        owner_id:: '${aws_network_acl.%s.owner_id}' % rname,
        subnet_ids:: '${aws_network_acl.%s.subnet_ids}' % rname,
      },
      with_egress(egress):: {
        egress::: egress,
      },
      with_id(id):: {
        id::: id,
      },
      with_ingress(ingress):: {
        ingress::: ingress,
      },
      with_subnet_ids(subnet_ids):: {
        subnet_ids::: subnet_ids,
      },
    },
    // aws_network_acl_rule - https://www.terraform.io/docs/providers/aws/r/network_acl_rule.html
    aws_network_acl_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param network_acl_id (required)
      // @param protocol (required)
      // @param rule_action (required)
      // @param rule_number (required)
      // @param cidr_block (optional)
      // @param egress (optional)
      // @param from_port (optional)
      // @param icmp_code (optional)
      // @param icmp_type (optional)
      // @param ipv6_cidr_block (optional)
      // @param to_port (optional)
      new(rname, network_acl_id, protocol, rule_action, rule_number, cidr_block=null, egress=null, from_port=null, icmp_code=null, icmp_type=null, ipv6_cidr_block=null, to_port=null):: {
        rname:: rname,
        network_acl_id: network_acl_id,
        protocol: protocol,
        rule_action: rule_action,
        rule_number: rule_number,
        [if cidr_block != null then 'cidr_block']: cidr_block,
        [if egress != null then 'egress']: egress,
        [if from_port != null then 'from_port']: from_port,
        [if icmp_code != null then 'icmp_code']: icmp_code,
        [if icmp_type != null then 'icmp_type']: icmp_type,
        [if ipv6_cidr_block != null then 'ipv6_cidr_block']: ipv6_cidr_block,
        [if to_port != null then 'to_port']: to_port,
        id:: '${aws_network_acl_rule.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_network_interface - https://www.terraform.io/docs/providers/aws/r/network_interface.html
    aws_network_interface:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_id (required)
      // @param description (optional)
      // @param source_dest_check (optional)
      // @param tags (optional)
      new(rname, subnet_id, description=null, source_dest_check=null, tags=null):: {
        rname:: rname,
        subnet_id: subnet_id,
        [if description != null then 'description']: description,
        [if source_dest_check != null then 'source_dest_check']: source_dest_check,
        [if tags != null then 'tags']: tags,
        id:: '${aws_network_interface.%s.id}' % rname,
        mac_address:: '${aws_network_interface.%s.mac_address}' % rname,
        private_dns_name:: '${aws_network_interface.%s.private_dns_name}' % rname,
        private_ip:: '${aws_network_interface.%s.private_ip}' % rname,
        private_ips:: '${aws_network_interface.%s.private_ips}' % rname,
        private_ips_count:: '${aws_network_interface.%s.private_ips_count}' % rname,
        security_groups:: '${aws_network_interface.%s.security_groups}' % rname,
        attachment:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_private_ip(private_ip):: {
        private_ip::: private_ip,
      },
      with_private_ips(private_ips):: {
        private_ips::: private_ips,
      },
      with_private_ips_count(private_ips_count):: {
        private_ips_count::: private_ips_count,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_attachment(attachment):: self + {
        attachment: attachment,
      },
      attachment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_index (required)
        // @param instance (required)
        new(rname, device_index, instance):: {
          rname:: rname,
          device_index: device_index,
          instance: instance,
          attachment_id:: '${aws_network_interface.%s.attachment.attachment_id}' % rname,
        },
      },
    },
    // aws_network_interface_attachment - https://www.terraform.io/docs/providers/aws/r/network_interface_attachment.html
    aws_network_interface_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param device_index (required)
      // @param instance_id (required)
      // @param network_interface_id (required)
      new(rname, device_index, instance_id, network_interface_id):: {
        rname:: rname,
        device_index: device_index,
        instance_id: instance_id,
        network_interface_id: network_interface_id,
        attachment_id:: '${aws_network_interface_attachment.%s.attachment_id}' % rname,
        id:: '${aws_network_interface_attachment.%s.id}' % rname,
        status:: '${aws_network_interface_attachment.%s.status}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_network_interface_sg_attachment - https://www.terraform.io/docs/providers/aws/r/network_interface_sg_attachment.html
    aws_network_interface_sg_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param network_interface_id (required)
      // @param security_group_id (required)
      new(rname, network_interface_id, security_group_id):: {
        rname:: rname,
        network_interface_id: network_interface_id,
        security_group_id: security_group_id,
        id:: '${aws_network_interface_sg_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_opsworks_application - https://www.terraform.io/docs/providers/aws/r/opsworks_application.html
    aws_opsworks_application:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param stack_id (required)
      // @param type (required)
      // @param auto_bundle_on_deploy (optional)
      // @param aws_flow_ruby_settings (optional)
      // @param data_source_arn (optional)
      // @param data_source_database_name (optional)
      // @param data_source_type (optional)
      // @param description (optional)
      // @param document_root (optional)
      // @param domains (optional)
      // @param enable_ssl (optional)
      // @param rails_env (optional)
      new(rname, name, stack_id, type, auto_bundle_on_deploy=null, aws_flow_ruby_settings=null, data_source_arn=null, data_source_database_name=null, data_source_type=null, description=null, document_root=null, domains=null, enable_ssl=null, rails_env=null):: {
        rname:: rname,
        name: name,
        stack_id: stack_id,
        type: type,
        [if auto_bundle_on_deploy != null then 'auto_bundle_on_deploy']: auto_bundle_on_deploy,
        [if aws_flow_ruby_settings != null then 'aws_flow_ruby_settings']: aws_flow_ruby_settings,
        [if data_source_arn != null then 'data_source_arn']: data_source_arn,
        [if data_source_database_name != null then 'data_source_database_name']: data_source_database_name,
        [if data_source_type != null then 'data_source_type']: data_source_type,
        [if description != null then 'description']: description,
        [if document_root != null then 'document_root']: document_root,
        [if domains != null then 'domains']: domains,
        [if enable_ssl != null then 'enable_ssl']: enable_ssl,
        [if rails_env != null then 'rails_env']: rails_env,
        id:: '${aws_opsworks_application.%s.id}' % rname,
        short_name:: '${aws_opsworks_application.%s.short_name}' % rname,
        app_source:: {},
        environment:: {},
        ssl_configuration:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_short_name(short_name):: {
        short_name::: short_name,
      },
      with_app_source(app_source):: self + {
        app_source: app_source,
      },
      app_source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param password (optional)
        // @param revision (optional)
        // @param ssh_key (optional)
        // @param url (optional)
        // @param username (optional)
        new(rname, type, password=null, revision=null, ssh_key=null, url=null, username=null):: {
          rname:: rname,
          type: type,
          [if password != null then 'password']: password,
          [if revision != null then 'revision']: revision,
          [if ssh_key != null then 'ssh_key']: ssh_key,
          [if url != null then 'url']: url,
          [if username != null then 'username']: username,
        },
      },
      with_environment(environment):: self + {
        environment: environment,
      },
      environment:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param value (required)
        // @param secure (optional)
        new(rname, key, value, secure=null):: {
          rname:: rname,
          key: key,
          value: value,
          [if secure != null then 'secure']: secure,
        },
      },
      with_ssl_configuration(ssl_configuration):: self + {
        ssl_configuration: ssl_configuration,
      },
      ssl_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param certificate (required)
        // @param private_key (required)
        // @param chain (optional)
        new(rname, certificate, private_key, chain=null):: {
          rname:: rname,
          certificate: certificate,
          private_key: private_key,
          [if chain != null then 'chain']: chain,
        },
      },
    },
    // aws_opsworks_custom_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_custom_layer.html
    aws_opsworks_custom_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param short_name (required)
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, name, short_name, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        name: name,
        short_name: short_name,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_custom_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_ganglia_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_ganglia_layer.html
    aws_opsworks_ganglia_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param password (required)
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param system_packages (optional)
      // @param url (optional)
      // @param use_ebs_optimized_instances (optional)
      // @param username (optional)
      new(rname, password, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, system_packages=null, url=null, use_ebs_optimized_instances=null, username=null):: {
        rname:: rname,
        password: password,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if system_packages != null then 'system_packages']: system_packages,
        [if url != null then 'url']: url,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        [if username != null then 'username']: username,
        id:: '${aws_opsworks_ganglia_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_haproxy_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_haproxy_layer.html
    aws_opsworks_haproxy_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param stats_password (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param healthcheck_method (optional)
      // @param healthcheck_url (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param stats_enabled (optional)
      // @param stats_url (optional)
      // @param stats_user (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, stats_password, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, healthcheck_method=null, healthcheck_url=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, stats_enabled=null, stats_url=null, stats_user=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        stats_password: stats_password,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if healthcheck_method != null then 'healthcheck_method']: healthcheck_method,
        [if healthcheck_url != null then 'healthcheck_url']: healthcheck_url,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if stats_enabled != null then 'stats_enabled']: stats_enabled,
        [if stats_url != null then 'stats_url']: stats_url,
        [if stats_user != null then 'stats_user']: stats_user,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_haproxy_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_instance - https://www.terraform.io/docs/providers/aws/r/opsworks_instance.html
    aws_opsworks_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param layer_ids (required)
      // @param stack_id (required)
      // @param agent_version (optional)
      // @param architecture (optional)
      // @param auto_scaling_type (optional)
      // @param delete_ebs (optional)
      // @param delete_eip (optional)
      // @param ebs_optimized (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_type (optional)
      // @param state (optional)
      new(rname, layer_ids, stack_id, agent_version=null, architecture=null, auto_scaling_type=null, delete_ebs=null, delete_eip=null, ebs_optimized=null, install_updates_on_boot=null, instance_type=null, state=null):: {
        rname:: rname,
        layer_ids: layer_ids,
        stack_id: stack_id,
        [if agent_version != null then 'agent_version']: agent_version,
        [if architecture != null then 'architecture']: architecture,
        [if auto_scaling_type != null then 'auto_scaling_type']: auto_scaling_type,
        [if delete_ebs != null then 'delete_ebs']: delete_ebs,
        [if delete_eip != null then 'delete_eip']: delete_eip,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_type != null then 'instance_type']: instance_type,
        [if state != null then 'state']: state,
        ami_id:: '${aws_opsworks_instance.%s.ami_id}' % rname,
        availability_zone:: '${aws_opsworks_instance.%s.availability_zone}' % rname,
        created_at:: '${aws_opsworks_instance.%s.created_at}' % rname,
        ec2_instance_id:: '${aws_opsworks_instance.%s.ec2_instance_id}' % rname,
        ecs_cluster_arn:: '${aws_opsworks_instance.%s.ecs_cluster_arn}' % rname,
        elastic_ip:: '${aws_opsworks_instance.%s.elastic_ip}' % rname,
        hostname:: '${aws_opsworks_instance.%s.hostname}' % rname,
        id:: '${aws_opsworks_instance.%s.id}' % rname,
        infrastructure_class:: '${aws_opsworks_instance.%s.infrastructure_class}' % rname,
        instance_profile_arn:: '${aws_opsworks_instance.%s.instance_profile_arn}' % rname,
        last_service_error_id:: '${aws_opsworks_instance.%s.last_service_error_id}' % rname,
        os:: '${aws_opsworks_instance.%s.os}' % rname,
        platform:: '${aws_opsworks_instance.%s.platform}' % rname,
        private_dns:: '${aws_opsworks_instance.%s.private_dns}' % rname,
        private_ip:: '${aws_opsworks_instance.%s.private_ip}' % rname,
        public_dns:: '${aws_opsworks_instance.%s.public_dns}' % rname,
        public_ip:: '${aws_opsworks_instance.%s.public_ip}' % rname,
        registered_by:: '${aws_opsworks_instance.%s.registered_by}' % rname,
        reported_agent_version:: '${aws_opsworks_instance.%s.reported_agent_version}' % rname,
        reported_os_family:: '${aws_opsworks_instance.%s.reported_os_family}' % rname,
        reported_os_name:: '${aws_opsworks_instance.%s.reported_os_name}' % rname,
        reported_os_version:: '${aws_opsworks_instance.%s.reported_os_version}' % rname,
        root_device_type:: '${aws_opsworks_instance.%s.root_device_type}' % rname,
        root_device_volume_id:: '${aws_opsworks_instance.%s.root_device_volume_id}' % rname,
        security_group_ids:: '${aws_opsworks_instance.%s.security_group_ids}' % rname,
        ssh_host_dsa_key_fingerprint:: '${aws_opsworks_instance.%s.ssh_host_dsa_key_fingerprint}' % rname,
        ssh_host_rsa_key_fingerprint:: '${aws_opsworks_instance.%s.ssh_host_rsa_key_fingerprint}' % rname,
        ssh_key_name:: '${aws_opsworks_instance.%s.ssh_key_name}' % rname,
        status:: '${aws_opsworks_instance.%s.status}' % rname,
        subnet_id:: '${aws_opsworks_instance.%s.subnet_id}' % rname,
        tenancy:: '${aws_opsworks_instance.%s.tenancy}' % rname,
        virtualization_type:: '${aws_opsworks_instance.%s.virtualization_type}' % rname,
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        root_block_device:: {},
        timeouts:: {},
      },
      with_ami_id(ami_id):: {
        ami_id::: ami_id,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_created_at(created_at):: {
        created_at::: created_at,
      },
      with_ecs_cluster_arn(ecs_cluster_arn):: {
        ecs_cluster_arn::: ecs_cluster_arn,
      },
      with_elastic_ip(elastic_ip):: {
        elastic_ip::: elastic_ip,
      },
      with_hostname(hostname):: {
        hostname::: hostname,
      },
      with_id(id):: {
        id::: id,
      },
      with_infrastructure_class(infrastructure_class):: {
        infrastructure_class::: infrastructure_class,
      },
      with_instance_profile_arn(instance_profile_arn):: {
        instance_profile_arn::: instance_profile_arn,
      },
      with_last_service_error_id(last_service_error_id):: {
        last_service_error_id::: last_service_error_id,
      },
      with_os(os):: {
        os::: os,
      },
      with_platform(platform):: {
        platform::: platform,
      },
      with_private_dns(private_dns):: {
        private_dns::: private_dns,
      },
      with_private_ip(private_ip):: {
        private_ip::: private_ip,
      },
      with_public_dns(public_dns):: {
        public_dns::: public_dns,
      },
      with_public_ip(public_ip):: {
        public_ip::: public_ip,
      },
      with_registered_by(registered_by):: {
        registered_by::: registered_by,
      },
      with_reported_agent_version(reported_agent_version):: {
        reported_agent_version::: reported_agent_version,
      },
      with_reported_os_family(reported_os_family):: {
        reported_os_family::: reported_os_family,
      },
      with_reported_os_name(reported_os_name):: {
        reported_os_name::: reported_os_name,
      },
      with_reported_os_version(reported_os_version):: {
        reported_os_version::: reported_os_version,
      },
      with_root_device_type(root_device_type):: {
        root_device_type::: root_device_type,
      },
      with_root_device_volume_id(root_device_volume_id):: {
        root_device_volume_id::: root_device_volume_id,
      },
      with_security_group_ids(security_group_ids):: {
        security_group_ids::: security_group_ids,
      },
      with_ssh_host_dsa_key_fingerprint(ssh_host_dsa_key_fingerprint):: {
        ssh_host_dsa_key_fingerprint::: ssh_host_dsa_key_fingerprint,
      },
      with_ssh_host_rsa_key_fingerprint(ssh_host_rsa_key_fingerprint):: {
        ssh_host_rsa_key_fingerprint::: ssh_host_rsa_key_fingerprint,
      },
      with_ssh_key_name(ssh_key_name):: {
        ssh_key_name::: ssh_key_name,
      },
      with_status(status):: {
        status::: status,
      },
      with_subnet_id(subnet_id):: {
        subnet_id::: subnet_id,
      },
      with_tenancy(tenancy):: {
        tenancy::: tenancy,
      },
      with_virtualization_type(virtualization_type):: {
        virtualization_type::: virtualization_type,
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param delete_on_termination (optional)
        new(rname, device_name, delete_on_termination=null):: {
          rname:: rname,
          device_name: device_name,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          iops:: '${aws_opsworks_instance.%s.ebs_block_device.iops}' % rname,
          snapshot_id:: '${aws_opsworks_instance.%s.ebs_block_device.snapshot_id}' % rname,
          volume_size:: '${aws_opsworks_instance.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_opsworks_instance.%s.ebs_block_device.volume_type}' % rname,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_snapshot_id(snapshot_id):: {
          snapshot_id::: snapshot_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param virtual_name (required)
        new(rname, device_name, virtual_name):: {
          rname:: rname,
          device_name: device_name,
          virtual_name: virtual_name,
        },
      },
      with_root_block_device(root_block_device):: self + {
        root_block_device: root_block_device,
      },
      root_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete_on_termination (optional)
        new(rname, delete_on_termination=null):: {
          rname:: rname,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          iops:: '${aws_opsworks_instance.%s.root_block_device.iops}' % rname,
          volume_size:: '${aws_opsworks_instance.%s.root_block_device.volume_size}' % rname,
          volume_type:: '${aws_opsworks_instance.%s.root_block_device.volume_type}' % rname,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_opsworks_java_app_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_java_app_layer.html
    aws_opsworks_java_app_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param app_server (optional)
      // @param app_server_version (optional)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param jvm_options (optional)
      // @param jvm_type (optional)
      // @param jvm_version (optional)
      // @param name (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, app_server=null, app_server_version=null, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, jvm_options=null, jvm_type=null, jvm_version=null, name=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if app_server != null then 'app_server']: app_server,
        [if app_server_version != null then 'app_server_version']: app_server_version,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if jvm_options != null then 'jvm_options']: jvm_options,
        [if jvm_type != null then 'jvm_type']: jvm_type,
        [if jvm_version != null then 'jvm_version']: jvm_version,
        [if name != null then 'name']: name,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_java_app_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_memcached_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_memcached_layer.html
    aws_opsworks_memcached_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param allocated_memory (optional)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, allocated_memory=null, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if allocated_memory != null then 'allocated_memory']: allocated_memory,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_memcached_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_mysql_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_mysql_layer.html
    aws_opsworks_mysql_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param root_password (optional)
      // @param root_password_on_all_instances (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, root_password=null, root_password_on_all_instances=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if root_password != null then 'root_password']: root_password,
        [if root_password_on_all_instances != null then 'root_password_on_all_instances']: root_password_on_all_instances,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_mysql_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_nodejs_app_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_nodejs_app_layer.html
    aws_opsworks_nodejs_app_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param nodejs_version (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, nodejs_version=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if nodejs_version != null then 'nodejs_version']: nodejs_version,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_nodejs_app_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_permission - https://www.terraform.io/docs/providers/aws/r/opsworks_permission.html
    aws_opsworks_permission:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param user_arn (required)
      new(rname, user_arn):: {
        rname:: rname,
        user_arn: user_arn,
        allow_ssh:: '${aws_opsworks_permission.%s.allow_ssh}' % rname,
        allow_sudo:: '${aws_opsworks_permission.%s.allow_sudo}' % rname,
        id:: '${aws_opsworks_permission.%s.id}' % rname,
        level:: '${aws_opsworks_permission.%s.level}' % rname,
        stack_id:: '${aws_opsworks_permission.%s.stack_id}' % rname,
      },
      with_allow_ssh(allow_ssh):: {
        allow_ssh::: allow_ssh,
      },
      with_allow_sudo(allow_sudo):: {
        allow_sudo::: allow_sudo,
      },
      with_id(id):: {
        id::: id,
      },
      with_level(level):: {
        level::: level,
      },
      with_stack_id(stack_id):: {
        stack_id::: stack_id,
      },
    },
    // aws_opsworks_php_app_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_php_app_layer.html
    aws_opsworks_php_app_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_php_app_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_rails_app_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_rails_app_layer.html
    aws_opsworks_rails_app_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param app_server (optional)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param bundler_version (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param manage_bundler (optional)
      // @param name (optional)
      // @param passenger_version (optional)
      // @param ruby_version (optional)
      // @param rubygems_version (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, app_server=null, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, bundler_version=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, manage_bundler=null, name=null, passenger_version=null, ruby_version=null, rubygems_version=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if app_server != null then 'app_server']: app_server,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if bundler_version != null then 'bundler_version']: bundler_version,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if manage_bundler != null then 'manage_bundler']: manage_bundler,
        [if name != null then 'name']: name,
        [if passenger_version != null then 'passenger_version']: passenger_version,
        [if ruby_version != null then 'ruby_version']: ruby_version,
        [if rubygems_version != null then 'rubygems_version']: rubygems_version,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_rails_app_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_rds_db_instance - https://www.terraform.io/docs/providers/aws/r/opsworks_rds_db_instance.html
    aws_opsworks_rds_db_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param db_password (required)
      // @param db_user (required)
      // @param rds_db_instance_arn (required)
      // @param stack_id (required)
      new(rname, db_password, db_user, rds_db_instance_arn, stack_id):: {
        rname:: rname,
        db_password: db_password,
        db_user: db_user,
        rds_db_instance_arn: rds_db_instance_arn,
        stack_id: stack_id,
        id:: '${aws_opsworks_rds_db_instance.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_opsworks_stack - https://www.terraform.io/docs/providers/aws/r/opsworks_stack.html
    aws_opsworks_stack:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param default_instance_profile_arn (required)
      // @param name (required)
      // @param region (required)
      // @param service_role_arn (required)
      // @param berkshelf_version (optional)
      // @param color (optional)
      // @param configuration_manager_name (optional)
      // @param configuration_manager_version (optional)
      // @param custom_json (optional)
      // @param default_os (optional)
      // @param default_root_device_type (optional)
      // @param default_ssh_key_name (optional)
      // @param hostname_theme (optional)
      // @param manage_berkshelf (optional)
      // @param tags (optional)
      // @param use_custom_cookbooks (optional)
      // @param use_opsworks_security_groups (optional)
      new(rname, default_instance_profile_arn, name, region, service_role_arn, berkshelf_version=null, color=null, configuration_manager_name=null, configuration_manager_version=null, custom_json=null, default_os=null, default_root_device_type=null, default_ssh_key_name=null, hostname_theme=null, manage_berkshelf=null, tags=null, use_custom_cookbooks=null, use_opsworks_security_groups=null):: {
        rname:: rname,
        default_instance_profile_arn: default_instance_profile_arn,
        name: name,
        region: region,
        service_role_arn: service_role_arn,
        [if berkshelf_version != null then 'berkshelf_version']: berkshelf_version,
        [if color != null then 'color']: color,
        [if configuration_manager_name != null then 'configuration_manager_name']: configuration_manager_name,
        [if configuration_manager_version != null then 'configuration_manager_version']: configuration_manager_version,
        [if custom_json != null then 'custom_json']: custom_json,
        [if default_os != null then 'default_os']: default_os,
        [if default_root_device_type != null then 'default_root_device_type']: default_root_device_type,
        [if default_ssh_key_name != null then 'default_ssh_key_name']: default_ssh_key_name,
        [if hostname_theme != null then 'hostname_theme']: hostname_theme,
        [if manage_berkshelf != null then 'manage_berkshelf']: manage_berkshelf,
        [if tags != null then 'tags']: tags,
        [if use_custom_cookbooks != null then 'use_custom_cookbooks']: use_custom_cookbooks,
        [if use_opsworks_security_groups != null then 'use_opsworks_security_groups']: use_opsworks_security_groups,
        agent_version:: '${aws_opsworks_stack.%s.agent_version}' % rname,
        arn:: '${aws_opsworks_stack.%s.arn}' % rname,
        default_availability_zone:: '${aws_opsworks_stack.%s.default_availability_zone}' % rname,
        default_subnet_id:: '${aws_opsworks_stack.%s.default_subnet_id}' % rname,
        id:: '${aws_opsworks_stack.%s.id}' % rname,
        stack_endpoint:: '${aws_opsworks_stack.%s.stack_endpoint}' % rname,
        vpc_id:: '${aws_opsworks_stack.%s.vpc_id}' % rname,
        custom_cookbooks_source:: {},
      },
      with_agent_version(agent_version):: {
        agent_version::: agent_version,
      },
      with_default_availability_zone(default_availability_zone):: {
        default_availability_zone::: default_availability_zone,
      },
      with_default_subnet_id(default_subnet_id):: {
        default_subnet_id::: default_subnet_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_vpc_id(vpc_id):: {
        vpc_id::: vpc_id,
      },
      with_custom_cookbooks_source(custom_cookbooks_source):: self + {
        custom_cookbooks_source: custom_cookbooks_source,
      },
      custom_cookbooks_source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param url (required)
        // @param password (optional)
        // @param revision (optional)
        // @param ssh_key (optional)
        // @param username (optional)
        new(rname, type, url, password=null, revision=null, ssh_key=null, username=null):: {
          rname:: rname,
          type: type,
          url: url,
          [if password != null then 'password']: password,
          [if revision != null then 'revision']: revision,
          [if ssh_key != null then 'ssh_key']: ssh_key,
          [if username != null then 'username']: username,
        },
      },
    },
    // aws_opsworks_static_web_layer - https://www.terraform.io/docs/providers/aws/r/opsworks_static_web_layer.html
    aws_opsworks_static_web_layer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param stack_id (required)
      // @param auto_assign_elastic_ips (optional)
      // @param auto_assign_public_ips (optional)
      // @param auto_healing (optional)
      // @param custom_configure_recipes (optional)
      // @param custom_deploy_recipes (optional)
      // @param custom_instance_profile_arn (optional)
      // @param custom_json (optional)
      // @param custom_security_group_ids (optional)
      // @param custom_setup_recipes (optional)
      // @param custom_shutdown_recipes (optional)
      // @param custom_undeploy_recipes (optional)
      // @param drain_elb_on_shutdown (optional)
      // @param elastic_load_balancer (optional)
      // @param install_updates_on_boot (optional)
      // @param instance_shutdown_timeout (optional)
      // @param name (optional)
      // @param system_packages (optional)
      // @param use_ebs_optimized_instances (optional)
      new(rname, stack_id, auto_assign_elastic_ips=null, auto_assign_public_ips=null, auto_healing=null, custom_configure_recipes=null, custom_deploy_recipes=null, custom_instance_profile_arn=null, custom_json=null, custom_security_group_ids=null, custom_setup_recipes=null, custom_shutdown_recipes=null, custom_undeploy_recipes=null, drain_elb_on_shutdown=null, elastic_load_balancer=null, install_updates_on_boot=null, instance_shutdown_timeout=null, name=null, system_packages=null, use_ebs_optimized_instances=null):: {
        rname:: rname,
        stack_id: stack_id,
        [if auto_assign_elastic_ips != null then 'auto_assign_elastic_ips']: auto_assign_elastic_ips,
        [if auto_assign_public_ips != null then 'auto_assign_public_ips']: auto_assign_public_ips,
        [if auto_healing != null then 'auto_healing']: auto_healing,
        [if custom_configure_recipes != null then 'custom_configure_recipes']: custom_configure_recipes,
        [if custom_deploy_recipes != null then 'custom_deploy_recipes']: custom_deploy_recipes,
        [if custom_instance_profile_arn != null then 'custom_instance_profile_arn']: custom_instance_profile_arn,
        [if custom_json != null then 'custom_json']: custom_json,
        [if custom_security_group_ids != null then 'custom_security_group_ids']: custom_security_group_ids,
        [if custom_setup_recipes != null then 'custom_setup_recipes']: custom_setup_recipes,
        [if custom_shutdown_recipes != null then 'custom_shutdown_recipes']: custom_shutdown_recipes,
        [if custom_undeploy_recipes != null then 'custom_undeploy_recipes']: custom_undeploy_recipes,
        [if drain_elb_on_shutdown != null then 'drain_elb_on_shutdown']: drain_elb_on_shutdown,
        [if elastic_load_balancer != null then 'elastic_load_balancer']: elastic_load_balancer,
        [if install_updates_on_boot != null then 'install_updates_on_boot']: install_updates_on_boot,
        [if instance_shutdown_timeout != null then 'instance_shutdown_timeout']: instance_shutdown_timeout,
        [if name != null then 'name']: name,
        [if system_packages != null then 'system_packages']: system_packages,
        [if use_ebs_optimized_instances != null then 'use_ebs_optimized_instances']: use_ebs_optimized_instances,
        id:: '${aws_opsworks_static_web_layer.%s.id}' % rname,
        ebs_volume:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ebs_volume(ebs_volume):: self + {
        ebs_volume: ebs_volume,
      },
      ebs_volume:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param mount_point (required)
        // @param number_of_disks (required)
        // @param size (required)
        // @param encrypted (optional)
        // @param iops (optional)
        // @param raid_level (optional)
        // @param type (optional)
        new(rname, mount_point, number_of_disks, size, encrypted=null, iops=null, raid_level=null, type=null):: {
          rname:: rname,
          mount_point: mount_point,
          number_of_disks: number_of_disks,
          size: size,
          [if encrypted != null then 'encrypted']: encrypted,
          [if iops != null then 'iops']: iops,
          [if raid_level != null then 'raid_level']: raid_level,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_opsworks_user_profile - https://www.terraform.io/docs/providers/aws/r/opsworks_user_profile.html
    aws_opsworks_user_profile:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param ssh_username (required)
      // @param user_arn (required)
      // @param allow_self_management (optional)
      // @param ssh_public_key (optional)
      new(rname, ssh_username, user_arn, allow_self_management=null, ssh_public_key=null):: {
        rname:: rname,
        ssh_username: ssh_username,
        user_arn: user_arn,
        [if allow_self_management != null then 'allow_self_management']: allow_self_management,
        [if ssh_public_key != null then 'ssh_public_key']: ssh_public_key,
        id:: '${aws_opsworks_user_profile.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_organizations_account - https://www.terraform.io/docs/providers/aws/r/organizations_account.html
    aws_organizations_account:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param email (required)
      // @param name (required)
      // @param iam_user_access_to_billing (optional)
      // @param role_name (optional)
      // @param tags (optional)
      new(rname, email, name, iam_user_access_to_billing=null, role_name=null, tags=null):: {
        rname:: rname,
        email: email,
        name: name,
        [if iam_user_access_to_billing != null then 'iam_user_access_to_billing']: iam_user_access_to_billing,
        [if role_name != null then 'role_name']: role_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_organizations_account.%s.arn}' % rname,
        id:: '${aws_organizations_account.%s.id}' % rname,
        joined_method:: '${aws_organizations_account.%s.joined_method}' % rname,
        joined_timestamp:: '${aws_organizations_account.%s.joined_timestamp}' % rname,
        parent_id:: '${aws_organizations_account.%s.parent_id}' % rname,
        status:: '${aws_organizations_account.%s.status}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_parent_id(parent_id):: {
        parent_id::: parent_id,
      },
    },
    // aws_organizations_organization - https://www.terraform.io/docs/providers/aws/r/organizations_organization.html
    aws_organizations_organization:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param aws_service_access_principals (optional)
      // @param enabled_policy_types (optional)
      // @param feature_set (optional)
      new(rname, aws_service_access_principals=null, enabled_policy_types=null, feature_set=null):: {
        rname:: rname,
        [if aws_service_access_principals != null then 'aws_service_access_principals']: aws_service_access_principals,
        [if enabled_policy_types != null then 'enabled_policy_types']: enabled_policy_types,
        [if feature_set != null then 'feature_set']: feature_set,
        accounts:: '${aws_organizations_organization.%s.accounts}' % rname,
        arn:: '${aws_organizations_organization.%s.arn}' % rname,
        id:: '${aws_organizations_organization.%s.id}' % rname,
        master_account_arn:: '${aws_organizations_organization.%s.master_account_arn}' % rname,
        master_account_email:: '${aws_organizations_organization.%s.master_account_email}' % rname,
        master_account_id:: '${aws_organizations_organization.%s.master_account_id}' % rname,
        non_master_accounts:: '${aws_organizations_organization.%s.non_master_accounts}' % rname,
        roots:: '${aws_organizations_organization.%s.roots}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_organizations_organizational_unit - https://www.terraform.io/docs/providers/aws/r/organizations_organizational_unit.html
    aws_organizations_organizational_unit:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param parent_id (required)
      new(rname, name, parent_id):: {
        rname:: rname,
        name: name,
        parent_id: parent_id,
        accounts:: '${aws_organizations_organizational_unit.%s.accounts}' % rname,
        arn:: '${aws_organizations_organizational_unit.%s.arn}' % rname,
        id:: '${aws_organizations_organizational_unit.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_organizations_policy - https://www.terraform.io/docs/providers/aws/r/organizations_policy.html
    aws_organizations_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param content (required)
      // @param name (required)
      // @param description (optional)
      // @param type (optional)
      new(rname, content, name, description=null, type=null):: {
        rname:: rname,
        content: content,
        name: name,
        [if description != null then 'description']: description,
        [if type != null then 'type']: type,
        arn:: '${aws_organizations_policy.%s.arn}' % rname,
        id:: '${aws_organizations_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_organizations_policy_attachment - https://www.terraform.io/docs/providers/aws/r/organizations_policy_attachment.html
    aws_organizations_policy_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy_id (required)
      // @param target_id (required)
      new(rname, policy_id, target_id):: {
        rname:: rname,
        policy_id: policy_id,
        target_id: target_id,
        id:: '${aws_organizations_policy_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_adm_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_adm_channel.html
    aws_pinpoint_adm_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param client_id (required)
      // @param client_secret (required)
      // @param enabled (optional)
      new(rname, application_id, client_id, client_secret, enabled=null):: {
        rname:: rname,
        application_id: application_id,
        client_id: client_id,
        client_secret: client_secret,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_pinpoint_adm_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_apns_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_apns_channel.html
    aws_pinpoint_apns_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param bundle_id (optional)
      // @param certificate (optional)
      // @param default_authentication_method (optional)
      // @param enabled (optional)
      // @param private_key (optional)
      // @param team_id (optional)
      // @param token_key (optional)
      // @param token_key_id (optional)
      new(rname, application_id, bundle_id=null, certificate=null, default_authentication_method=null, enabled=null, private_key=null, team_id=null, token_key=null, token_key_id=null):: {
        rname:: rname,
        application_id: application_id,
        [if bundle_id != null then 'bundle_id']: bundle_id,
        [if certificate != null then 'certificate']: certificate,
        [if default_authentication_method != null then 'default_authentication_method']: default_authentication_method,
        [if enabled != null then 'enabled']: enabled,
        [if private_key != null then 'private_key']: private_key,
        [if team_id != null then 'team_id']: team_id,
        [if token_key != null then 'token_key']: token_key,
        [if token_key_id != null then 'token_key_id']: token_key_id,
        id:: '${aws_pinpoint_apns_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_apns_sandbox_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_apns_sandbox_channel.html
    aws_pinpoint_apns_sandbox_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param bundle_id (optional)
      // @param certificate (optional)
      // @param default_authentication_method (optional)
      // @param enabled (optional)
      // @param private_key (optional)
      // @param team_id (optional)
      // @param token_key (optional)
      // @param token_key_id (optional)
      new(rname, application_id, bundle_id=null, certificate=null, default_authentication_method=null, enabled=null, private_key=null, team_id=null, token_key=null, token_key_id=null):: {
        rname:: rname,
        application_id: application_id,
        [if bundle_id != null then 'bundle_id']: bundle_id,
        [if certificate != null then 'certificate']: certificate,
        [if default_authentication_method != null then 'default_authentication_method']: default_authentication_method,
        [if enabled != null then 'enabled']: enabled,
        [if private_key != null then 'private_key']: private_key,
        [if team_id != null then 'team_id']: team_id,
        [if token_key != null then 'token_key']: token_key,
        [if token_key_id != null then 'token_key_id']: token_key_id,
        id:: '${aws_pinpoint_apns_sandbox_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_apns_voip_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_apns_voip_channel.html
    aws_pinpoint_apns_voip_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param bundle_id (optional)
      // @param certificate (optional)
      // @param default_authentication_method (optional)
      // @param enabled (optional)
      // @param private_key (optional)
      // @param team_id (optional)
      // @param token_key (optional)
      // @param token_key_id (optional)
      new(rname, application_id, bundle_id=null, certificate=null, default_authentication_method=null, enabled=null, private_key=null, team_id=null, token_key=null, token_key_id=null):: {
        rname:: rname,
        application_id: application_id,
        [if bundle_id != null then 'bundle_id']: bundle_id,
        [if certificate != null then 'certificate']: certificate,
        [if default_authentication_method != null then 'default_authentication_method']: default_authentication_method,
        [if enabled != null then 'enabled']: enabled,
        [if private_key != null then 'private_key']: private_key,
        [if team_id != null then 'team_id']: team_id,
        [if token_key != null then 'token_key']: token_key,
        [if token_key_id != null then 'token_key_id']: token_key_id,
        id:: '${aws_pinpoint_apns_voip_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_apns_voip_sandbox_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_apns_voip_sandbox_channel.html
    aws_pinpoint_apns_voip_sandbox_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param bundle_id (optional)
      // @param certificate (optional)
      // @param default_authentication_method (optional)
      // @param enabled (optional)
      // @param private_key (optional)
      // @param team_id (optional)
      // @param token_key (optional)
      // @param token_key_id (optional)
      new(rname, application_id, bundle_id=null, certificate=null, default_authentication_method=null, enabled=null, private_key=null, team_id=null, token_key=null, token_key_id=null):: {
        rname:: rname,
        application_id: application_id,
        [if bundle_id != null then 'bundle_id']: bundle_id,
        [if certificate != null then 'certificate']: certificate,
        [if default_authentication_method != null then 'default_authentication_method']: default_authentication_method,
        [if enabled != null then 'enabled']: enabled,
        [if private_key != null then 'private_key']: private_key,
        [if team_id != null then 'team_id']: team_id,
        [if token_key != null then 'token_key']: token_key,
        [if token_key_id != null then 'token_key_id']: token_key_id,
        id:: '${aws_pinpoint_apns_voip_sandbox_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_app - https://www.terraform.io/docs/providers/aws/r/pinpoint_app.html
    aws_pinpoint_app:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name_prefix (optional)
      // @param tags (optional)
      new(rname, name_prefix=null, tags=null):: {
        rname:: rname,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if tags != null then 'tags']: tags,
        application_id:: '${aws_pinpoint_app.%s.application_id}' % rname,
        arn:: '${aws_pinpoint_app.%s.arn}' % rname,
        id:: '${aws_pinpoint_app.%s.id}' % rname,
        name:: '${aws_pinpoint_app.%s.name}' % rname,
        campaign_hook:: {},
        limits:: {},
        quiet_time:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_campaign_hook(campaign_hook):: self + {
        campaign_hook: campaign_hook,
      },
      campaign_hook:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param lambda_function_name (optional)
        // @param mode (optional)
        // @param web_url (optional)
        new(rname, lambda_function_name=null, mode=null, web_url=null):: {
          rname:: rname,
          [if lambda_function_name != null then 'lambda_function_name']: lambda_function_name,
          [if mode != null then 'mode']: mode,
          [if web_url != null then 'web_url']: web_url,
        },
      },
      with_limits(limits):: self + {
        limits: limits,
      },
      limits:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param daily (optional)
        // @param maximum_duration (optional)
        // @param messages_per_second (optional)
        // @param total (optional)
        new(rname, daily=null, maximum_duration=null, messages_per_second=null, total=null):: {
          rname:: rname,
          [if daily != null then 'daily']: daily,
          [if maximum_duration != null then 'maximum_duration']: maximum_duration,
          [if messages_per_second != null then 'messages_per_second']: messages_per_second,
          [if total != null then 'total']: total,
        },
      },
      with_quiet_time(quiet_time):: self + {
        quiet_time: quiet_time,
      },
      quiet_time:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param end (optional)
        // @param start (optional)
        new(rname, end=null, start=null):: {
          rname:: rname,
          [if end != null then 'end']: end,
          [if start != null then 'start']: start,
        },
      },
    },
    // aws_pinpoint_baidu_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_baidu_channel.html
    aws_pinpoint_baidu_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_key (required)
      // @param application_id (required)
      // @param secret_key (required)
      // @param enabled (optional)
      new(rname, api_key, application_id, secret_key, enabled=null):: {
        rname:: rname,
        api_key: api_key,
        application_id: application_id,
        secret_key: secret_key,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_pinpoint_baidu_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_email_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_email_channel.html
    aws_pinpoint_email_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param from_address (required)
      // @param identity (required)
      // @param role_arn (required)
      // @param enabled (optional)
      new(rname, application_id, from_address, identity, role_arn, enabled=null):: {
        rname:: rname,
        application_id: application_id,
        from_address: from_address,
        identity: identity,
        role_arn: role_arn,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_pinpoint_email_channel.%s.id}' % rname,
        messages_per_second:: '${aws_pinpoint_email_channel.%s.messages_per_second}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_event_stream - https://www.terraform.io/docs/providers/aws/r/pinpoint_event_stream.html
    aws_pinpoint_event_stream:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param destination_stream_arn (required)
      // @param role_arn (required)
      new(rname, application_id, destination_stream_arn, role_arn):: {
        rname:: rname,
        application_id: application_id,
        destination_stream_arn: destination_stream_arn,
        role_arn: role_arn,
        id:: '${aws_pinpoint_event_stream.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_gcm_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_gcm_channel.html
    aws_pinpoint_gcm_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param api_key (required)
      // @param application_id (required)
      // @param enabled (optional)
      new(rname, api_key, application_id, enabled=null):: {
        rname:: rname,
        api_key: api_key,
        application_id: application_id,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_pinpoint_gcm_channel.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_pinpoint_sms_channel - https://www.terraform.io/docs/providers/aws/r/pinpoint_sms_channel.html
    aws_pinpoint_sms_channel:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_id (required)
      // @param enabled (optional)
      // @param sender_id (optional)
      // @param short_code (optional)
      new(rname, application_id, enabled=null, sender_id=null, short_code=null):: {
        rname:: rname,
        application_id: application_id,
        [if enabled != null then 'enabled']: enabled,
        [if sender_id != null then 'sender_id']: sender_id,
        [if short_code != null then 'short_code']: short_code,
        id:: '${aws_pinpoint_sms_channel.%s.id}' % rname,
        promotional_messages_per_second:: '${aws_pinpoint_sms_channel.%s.promotional_messages_per_second}' % rname,
        transactional_messages_per_second:: '${aws_pinpoint_sms_channel.%s.transactional_messages_per_second}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_placement_group - https://www.terraform.io/docs/providers/aws/r/placement_group.html
    aws_placement_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param strategy (required)
      // @param tags (optional)
      new(rname, name, strategy, tags=null):: {
        rname:: rname,
        name: name,
        strategy: strategy,
        [if tags != null then 'tags']: tags,
        id:: '${aws_placement_group.%s.id}' % rname,
        placement_group_id:: '${aws_placement_group.%s.placement_group_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_proxy_protocol_policy - https://www.terraform.io/docs/providers/aws/r/proxy_protocol_policy.html
    aws_proxy_protocol_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_ports (required)
      // @param load_balancer (required)
      new(rname, instance_ports, load_balancer):: {
        rname:: rname,
        instance_ports: instance_ports,
        load_balancer: load_balancer,
        id:: '${aws_proxy_protocol_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_qldb_ledger - https://www.terraform.io/docs/providers/aws/r/qldb_ledger.html
    aws_qldb_ledger:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param deletion_protection (optional)
      // @param tags (optional)
      new(rname, deletion_protection=null, tags=null):: {
        rname:: rname,
        [if deletion_protection != null then 'deletion_protection']: deletion_protection,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_qldb_ledger.%s.arn}' % rname,
        id:: '${aws_qldb_ledger.%s.id}' % rname,
        name:: '${aws_qldb_ledger.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_quicksight_group - https://www.terraform.io/docs/providers/aws/r/quicksight_group.html
    aws_quicksight_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param group_name (required)
      // @param description (optional)
      // @param namespace (optional)
      new(rname, group_name, description=null, namespace=null):: {
        rname:: rname,
        group_name: group_name,
        [if description != null then 'description']: description,
        [if namespace != null then 'namespace']: namespace,
        arn:: '${aws_quicksight_group.%s.arn}' % rname,
        aws_account_id:: '${aws_quicksight_group.%s.aws_account_id}' % rname,
        id:: '${aws_quicksight_group.%s.id}' % rname,
      },
      with_aws_account_id(aws_account_id):: {
        aws_account_id::: aws_account_id,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_quicksight_user - https://www.terraform.io/docs/providers/aws/r/quicksight_user.html
    aws_quicksight_user:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param email (required)
      // @param identity_type (required)
      // @param user_role (required)
      // @param iam_arn (optional)
      // @param namespace (optional)
      // @param session_name (optional)
      // @param user_name (optional)
      new(rname, email, identity_type, user_role, iam_arn=null, namespace=null, session_name=null, user_name=null):: {
        rname:: rname,
        email: email,
        identity_type: identity_type,
        user_role: user_role,
        [if iam_arn != null then 'iam_arn']: iam_arn,
        [if namespace != null then 'namespace']: namespace,
        [if session_name != null then 'session_name']: session_name,
        [if user_name != null then 'user_name']: user_name,
        arn:: '${aws_quicksight_user.%s.arn}' % rname,
        aws_account_id:: '${aws_quicksight_user.%s.aws_account_id}' % rname,
        id:: '${aws_quicksight_user.%s.id}' % rname,
      },
      with_aws_account_id(aws_account_id):: {
        aws_account_id::: aws_account_id,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ram_principal_association - https://www.terraform.io/docs/providers/aws/r/ram_principal_association.html
    aws_ram_principal_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param principal (required)
      // @param resource_share_arn (required)
      new(rname, principal, resource_share_arn):: {
        rname:: rname,
        principal: principal,
        resource_share_arn: resource_share_arn,
        id:: '${aws_ram_principal_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ram_resource_association - https://www.terraform.io/docs/providers/aws/r/ram_resource_association.html
    aws_ram_resource_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param resource_arn (required)
      // @param resource_share_arn (required)
      new(rname, resource_arn, resource_share_arn):: {
        rname:: rname,
        resource_arn: resource_arn,
        resource_share_arn: resource_share_arn,
        id:: '${aws_ram_resource_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ram_resource_share - https://www.terraform.io/docs/providers/aws/r/ram_resource_share.html
    aws_ram_resource_share:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param allow_external_principals (optional)
      // @param tags (optional)
      new(rname, name, allow_external_principals=null, tags=null):: {
        rname:: rname,
        name: name,
        [if allow_external_principals != null then 'allow_external_principals']: allow_external_principals,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_ram_resource_share.%s.arn}' % rname,
        id:: '${aws_ram_resource_share.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_ram_resource_share_accepter - https://www.terraform.io/docs/providers/aws/r/ram_resource_share_accepter.html
    aws_ram_resource_share_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param share_arn (required)
      new(rname, share_arn):: {
        rname:: rname,
        share_arn: share_arn,
        id:: '${aws_ram_resource_share_accepter.%s.id}' % rname,
        invitation_arn:: '${aws_ram_resource_share_accepter.%s.invitation_arn}' % rname,
        receiver_account_id:: '${aws_ram_resource_share_accepter.%s.receiver_account_id}' % rname,
        resources:: '${aws_ram_resource_share_accepter.%s.resources}' % rname,
        sender_account_id:: '${aws_ram_resource_share_accepter.%s.sender_account_id}' % rname,
        share_id:: '${aws_ram_resource_share_accepter.%s.share_id}' % rname,
        share_name:: '${aws_ram_resource_share_accepter.%s.share_name}' % rname,
        status:: '${aws_ram_resource_share_accepter.%s.status}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_rds_cluster - https://www.terraform.io/docs/providers/aws/r/rds_cluster.html
    aws_rds_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param backtrack_window (optional)
      // @param backup_retention_period (optional)
      // @param copy_tags_to_snapshot (optional)
      // @param deletion_protection (optional)
      // @param enable_http_endpoint (optional)
      // @param enabled_cloudwatch_logs_exports (optional)
      // @param engine (optional)
      // @param engine_mode (optional)
      // @param final_snapshot_identifier (optional)
      // @param global_cluster_identifier (optional)
      // @param iam_database_authentication_enabled (optional)
      // @param iam_roles (optional)
      // @param master_password (optional)
      // @param replication_source_identifier (optional)
      // @param skip_final_snapshot (optional)
      // @param snapshot_identifier (optional)
      // @param source_region (optional)
      // @param storage_encrypted (optional)
      // @param tags (optional)
      new(rname, backtrack_window=null, backup_retention_period=null, copy_tags_to_snapshot=null, deletion_protection=null, enable_http_endpoint=null, enabled_cloudwatch_logs_exports=null, engine=null, engine_mode=null, final_snapshot_identifier=null, global_cluster_identifier=null, iam_database_authentication_enabled=null, iam_roles=null, master_password=null, replication_source_identifier=null, skip_final_snapshot=null, snapshot_identifier=null, source_region=null, storage_encrypted=null, tags=null):: {
        rname:: rname,
        [if backtrack_window != null then 'backtrack_window']: backtrack_window,
        [if backup_retention_period != null then 'backup_retention_period']: backup_retention_period,
        [if copy_tags_to_snapshot != null then 'copy_tags_to_snapshot']: copy_tags_to_snapshot,
        [if deletion_protection != null then 'deletion_protection']: deletion_protection,
        [if enable_http_endpoint != null then 'enable_http_endpoint']: enable_http_endpoint,
        [if enabled_cloudwatch_logs_exports != null then 'enabled_cloudwatch_logs_exports']: enabled_cloudwatch_logs_exports,
        [if engine != null then 'engine']: engine,
        [if engine_mode != null then 'engine_mode']: engine_mode,
        [if final_snapshot_identifier != null then 'final_snapshot_identifier']: final_snapshot_identifier,
        [if global_cluster_identifier != null then 'global_cluster_identifier']: global_cluster_identifier,
        [if iam_database_authentication_enabled != null then 'iam_database_authentication_enabled']: iam_database_authentication_enabled,
        [if iam_roles != null then 'iam_roles']: iam_roles,
        [if master_password != null then 'master_password']: master_password,
        [if replication_source_identifier != null then 'replication_source_identifier']: replication_source_identifier,
        [if skip_final_snapshot != null then 'skip_final_snapshot']: skip_final_snapshot,
        [if snapshot_identifier != null then 'snapshot_identifier']: snapshot_identifier,
        [if source_region != null then 'source_region']: source_region,
        [if storage_encrypted != null then 'storage_encrypted']: storage_encrypted,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_rds_cluster.%s.apply_immediately}' % rname,
        arn:: '${aws_rds_cluster.%s.arn}' % rname,
        availability_zones:: '${aws_rds_cluster.%s.availability_zones}' % rname,
        cluster_identifier:: '${aws_rds_cluster.%s.cluster_identifier}' % rname,
        cluster_identifier_prefix:: '${aws_rds_cluster.%s.cluster_identifier_prefix}' % rname,
        cluster_members:: '${aws_rds_cluster.%s.cluster_members}' % rname,
        cluster_resource_id:: '${aws_rds_cluster.%s.cluster_resource_id}' % rname,
        database_name:: '${aws_rds_cluster.%s.database_name}' % rname,
        db_cluster_parameter_group_name:: '${aws_rds_cluster.%s.db_cluster_parameter_group_name}' % rname,
        db_subnet_group_name:: '${aws_rds_cluster.%s.db_subnet_group_name}' % rname,
        endpoint:: '${aws_rds_cluster.%s.endpoint}' % rname,
        engine_version:: '${aws_rds_cluster.%s.engine_version}' % rname,
        hosted_zone_id:: '${aws_rds_cluster.%s.hosted_zone_id}' % rname,
        id:: '${aws_rds_cluster.%s.id}' % rname,
        kms_key_id:: '${aws_rds_cluster.%s.kms_key_id}' % rname,
        master_username:: '${aws_rds_cluster.%s.master_username}' % rname,
        port:: '${aws_rds_cluster.%s.port}' % rname,
        preferred_backup_window:: '${aws_rds_cluster.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_rds_cluster.%s.preferred_maintenance_window}' % rname,
        reader_endpoint:: '${aws_rds_cluster.%s.reader_endpoint}' % rname,
        vpc_security_group_ids:: '${aws_rds_cluster.%s.vpc_security_group_ids}' % rname,
        s3_import:: {},
        scaling_configuration:: {},
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zones(availability_zones):: {
        availability_zones::: availability_zones,
      },
      with_cluster_identifier(cluster_identifier):: {
        cluster_identifier::: cluster_identifier,
      },
      with_cluster_identifier_prefix(cluster_identifier_prefix):: {
        cluster_identifier_prefix::: cluster_identifier_prefix,
      },
      with_cluster_members(cluster_members):: {
        cluster_members::: cluster_members,
      },
      with_database_name(database_name):: {
        database_name::: database_name,
      },
      with_db_cluster_parameter_group_name(db_cluster_parameter_group_name):: {
        db_cluster_parameter_group_name::: db_cluster_parameter_group_name,
      },
      with_db_subnet_group_name(db_subnet_group_name):: {
        db_subnet_group_name::: db_subnet_group_name,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_master_username(master_username):: {
        master_username::: master_username,
      },
      with_port(port):: {
        port::: port,
      },
      with_preferred_backup_window(preferred_backup_window):: {
        preferred_backup_window::: preferred_backup_window,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_s3_import(s3_import):: self + {
        s3_import: s3_import,
      },
      s3_import:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_name (required)
        // @param ingestion_role (required)
        // @param source_engine (required)
        // @param source_engine_version (required)
        // @param bucket_prefix (optional)
        new(rname, bucket_name, ingestion_role, source_engine, source_engine_version, bucket_prefix=null):: {
          rname:: rname,
          bucket_name: bucket_name,
          ingestion_role: ingestion_role,
          source_engine: source_engine,
          source_engine_version: source_engine_version,
          [if bucket_prefix != null then 'bucket_prefix']: bucket_prefix,
        },
      },
      with_scaling_configuration(scaling_configuration):: self + {
        scaling_configuration: scaling_configuration,
      },
      scaling_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param auto_pause (optional)
        // @param max_capacity (optional)
        // @param min_capacity (optional)
        // @param seconds_until_auto_pause (optional)
        // @param timeout_action (optional)
        new(rname, auto_pause=null, max_capacity=null, min_capacity=null, seconds_until_auto_pause=null, timeout_action=null):: {
          rname:: rname,
          [if auto_pause != null then 'auto_pause']: auto_pause,
          [if max_capacity != null then 'max_capacity']: max_capacity,
          [if min_capacity != null then 'min_capacity']: min_capacity,
          [if seconds_until_auto_pause != null then 'seconds_until_auto_pause']: seconds_until_auto_pause,
          [if timeout_action != null then 'timeout_action']: timeout_action,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_rds_cluster_endpoint - https://www.terraform.io/docs/providers/aws/r/rds_cluster_endpoint.html
    aws_rds_cluster_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_endpoint_identifier (required)
      // @param cluster_identifier (required)
      // @param custom_endpoint_type (required)
      // @param excluded_members (optional)
      // @param static_members (optional)
      // @param tags (optional)
      new(rname, cluster_endpoint_identifier, cluster_identifier, custom_endpoint_type, excluded_members=null, static_members=null, tags=null):: {
        rname:: rname,
        cluster_endpoint_identifier: cluster_endpoint_identifier,
        cluster_identifier: cluster_identifier,
        custom_endpoint_type: custom_endpoint_type,
        [if excluded_members != null then 'excluded_members']: excluded_members,
        [if static_members != null then 'static_members']: static_members,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_rds_cluster_endpoint.%s.arn}' % rname,
        endpoint:: '${aws_rds_cluster_endpoint.%s.endpoint}' % rname,
        id:: '${aws_rds_cluster_endpoint.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_rds_cluster_instance - https://www.terraform.io/docs/providers/aws/r/rds_cluster_instance.html
    aws_rds_cluster_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_identifier (required)
      // @param instance_class (required)
      // @param auto_minor_version_upgrade (optional)
      // @param copy_tags_to_snapshot (optional)
      // @param engine (optional)
      // @param monitoring_interval (optional)
      // @param promotion_tier (optional)
      // @param publicly_accessible (optional)
      // @param tags (optional)
      new(rname, cluster_identifier, instance_class, auto_minor_version_upgrade=null, copy_tags_to_snapshot=null, engine=null, monitoring_interval=null, promotion_tier=null, publicly_accessible=null, tags=null):: {
        rname:: rname,
        cluster_identifier: cluster_identifier,
        instance_class: instance_class,
        [if auto_minor_version_upgrade != null then 'auto_minor_version_upgrade']: auto_minor_version_upgrade,
        [if copy_tags_to_snapshot != null then 'copy_tags_to_snapshot']: copy_tags_to_snapshot,
        [if engine != null then 'engine']: engine,
        [if monitoring_interval != null then 'monitoring_interval']: monitoring_interval,
        [if promotion_tier != null then 'promotion_tier']: promotion_tier,
        [if publicly_accessible != null then 'publicly_accessible']: publicly_accessible,
        [if tags != null then 'tags']: tags,
        apply_immediately:: '${aws_rds_cluster_instance.%s.apply_immediately}' % rname,
        arn:: '${aws_rds_cluster_instance.%s.arn}' % rname,
        availability_zone:: '${aws_rds_cluster_instance.%s.availability_zone}' % rname,
        ca_cert_identifier:: '${aws_rds_cluster_instance.%s.ca_cert_identifier}' % rname,
        db_parameter_group_name:: '${aws_rds_cluster_instance.%s.db_parameter_group_name}' % rname,
        db_subnet_group_name:: '${aws_rds_cluster_instance.%s.db_subnet_group_name}' % rname,
        dbi_resource_id:: '${aws_rds_cluster_instance.%s.dbi_resource_id}' % rname,
        endpoint:: '${aws_rds_cluster_instance.%s.endpoint}' % rname,
        engine_version:: '${aws_rds_cluster_instance.%s.engine_version}' % rname,
        id:: '${aws_rds_cluster_instance.%s.id}' % rname,
        identifier:: '${aws_rds_cluster_instance.%s.identifier}' % rname,
        identifier_prefix:: '${aws_rds_cluster_instance.%s.identifier_prefix}' % rname,
        kms_key_id:: '${aws_rds_cluster_instance.%s.kms_key_id}' % rname,
        monitoring_role_arn:: '${aws_rds_cluster_instance.%s.monitoring_role_arn}' % rname,
        performance_insights_enabled:: '${aws_rds_cluster_instance.%s.performance_insights_enabled}' % rname,
        performance_insights_kms_key_id:: '${aws_rds_cluster_instance.%s.performance_insights_kms_key_id}' % rname,
        port:: '${aws_rds_cluster_instance.%s.port}' % rname,
        preferred_backup_window:: '${aws_rds_cluster_instance.%s.preferred_backup_window}' % rname,
        preferred_maintenance_window:: '${aws_rds_cluster_instance.%s.preferred_maintenance_window}' % rname,
        storage_encrypted:: '${aws_rds_cluster_instance.%s.storage_encrypted}' % rname,
        writer:: '${aws_rds_cluster_instance.%s.writer}' % rname,
        timeouts:: {},
      },
      with_apply_immediately(apply_immediately):: {
        apply_immediately::: apply_immediately,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_ca_cert_identifier(ca_cert_identifier):: {
        ca_cert_identifier::: ca_cert_identifier,
      },
      with_db_parameter_group_name(db_parameter_group_name):: {
        db_parameter_group_name::: db_parameter_group_name,
      },
      with_db_subnet_group_name(db_subnet_group_name):: {
        db_subnet_group_name::: db_subnet_group_name,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_identifier(identifier):: {
        identifier::: identifier,
      },
      with_identifier_prefix(identifier_prefix):: {
        identifier_prefix::: identifier_prefix,
      },
      with_monitoring_role_arn(monitoring_role_arn):: {
        monitoring_role_arn::: monitoring_role_arn,
      },
      with_performance_insights_enabled(performance_insights_enabled):: {
        performance_insights_enabled::: performance_insights_enabled,
      },
      with_performance_insights_kms_key_id(performance_insights_kms_key_id):: {
        performance_insights_kms_key_id::: performance_insights_kms_key_id,
      },
      with_preferred_backup_window(preferred_backup_window):: {
        preferred_backup_window::: preferred_backup_window,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_rds_cluster_parameter_group - https://www.terraform.io/docs/providers/aws/r/rds_cluster_parameter_group.html
    aws_rds_cluster_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, description=null, tags=null):: {
        rname:: rname,
        family: family,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_rds_cluster_parameter_group.%s.arn}' % rname,
        id:: '${aws_rds_cluster_parameter_group.%s.id}' % rname,
        name:: '${aws_rds_cluster_parameter_group.%s.name}' % rname,
        name_prefix:: '${aws_rds_cluster_parameter_group.%s.name_prefix}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        // @param apply_method (optional)
        new(rname, name, value, apply_method=null):: {
          rname:: rname,
          name: name,
          value: value,
          [if apply_method != null then 'apply_method']: apply_method,
        },
      },
    },
    // aws_rds_global_cluster - https://www.terraform.io/docs/providers/aws/r/rds_global_cluster.html
    aws_rds_global_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param global_cluster_identifier (required)
      // @param database_name (optional)
      // @param deletion_protection (optional)
      // @param engine (optional)
      // @param storage_encrypted (optional)
      new(rname, global_cluster_identifier, database_name=null, deletion_protection=null, engine=null, storage_encrypted=null):: {
        rname:: rname,
        global_cluster_identifier: global_cluster_identifier,
        [if database_name != null then 'database_name']: database_name,
        [if deletion_protection != null then 'deletion_protection']: deletion_protection,
        [if engine != null then 'engine']: engine,
        [if storage_encrypted != null then 'storage_encrypted']: storage_encrypted,
        arn:: '${aws_rds_global_cluster.%s.arn}' % rname,
        engine_version:: '${aws_rds_global_cluster.%s.engine_version}' % rname,
        global_cluster_resource_id:: '${aws_rds_global_cluster.%s.global_cluster_resource_id}' % rname,
        id:: '${aws_rds_global_cluster.%s.id}' % rname,
      },
      with_engine_version(engine_version):: {
        engine_version::: engine_version,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_redshift_cluster - https://www.terraform.io/docs/providers/aws/r/redshift_cluster.html
    aws_redshift_cluster:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_identifier (required)
      // @param node_type (required)
      // @param allow_version_upgrade (optional)
      // @param automated_snapshot_retention_period (optional)
      // @param cluster_version (optional)
      // @param elastic_ip (optional)
      // @param encrypted (optional)
      // @param final_snapshot_identifier (optional)
      // @param master_password (optional)
      // @param master_username (optional)
      // @param number_of_nodes (optional)
      // @param owner_account (optional)
      // @param port (optional)
      // @param publicly_accessible (optional)
      // @param skip_final_snapshot (optional)
      // @param snapshot_cluster_identifier (optional)
      // @param snapshot_identifier (optional)
      // @param tags (optional)
      new(rname, cluster_identifier, node_type, allow_version_upgrade=null, automated_snapshot_retention_period=null, cluster_version=null, elastic_ip=null, encrypted=null, final_snapshot_identifier=null, master_password=null, master_username=null, number_of_nodes=null, owner_account=null, port=null, publicly_accessible=null, skip_final_snapshot=null, snapshot_cluster_identifier=null, snapshot_identifier=null, tags=null):: {
        rname:: rname,
        cluster_identifier: cluster_identifier,
        node_type: node_type,
        [if allow_version_upgrade != null then 'allow_version_upgrade']: allow_version_upgrade,
        [if automated_snapshot_retention_period != null then 'automated_snapshot_retention_period']: automated_snapshot_retention_period,
        [if cluster_version != null then 'cluster_version']: cluster_version,
        [if elastic_ip != null then 'elastic_ip']: elastic_ip,
        [if encrypted != null then 'encrypted']: encrypted,
        [if final_snapshot_identifier != null then 'final_snapshot_identifier']: final_snapshot_identifier,
        [if master_password != null then 'master_password']: master_password,
        [if master_username != null then 'master_username']: master_username,
        [if number_of_nodes != null then 'number_of_nodes']: number_of_nodes,
        [if owner_account != null then 'owner_account']: owner_account,
        [if port != null then 'port']: port,
        [if publicly_accessible != null then 'publicly_accessible']: publicly_accessible,
        [if skip_final_snapshot != null then 'skip_final_snapshot']: skip_final_snapshot,
        [if snapshot_cluster_identifier != null then 'snapshot_cluster_identifier']: snapshot_cluster_identifier,
        [if snapshot_identifier != null then 'snapshot_identifier']: snapshot_identifier,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_cluster.%s.arn}' % rname,
        availability_zone:: '${aws_redshift_cluster.%s.availability_zone}' % rname,
        bucket_name:: '${aws_redshift_cluster.%s.bucket_name}' % rname,
        cluster_parameter_group_name:: '${aws_redshift_cluster.%s.cluster_parameter_group_name}' % rname,
        cluster_public_key:: '${aws_redshift_cluster.%s.cluster_public_key}' % rname,
        cluster_revision_number:: '${aws_redshift_cluster.%s.cluster_revision_number}' % rname,
        cluster_security_groups:: '${aws_redshift_cluster.%s.cluster_security_groups}' % rname,
        cluster_subnet_group_name:: '${aws_redshift_cluster.%s.cluster_subnet_group_name}' % rname,
        cluster_type:: '${aws_redshift_cluster.%s.cluster_type}' % rname,
        database_name:: '${aws_redshift_cluster.%s.database_name}' % rname,
        dns_name:: '${aws_redshift_cluster.%s.dns_name}' % rname,
        enable_logging:: '${aws_redshift_cluster.%s.enable_logging}' % rname,
        endpoint:: '${aws_redshift_cluster.%s.endpoint}' % rname,
        enhanced_vpc_routing:: '${aws_redshift_cluster.%s.enhanced_vpc_routing}' % rname,
        iam_roles:: '${aws_redshift_cluster.%s.iam_roles}' % rname,
        id:: '${aws_redshift_cluster.%s.id}' % rname,
        kms_key_id:: '${aws_redshift_cluster.%s.kms_key_id}' % rname,
        preferred_maintenance_window:: '${aws_redshift_cluster.%s.preferred_maintenance_window}' % rname,
        s3_key_prefix:: '${aws_redshift_cluster.%s.s3_key_prefix}' % rname,
        vpc_security_group_ids:: '${aws_redshift_cluster.%s.vpc_security_group_ids}' % rname,
        logging:: {},
        snapshot_copy:: {},
        timeouts:: {},
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_bucket_name(bucket_name):: {
        bucket_name::: bucket_name,
      },
      with_cluster_parameter_group_name(cluster_parameter_group_name):: {
        cluster_parameter_group_name::: cluster_parameter_group_name,
      },
      with_cluster_public_key(cluster_public_key):: {
        cluster_public_key::: cluster_public_key,
      },
      with_cluster_revision_number(cluster_revision_number):: {
        cluster_revision_number::: cluster_revision_number,
      },
      with_cluster_security_groups(cluster_security_groups):: {
        cluster_security_groups::: cluster_security_groups,
      },
      with_cluster_subnet_group_name(cluster_subnet_group_name):: {
        cluster_subnet_group_name::: cluster_subnet_group_name,
      },
      with_cluster_type(cluster_type):: {
        cluster_type::: cluster_type,
      },
      with_database_name(database_name):: {
        database_name::: database_name,
      },
      with_enable_logging(enable_logging):: {
        enable_logging::: enable_logging,
      },
      with_endpoint(endpoint):: {
        endpoint::: endpoint,
      },
      with_enhanced_vpc_routing(enhanced_vpc_routing):: {
        enhanced_vpc_routing::: enhanced_vpc_routing,
      },
      with_iam_roles(iam_roles):: {
        iam_roles::: iam_roles,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
      with_preferred_maintenance_window(preferred_maintenance_window):: {
        preferred_maintenance_window::: preferred_maintenance_window,
      },
      with_s3_key_prefix(s3_key_prefix):: {
        s3_key_prefix::: s3_key_prefix,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_logging(logging):: self + {
        logging: logging,
      },
      logging:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enable (required)
        new(rname, enable):: {
          rname:: rname,
          enable: enable,
          bucket_name:: '${aws_redshift_cluster.%s.logging.bucket_name}' % rname,
          s3_key_prefix:: '${aws_redshift_cluster.%s.logging.s3_key_prefix}' % rname,
        },
        with_bucket_name(bucket_name):: {
          bucket_name::: bucket_name,
        },
        with_s3_key_prefix(s3_key_prefix):: {
          s3_key_prefix::: s3_key_prefix,
        },
      },
      with_snapshot_copy(snapshot_copy):: self + {
        snapshot_copy: snapshot_copy,
      },
      snapshot_copy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param destination_region (required)
        // @param grant_name (optional)
        // @param retention_period (optional)
        new(rname, destination_region, grant_name=null, retention_period=null):: {
          rname:: rname,
          destination_region: destination_region,
          [if grant_name != null then 'grant_name']: grant_name,
          [if retention_period != null then 'retention_period']: retention_period,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_redshift_event_subscription - https://www.terraform.io/docs/providers/aws/r/redshift_event_subscription.html
    aws_redshift_event_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param sns_topic_arn (required)
      // @param enabled (optional)
      // @param event_categories (optional)
      // @param severity (optional)
      // @param source_ids (optional)
      // @param source_type (optional)
      // @param tags (optional)
      new(rname, name, sns_topic_arn, enabled=null, event_categories=null, severity=null, source_ids=null, source_type=null, tags=null):: {
        rname:: rname,
        name: name,
        sns_topic_arn: sns_topic_arn,
        [if enabled != null then 'enabled']: enabled,
        [if event_categories != null then 'event_categories']: event_categories,
        [if severity != null then 'severity']: severity,
        [if source_ids != null then 'source_ids']: source_ids,
        [if source_type != null then 'source_type']: source_type,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_event_subscription.%s.arn}' % rname,
        customer_aws_id:: '${aws_redshift_event_subscription.%s.customer_aws_id}' % rname,
        id:: '${aws_redshift_event_subscription.%s.id}' % rname,
        status:: '${aws_redshift_event_subscription.%s.status}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_redshift_parameter_group - https://www.terraform.io/docs/providers/aws/r/redshift_parameter_group.html
    aws_redshift_parameter_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param family (required)
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, family, name, description=null, tags=null):: {
        rname:: rname,
        family: family,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_parameter_group.%s.arn}' % rname,
        id:: '${aws_redshift_parameter_group.%s.id}' % rname,
        parameter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_parameter(parameter):: self + {
        parameter: parameter,
      },
      parameter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param value (required)
        new(rname, name, value):: {
          rname:: rname,
          name: name,
          value: value,
        },
      },
    },
    // aws_redshift_security_group - https://www.terraform.io/docs/providers/aws/r/redshift_security_group.html
    aws_redshift_security_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param ingress (required)
      new(rname, name, ingress, description=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        id:: '${aws_redshift_security_group.%s.id}' % rname,
        ingress: ingress,
      },
      with_id(id):: {
        id::: id,
      },
      ingress:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cidr (optional)
        new(rname, cidr=null):: {
          rname:: rname,
          [if cidr != null then 'cidr']: cidr,
          security_group_name:: '${aws_redshift_security_group.%s.ingress.security_group_name}' % rname,
          security_group_owner_id:: '${aws_redshift_security_group.%s.ingress.security_group_owner_id}' % rname,
        },
        with_security_group_name(security_group_name):: {
          security_group_name::: security_group_name,
        },
        with_security_group_owner_id(security_group_owner_id):: {
          security_group_owner_id::: security_group_owner_id,
        },
      },
    },
    // aws_redshift_snapshot_copy_grant - https://www.terraform.io/docs/providers/aws/r/redshift_snapshot_copy_grant.html
    aws_redshift_snapshot_copy_grant:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param snapshot_copy_grant_name (required)
      // @param tags (optional)
      new(rname, snapshot_copy_grant_name, tags=null):: {
        rname:: rname,
        snapshot_copy_grant_name: snapshot_copy_grant_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_snapshot_copy_grant.%s.arn}' % rname,
        id:: '${aws_redshift_snapshot_copy_grant.%s.id}' % rname,
        kms_key_id:: '${aws_redshift_snapshot_copy_grant.%s.kms_key_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_key_id(kms_key_id):: {
        kms_key_id::: kms_key_id,
      },
    },
    // aws_redshift_snapshot_schedule - https://www.terraform.io/docs/providers/aws/r/redshift_snapshot_schedule.html
    aws_redshift_snapshot_schedule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param definitions (required)
      // @param description (optional)
      // @param force_destroy (optional)
      // @param tags (optional)
      new(rname, definitions, description=null, force_destroy=null, tags=null):: {
        rname:: rname,
        definitions: definitions,
        [if description != null then 'description']: description,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_snapshot_schedule.%s.arn}' % rname,
        id:: '${aws_redshift_snapshot_schedule.%s.id}' % rname,
        identifier:: '${aws_redshift_snapshot_schedule.%s.identifier}' % rname,
        identifier_prefix:: '${aws_redshift_snapshot_schedule.%s.identifier_prefix}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_identifier(identifier):: {
        identifier::: identifier,
      },
      with_identifier_prefix(identifier_prefix):: {
        identifier_prefix::: identifier_prefix,
      },
    },
    // aws_redshift_snapshot_schedule_association - https://www.terraform.io/docs/providers/aws/r/redshift_snapshot_schedule_association.html
    aws_redshift_snapshot_schedule_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cluster_identifier (required)
      // @param schedule_identifier (required)
      new(rname, cluster_identifier, schedule_identifier):: {
        rname:: rname,
        cluster_identifier: cluster_identifier,
        schedule_identifier: schedule_identifier,
        id:: '${aws_redshift_snapshot_schedule_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_redshift_subnet_group - https://www.terraform.io/docs/providers/aws/r/redshift_subnet_group.html
    aws_redshift_subnet_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param subnet_ids (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, subnet_ids, description=null, tags=null):: {
        rname:: rname,
        name: name,
        subnet_ids: subnet_ids,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_redshift_subnet_group.%s.arn}' % rname,
        id:: '${aws_redshift_subnet_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_resourcegroups_group - https://www.terraform.io/docs/providers/aws/r/resourcegroups_group.html
    aws_resourcegroups_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      // @param resource_query (required)
      new(rname, name, resource_query, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_resourcegroups_group.%s.arn}' % rname,
        id:: '${aws_resourcegroups_group.%s.id}' % rname,
        resource_query: resource_query,
      },
      with_id(id):: {
        id::: id,
      },
      resource_query:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param query (required)
        // @param type (optional)
        new(rname, query, type=null):: {
          rname:: rname,
          query: query,
          [if type != null then 'type']: type,
        },
      },
    },
    // aws_route - https://www.terraform.io/docs/providers/aws/r/route.html
    aws_route:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param route_table_id (required)
      // @param destination_cidr_block (optional)
      // @param destination_ipv6_cidr_block (optional)
      // @param transit_gateway_id (optional)
      // @param vpc_peering_connection_id (optional)
      new(rname, route_table_id, destination_cidr_block=null, destination_ipv6_cidr_block=null, transit_gateway_id=null, vpc_peering_connection_id=null):: {
        rname:: rname,
        route_table_id: route_table_id,
        [if destination_cidr_block != null then 'destination_cidr_block']: destination_cidr_block,
        [if destination_ipv6_cidr_block != null then 'destination_ipv6_cidr_block']: destination_ipv6_cidr_block,
        [if transit_gateway_id != null then 'transit_gateway_id']: transit_gateway_id,
        [if vpc_peering_connection_id != null then 'vpc_peering_connection_id']: vpc_peering_connection_id,
        destination_prefix_list_id:: '${aws_route.%s.destination_prefix_list_id}' % rname,
        egress_only_gateway_id:: '${aws_route.%s.egress_only_gateway_id}' % rname,
        gateway_id:: '${aws_route.%s.gateway_id}' % rname,
        id:: '${aws_route.%s.id}' % rname,
        instance_id:: '${aws_route.%s.instance_id}' % rname,
        instance_owner_id:: '${aws_route.%s.instance_owner_id}' % rname,
        nat_gateway_id:: '${aws_route.%s.nat_gateway_id}' % rname,
        network_interface_id:: '${aws_route.%s.network_interface_id}' % rname,
        origin:: '${aws_route.%s.origin}' % rname,
        state:: '${aws_route.%s.state}' % rname,
        timeouts:: {},
      },
      with_egress_only_gateway_id(egress_only_gateway_id):: {
        egress_only_gateway_id::: egress_only_gateway_id,
      },
      with_gateway_id(gateway_id):: {
        gateway_id::: gateway_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_instance_id(instance_id):: {
        instance_id::: instance_id,
      },
      with_nat_gateway_id(nat_gateway_id):: {
        nat_gateway_id::: nat_gateway_id,
      },
      with_network_interface_id(network_interface_id):: {
        network_interface_id::: network_interface_id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_route53_delegation_set - https://www.terraform.io/docs/providers/aws/r/route53_delegation_set.html
    aws_route53_delegation_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param reference_name (optional)
      new(rname, reference_name=null):: {
        rname:: rname,
        [if reference_name != null then 'reference_name']: reference_name,
        id:: '${aws_route53_delegation_set.%s.id}' % rname,
        name_servers:: '${aws_route53_delegation_set.%s.name_servers}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_route53_health_check - https://www.terraform.io/docs/providers/aws/r/route53_health_check.html
    aws_route53_health_check:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param type (required)
      // @param child_health_threshold (optional)
      // @param child_healthchecks (optional)
      // @param cloudwatch_alarm_name (optional)
      // @param cloudwatch_alarm_region (optional)
      // @param failure_threshold (optional)
      // @param fqdn (optional)
      // @param insufficient_data_health_status (optional)
      // @param invert_healthcheck (optional)
      // @param ip_address (optional)
      // @param measure_latency (optional)
      // @param port (optional)
      // @param reference_name (optional)
      // @param regions (optional)
      // @param request_interval (optional)
      // @param resource_path (optional)
      // @param search_string (optional)
      // @param tags (optional)
      new(rname, type, child_health_threshold=null, child_healthchecks=null, cloudwatch_alarm_name=null, cloudwatch_alarm_region=null, failure_threshold=null, fqdn=null, insufficient_data_health_status=null, invert_healthcheck=null, ip_address=null, measure_latency=null, port=null, reference_name=null, regions=null, request_interval=null, resource_path=null, search_string=null, tags=null):: {
        rname:: rname,
        type: type,
        [if child_health_threshold != null then 'child_health_threshold']: child_health_threshold,
        [if child_healthchecks != null then 'child_healthchecks']: child_healthchecks,
        [if cloudwatch_alarm_name != null then 'cloudwatch_alarm_name']: cloudwatch_alarm_name,
        [if cloudwatch_alarm_region != null then 'cloudwatch_alarm_region']: cloudwatch_alarm_region,
        [if failure_threshold != null then 'failure_threshold']: failure_threshold,
        [if fqdn != null then 'fqdn']: fqdn,
        [if insufficient_data_health_status != null then 'insufficient_data_health_status']: insufficient_data_health_status,
        [if invert_healthcheck != null then 'invert_healthcheck']: invert_healthcheck,
        [if ip_address != null then 'ip_address']: ip_address,
        [if measure_latency != null then 'measure_latency']: measure_latency,
        [if port != null then 'port']: port,
        [if reference_name != null then 'reference_name']: reference_name,
        [if regions != null then 'regions']: regions,
        [if request_interval != null then 'request_interval']: request_interval,
        [if resource_path != null then 'resource_path']: resource_path,
        [if search_string != null then 'search_string']: search_string,
        [if tags != null then 'tags']: tags,
        enable_sni:: '${aws_route53_health_check.%s.enable_sni}' % rname,
        id:: '${aws_route53_health_check.%s.id}' % rname,
      },
      with_enable_sni(enable_sni):: {
        enable_sni::: enable_sni,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_route53_query_log - https://www.terraform.io/docs/providers/aws/r/route53_query_log.html
    aws_route53_query_log:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cloudwatch_log_group_arn (required)
      // @param zone_id (required)
      new(rname, cloudwatch_log_group_arn, zone_id):: {
        rname:: rname,
        cloudwatch_log_group_arn: cloudwatch_log_group_arn,
        zone_id: zone_id,
        id:: '${aws_route53_query_log.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_route53_record - https://www.terraform.io/docs/providers/aws/r/route53_record.html
    aws_route53_record:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param type (required)
      // @param zone_id (required)
      // @param health_check_id (optional)
      // @param multivalue_answer_routing_policy (optional)
      // @param records (optional)
      // @param set_identifier (optional)
      // @param ttl (optional)
      new(rname, name, type, zone_id, health_check_id=null, multivalue_answer_routing_policy=null, records=null, set_identifier=null, ttl=null):: {
        rname:: rname,
        name: name,
        type: type,
        zone_id: zone_id,
        [if health_check_id != null then 'health_check_id']: health_check_id,
        [if multivalue_answer_routing_policy != null then 'multivalue_answer_routing_policy']: multivalue_answer_routing_policy,
        [if records != null then 'records']: records,
        [if set_identifier != null then 'set_identifier']: set_identifier,
        [if ttl != null then 'ttl']: ttl,
        allow_overwrite:: '${aws_route53_record.%s.allow_overwrite}' % rname,
        fqdn:: '${aws_route53_record.%s.fqdn}' % rname,
        id:: '${aws_route53_record.%s.id}' % rname,
        alias:: {},
        failover_routing_policy:: {},
        geolocation_routing_policy:: {},
        latency_routing_policy:: {},
        weighted_routing_policy:: {},
      },
      with_allow_overwrite(allow_overwrite):: {
        allow_overwrite::: allow_overwrite,
      },
      with_id(id):: {
        id::: id,
      },
      with_alias(alias):: self + {
        alias: alias,
      },
      alias:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param evaluate_target_health (required)
        // @param name (required)
        // @param zone_id (required)
        new(rname, evaluate_target_health, name, zone_id):: {
          rname:: rname,
          evaluate_target_health: evaluate_target_health,
          name: name,
          zone_id: zone_id,
        },
      },
      with_failover_routing_policy(failover_routing_policy):: self + {
        failover_routing_policy: failover_routing_policy,
      },
      failover_routing_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        new(rname, type):: {
          rname:: rname,
          type: type,
        },
      },
      with_geolocation_routing_policy(geolocation_routing_policy):: self + {
        geolocation_routing_policy: geolocation_routing_policy,
      },
      geolocation_routing_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param continent (optional)
        // @param country (optional)
        // @param subdivision (optional)
        new(rname, continent=null, country=null, subdivision=null):: {
          rname:: rname,
          [if continent != null then 'continent']: continent,
          [if country != null then 'country']: country,
          [if subdivision != null then 'subdivision']: subdivision,
        },
      },
      with_latency_routing_policy(latency_routing_policy):: self + {
        latency_routing_policy: latency_routing_policy,
      },
      latency_routing_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param region (required)
        new(rname, region):: {
          rname:: rname,
          region: region,
        },
      },
      with_weighted_routing_policy(weighted_routing_policy):: self + {
        weighted_routing_policy: weighted_routing_policy,
      },
      weighted_routing_policy:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param weight (required)
        new(rname, weight):: {
          rname:: rname,
          weight: weight,
        },
      },
    },
    // aws_route53_resolver_endpoint - https://www.terraform.io/docs/providers/aws/r/route53_resolver_endpoint.html
    aws_route53_resolver_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param direction (required)
      // @param security_group_ids (required)
      // @param name (optional)
      // @param tags (optional)
      // @param ip_address (required)
      new(rname, direction, security_group_ids, ip_address, name=null, tags=null):: {
        rname:: rname,
        direction: direction,
        security_group_ids: security_group_ids,
        [if name != null then 'name']: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_route53_resolver_endpoint.%s.arn}' % rname,
        host_vpc_id:: '${aws_route53_resolver_endpoint.%s.host_vpc_id}' % rname,
        id:: '${aws_route53_resolver_endpoint.%s.id}' % rname,
        ip_address: ip_address,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      ip_address:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param subnet_id (required)
        new(rname, subnet_id):: {
          rname:: rname,
          subnet_id: subnet_id,
          ip:: '${aws_route53_resolver_endpoint.%s.ip_address.ip}' % rname,
          ip_id:: '${aws_route53_resolver_endpoint.%s.ip_address.ip_id}' % rname,
        },
        with_ip(ip):: {
          ip::: ip,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_route53_resolver_rule - https://www.terraform.io/docs/providers/aws/r/route53_resolver_rule.html
    aws_route53_resolver_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain_name (required)
      // @param rule_type (required)
      // @param name (optional)
      // @param resolver_endpoint_id (optional)
      // @param tags (optional)
      new(rname, domain_name, rule_type, name=null, resolver_endpoint_id=null, tags=null):: {
        rname:: rname,
        domain_name: domain_name,
        rule_type: rule_type,
        [if name != null then 'name']: name,
        [if resolver_endpoint_id != null then 'resolver_endpoint_id']: resolver_endpoint_id,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_route53_resolver_rule.%s.arn}' % rname,
        id:: '${aws_route53_resolver_rule.%s.id}' % rname,
        owner_id:: '${aws_route53_resolver_rule.%s.owner_id}' % rname,
        share_status:: '${aws_route53_resolver_rule.%s.share_status}' % rname,
        target_ip:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_target_ip(target_ip):: self + {
        target_ip: target_ip,
      },
      target_ip:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param ip (required)
        // @param port (optional)
        new(rname, ip, port=null):: {
          rname:: rname,
          ip: ip,
          [if port != null then 'port']: port,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_route53_resolver_rule_association - https://www.terraform.io/docs/providers/aws/r/route53_resolver_rule_association.html
    aws_route53_resolver_rule_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param resolver_rule_id (required)
      // @param vpc_id (required)
      // @param name (optional)
      new(rname, resolver_rule_id, vpc_id, name=null):: {
        rname:: rname,
        resolver_rule_id: resolver_rule_id,
        vpc_id: vpc_id,
        [if name != null then 'name']: name,
        id:: '${aws_route53_resolver_rule_association.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_route53_zone - https://www.terraform.io/docs/providers/aws/r/route53_zone.html
    aws_route53_zone:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param comment (optional)
      // @param delegation_set_id (optional)
      // @param force_destroy (optional)
      // @param tags (optional)
      new(rname, name, comment=null, delegation_set_id=null, force_destroy=null, tags=null):: {
        rname:: rname,
        name: name,
        [if comment != null then 'comment']: comment,
        [if delegation_set_id != null then 'delegation_set_id']: delegation_set_id,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if tags != null then 'tags']: tags,
        id:: '${aws_route53_zone.%s.id}' % rname,
        name_servers:: '${aws_route53_zone.%s.name_servers}' % rname,
        vpc_id:: '${aws_route53_zone.%s.vpc_id}' % rname,
        vpc_region:: '${aws_route53_zone.%s.vpc_region}' % rname,
        zone_id:: '${aws_route53_zone.%s.zone_id}' % rname,
        vpc:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_vpc_id(vpc_id):: {
        vpc_id::: vpc_id,
      },
      with_vpc_region(vpc_region):: {
        vpc_region::: vpc_region,
      },
      with_vpc(vpc):: self + {
        vpc: vpc,
      },
      vpc:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param vpc_id (required)
        new(rname, vpc_id):: {
          rname:: rname,
          vpc_id: vpc_id,
          vpc_region:: '${aws_route53_zone.%s.vpc.vpc_region}' % rname,
        },
        with_vpc_region(vpc_region):: {
          vpc_region::: vpc_region,
        },
      },
    },
    // aws_route53_zone_association - https://www.terraform.io/docs/providers/aws/r/route53_zone_association.html
    aws_route53_zone_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_id (required)
      // @param zone_id (required)
      new(rname, vpc_id, zone_id):: {
        rname:: rname,
        vpc_id: vpc_id,
        zone_id: zone_id,
        id:: '${aws_route53_zone_association.%s.id}' % rname,
        vpc_region:: '${aws_route53_zone_association.%s.vpc_region}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_vpc_region(vpc_region):: {
        vpc_region::: vpc_region,
      },
    },
    // aws_route_table - https://www.terraform.io/docs/providers/aws/r/route_table.html
    aws_route_table:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_id (required)
      // @param tags (optional)
      new(rname, vpc_id, tags=null):: {
        rname:: rname,
        vpc_id: vpc_id,
        [if tags != null then 'tags']: tags,
        id:: '${aws_route_table.%s.id}' % rname,
        owner_id:: '${aws_route_table.%s.owner_id}' % rname,
        propagating_vgws:: '${aws_route_table.%s.propagating_vgws}' % rname,
        route:: '${aws_route_table.%s.route}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_propagating_vgws(propagating_vgws):: {
        propagating_vgws::: propagating_vgws,
      },
      with_route(route):: {
        route::: route,
      },
    },
    // aws_route_table_association - https://www.terraform.io/docs/providers/aws/r/route_table_association.html
    aws_route_table_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param route_table_id (required)
      // @param gateway_id (optional)
      // @param subnet_id (optional)
      new(rname, route_table_id, gateway_id=null, subnet_id=null):: {
        rname:: rname,
        route_table_id: route_table_id,
        [if gateway_id != null then 'gateway_id']: gateway_id,
        [if subnet_id != null then 'subnet_id']: subnet_id,
        id:: '${aws_route_table_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_s3_access_point - https://www.terraform.io/docs/providers/aws/r/s3_access_point.html
    aws_s3_access_point:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param name (required)
      // @param policy (optional)
      new(rname, bucket, name, policy=null):: {
        rname:: rname,
        bucket: bucket,
        name: name,
        [if policy != null then 'policy']: policy,
        account_id:: '${aws_s3_access_point.%s.account_id}' % rname,
        arn:: '${aws_s3_access_point.%s.arn}' % rname,
        domain_name:: '${aws_s3_access_point.%s.domain_name}' % rname,
        has_public_access_policy:: '${aws_s3_access_point.%s.has_public_access_policy}' % rname,
        id:: '${aws_s3_access_point.%s.id}' % rname,
        network_origin:: '${aws_s3_access_point.%s.network_origin}' % rname,
        public_access_block_configuration:: {},
        vpc_configuration:: {},
      },
      with_account_id(account_id):: {
        account_id::: account_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_public_access_block_configuration(public_access_block_configuration):: self + {
        public_access_block_configuration: public_access_block_configuration,
      },
      public_access_block_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param block_public_acls (optional)
        // @param block_public_policy (optional)
        // @param ignore_public_acls (optional)
        // @param restrict_public_buckets (optional)
        new(rname, block_public_acls=null, block_public_policy=null, ignore_public_acls=null, restrict_public_buckets=null):: {
          rname:: rname,
          [if block_public_acls != null then 'block_public_acls']: block_public_acls,
          [if block_public_policy != null then 'block_public_policy']: block_public_policy,
          [if ignore_public_acls != null then 'ignore_public_acls']: ignore_public_acls,
          [if restrict_public_buckets != null then 'restrict_public_buckets']: restrict_public_buckets,
        },
      },
      with_vpc_configuration(vpc_configuration):: self + {
        vpc_configuration: vpc_configuration,
      },
      vpc_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param vpc_id (required)
        new(rname, vpc_id):: {
          rname:: rname,
          vpc_id: vpc_id,
        },
      },
    },
    // aws_s3_account_public_access_block - https://www.terraform.io/docs/providers/aws/r/s3_account_public_access_block.html
    aws_s3_account_public_access_block:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param block_public_acls (optional)
      // @param block_public_policy (optional)
      // @param ignore_public_acls (optional)
      // @param restrict_public_buckets (optional)
      new(rname, block_public_acls=null, block_public_policy=null, ignore_public_acls=null, restrict_public_buckets=null):: {
        rname:: rname,
        [if block_public_acls != null then 'block_public_acls']: block_public_acls,
        [if block_public_policy != null then 'block_public_policy']: block_public_policy,
        [if ignore_public_acls != null then 'ignore_public_acls']: ignore_public_acls,
        [if restrict_public_buckets != null then 'restrict_public_buckets']: restrict_public_buckets,
        account_id:: '${aws_s3_account_public_access_block.%s.account_id}' % rname,
        id:: '${aws_s3_account_public_access_block.%s.id}' % rname,
      },
      with_account_id(account_id):: {
        account_id::: account_id,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_s3_bucket - https://www.terraform.io/docs/providers/aws/r/s3_bucket.html
    aws_s3_bucket:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param acl (optional)
      // @param bucket_prefix (optional)
      // @param force_destroy (optional)
      // @param policy (optional)
      // @param tags (optional)
      new(rname, acl=null, bucket_prefix=null, force_destroy=null, policy=null, tags=null):: {
        rname:: rname,
        [if acl != null then 'acl']: acl,
        [if bucket_prefix != null then 'bucket_prefix']: bucket_prefix,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if policy != null then 'policy']: policy,
        [if tags != null then 'tags']: tags,
        acceleration_status:: '${aws_s3_bucket.%s.acceleration_status}' % rname,
        arn:: '${aws_s3_bucket.%s.arn}' % rname,
        bucket:: '${aws_s3_bucket.%s.bucket}' % rname,
        bucket_domain_name:: '${aws_s3_bucket.%s.bucket_domain_name}' % rname,
        bucket_regional_domain_name:: '${aws_s3_bucket.%s.bucket_regional_domain_name}' % rname,
        hosted_zone_id:: '${aws_s3_bucket.%s.hosted_zone_id}' % rname,
        id:: '${aws_s3_bucket.%s.id}' % rname,
        region:: '${aws_s3_bucket.%s.region}' % rname,
        request_payer:: '${aws_s3_bucket.%s.request_payer}' % rname,
        website_domain:: '${aws_s3_bucket.%s.website_domain}' % rname,
        website_endpoint:: '${aws_s3_bucket.%s.website_endpoint}' % rname,
        cors_rule:: {},
        grant:: {},
        lifecycle_rule:: {},
        logging:: {},
        object_lock_configuration:: {},
        replication_configuration:: {},
        server_side_encryption_configuration:: {},
        versioning:: {},
        website:: {},
      },
      with_acceleration_status(acceleration_status):: {
        acceleration_status::: acceleration_status,
      },
      with_arn(arn):: {
        arn::: arn,
      },
      with_bucket(bucket):: {
        bucket::: bucket,
      },
      with_hosted_zone_id(hosted_zone_id):: {
        hosted_zone_id::: hosted_zone_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_region(region):: {
        region::: region,
      },
      with_request_payer(request_payer):: {
        request_payer::: request_payer,
      },
      with_website_domain(website_domain):: {
        website_domain::: website_domain,
      },
      with_website_endpoint(website_endpoint):: {
        website_endpoint::: website_endpoint,
      },
      with_cors_rule(cors_rule):: self + {
        cors_rule: cors_rule,
      },
      cors_rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allowed_methods (required)
        // @param allowed_origins (required)
        // @param allowed_headers (optional)
        // @param expose_headers (optional)
        // @param max_age_seconds (optional)
        new(rname, allowed_methods, allowed_origins, allowed_headers=null, expose_headers=null, max_age_seconds=null):: {
          rname:: rname,
          allowed_methods: allowed_methods,
          allowed_origins: allowed_origins,
          [if allowed_headers != null then 'allowed_headers']: allowed_headers,
          [if expose_headers != null then 'expose_headers']: expose_headers,
          [if max_age_seconds != null then 'max_age_seconds']: max_age_seconds,
        },
      },
      with_grant(grant):: self + {
        grant: grant,
      },
      grant:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param permissions (required)
        // @param type (required)
        // @param id (optional)
        // @param uri (optional)
        new(rname, permissions, type, id=null, uri=null):: {
          rname:: rname,
          permissions: permissions,
          type: type,
          [if id != null then 'id']: id,
          [if uri != null then 'uri']: uri,
        },
      },
      with_lifecycle_rule(lifecycle_rule):: self + {
        lifecycle_rule: lifecycle_rule,
      },
      lifecycle_rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (required)
        // @param abort_incomplete_multipart_upload_days (optional)
        // @param prefix (optional)
        // @param tags (optional)
        new(rname, enabled, abort_incomplete_multipart_upload_days=null, prefix=null, tags=null):: {
          rname:: rname,
          enabled: enabled,
          [if abort_incomplete_multipart_upload_days != null then 'abort_incomplete_multipart_upload_days']: abort_incomplete_multipart_upload_days,
          [if prefix != null then 'prefix']: prefix,
          [if tags != null then 'tags']: tags,
          id:: '${aws_s3_bucket.%s.lifecycle_rule.id}' % rname,
          expiration:: {},
          noncurrent_version_expiration:: {},
          noncurrent_version_transition:: {},
          transition:: {},
        },
        with_id(id):: {
          id::: id,
        },
        with_expiration(expiration):: self + {
          expiration: expiration,
        },
        expiration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param date (optional)
          // @param days (optional)
          // @param expired_object_delete_marker (optional)
          new(rname, date=null, days=null, expired_object_delete_marker=null):: {
            rname:: rname,
            [if date != null then 'date']: date,
            [if days != null then 'days']: days,
            [if expired_object_delete_marker != null then 'expired_object_delete_marker']: expired_object_delete_marker,
          },
        },
        with_noncurrent_version_expiration(noncurrent_version_expiration):: self + {
          noncurrent_version_expiration: noncurrent_version_expiration,
        },
        noncurrent_version_expiration:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param days (optional)
          new(rname, days=null):: {
            rname:: rname,
            [if days != null then 'days']: days,
          },
        },
        with_noncurrent_version_transition(noncurrent_version_transition):: self + {
          noncurrent_version_transition: noncurrent_version_transition,
        },
        noncurrent_version_transition:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param storage_class (required)
          // @param days (optional)
          new(rname, storage_class, days=null):: {
            rname:: rname,
            storage_class: storage_class,
            [if days != null then 'days']: days,
          },
        },
        with_transition(transition):: self + {
          transition: transition,
        },
        transition:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param storage_class (required)
          // @param date (optional)
          // @param days (optional)
          new(rname, storage_class, date=null, days=null):: {
            rname:: rname,
            storage_class: storage_class,
            [if date != null then 'date']: date,
            [if days != null then 'days']: days,
          },
        },
      },
      with_logging(logging):: self + {
        logging: logging,
      },
      logging:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param target_bucket (required)
        // @param target_prefix (optional)
        new(rname, target_bucket, target_prefix=null):: {
          rname:: rname,
          target_bucket: target_bucket,
          [if target_prefix != null then 'target_prefix']: target_prefix,
        },
      },
      with_object_lock_configuration(object_lock_configuration):: self + {
        object_lock_configuration: object_lock_configuration,
      },
      object_lock_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param object_lock_enabled (required)
        new(rname, object_lock_enabled):: {
          rname:: rname,
          object_lock_enabled: object_lock_enabled,
          rule:: {},
        },
        with_rule(rule):: self + {
          rule: rule,
        },
        rule:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param default_retention (required)
          new(rname, default_retention):: {
            rname:: rname,
            default_retention: default_retention,
          },
          default_retention:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param mode (required)
            // @param days (optional)
            // @param years (optional)
            new(rname, mode, days=null, years=null):: {
              rname:: rname,
              mode: mode,
              [if days != null then 'days']: days,
              [if years != null then 'years']: years,
            },
          },
        },
      },
      with_replication_configuration(replication_configuration):: self + {
        replication_configuration: replication_configuration,
      },
      replication_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role (required)
        // @param rules (required)
        new(rname, role, rules):: {
          rname:: rname,
          role: role,
          rules: rules,
        },
        rules:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param status (required)
          // @param id (optional)
          // @param prefix (optional)
          // @param priority (optional)
          // @param destination (required)
          new(rname, status, destination, id=null, prefix=null, priority=null):: {
            rname:: rname,
            status: status,
            [if id != null then 'id']: id,
            [if prefix != null then 'prefix']: prefix,
            [if priority != null then 'priority']: priority,
            destination: destination,
            filter:: {},
            source_selection_criteria:: {},
          },
          destination:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param bucket (required)
            // @param account_id (optional)
            // @param replica_kms_key_id (optional)
            // @param storage_class (optional)
            new(rname, bucket, account_id=null, replica_kms_key_id=null, storage_class=null):: {
              rname:: rname,
              bucket: bucket,
              [if account_id != null then 'account_id']: account_id,
              [if replica_kms_key_id != null then 'replica_kms_key_id']: replica_kms_key_id,
              [if storage_class != null then 'storage_class']: storage_class,
              access_control_translation:: {},
            },
            with_access_control_translation(access_control_translation):: self + {
              access_control_translation: access_control_translation,
            },
            access_control_translation:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param owner (required)
              new(rname, owner):: {
                rname:: rname,
                owner: owner,
              },
            },
          },
          with_filter(filter):: self + {
            filter: filter,
          },
          filter:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param prefix (optional)
            // @param tags (optional)
            new(rname, prefix=null, tags=null):: {
              rname:: rname,
              [if prefix != null then 'prefix']: prefix,
              [if tags != null then 'tags']: tags,
            },
          },
          with_source_selection_criteria(source_selection_criteria):: self + {
            source_selection_criteria: source_selection_criteria,
          },
          source_selection_criteria:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            new(rname):: {
              rname:: rname,
              sse_kms_encrypted_objects:: {},
            },
            with_sse_kms_encrypted_objects(sse_kms_encrypted_objects):: self + {
              sse_kms_encrypted_objects: sse_kms_encrypted_objects,
            },
            sse_kms_encrypted_objects:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param enabled (required)
              new(rname, enabled):: {
                rname:: rname,
                enabled: enabled,
              },
            },
          },
        },
      },
      with_server_side_encryption_configuration(server_side_encryption_configuration):: self + {
        server_side_encryption_configuration: server_side_encryption_configuration,
      },
      server_side_encryption_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param rule (required)
        new(rname, rule):: {
          rname:: rname,
          rule: rule,
        },
        rule:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param apply_server_side_encryption_by_default (required)
          new(rname, apply_server_side_encryption_by_default):: {
            rname:: rname,
            apply_server_side_encryption_by_default: apply_server_side_encryption_by_default,
          },
          apply_server_side_encryption_by_default:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param sse_algorithm (required)
            // @param kms_master_key_id (optional)
            new(rname, sse_algorithm, kms_master_key_id=null):: {
              rname:: rname,
              sse_algorithm: sse_algorithm,
              [if kms_master_key_id != null then 'kms_master_key_id']: kms_master_key_id,
            },
          },
        },
      },
      with_versioning(versioning):: self + {
        versioning: versioning,
      },
      versioning:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param enabled (optional)
        // @param mfa_delete (optional)
        new(rname, enabled=null, mfa_delete=null):: {
          rname:: rname,
          [if enabled != null then 'enabled']: enabled,
          [if mfa_delete != null then 'mfa_delete']: mfa_delete,
        },
      },
      with_website(website):: self + {
        website: website,
      },
      website:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param error_document (optional)
        // @param index_document (optional)
        // @param redirect_all_requests_to (optional)
        // @param routing_rules (optional)
        new(rname, error_document=null, index_document=null, redirect_all_requests_to=null, routing_rules=null):: {
          rname:: rname,
          [if error_document != null then 'error_document']: error_document,
          [if index_document != null then 'index_document']: index_document,
          [if redirect_all_requests_to != null then 'redirect_all_requests_to']: redirect_all_requests_to,
          [if routing_rules != null then 'routing_rules']: routing_rules,
        },
      },
    },
    // aws_s3_bucket_analytics_configuration - https://www.terraform.io/docs/providers/aws/r/s3_bucket_analytics_configuration.html
    aws_s3_bucket_analytics_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param name (required)
      new(rname, bucket, name):: {
        rname:: rname,
        bucket: bucket,
        name: name,
        id:: '${aws_s3_bucket_analytics_configuration.%s.id}' % rname,
        filter:: {},
        storage_class_analysis:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_filter(filter):: self + {
        filter: filter,
      },
      filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param prefix (optional)
        // @param tags (optional)
        new(rname, prefix=null, tags=null):: {
          rname:: rname,
          [if prefix != null then 'prefix']: prefix,
          [if tags != null then 'tags']: tags,
        },
      },
      with_storage_class_analysis(storage_class_analysis):: self + {
        storage_class_analysis: storage_class_analysis,
      },
      storage_class_analysis:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param data_export (required)
        new(rname, data_export):: {
          rname:: rname,
          data_export: data_export,
        },
        data_export:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param output_schema_version (optional)
          // @param destination (required)
          new(rname, destination, output_schema_version=null):: {
            rname:: rname,
            [if output_schema_version != null then 'output_schema_version']: output_schema_version,
            destination: destination,
          },
          destination:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param s3_bucket_destination (required)
            new(rname, s3_bucket_destination):: {
              rname:: rname,
              s3_bucket_destination: s3_bucket_destination,
            },
            s3_bucket_destination:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param bucket_arn (required)
              // @param bucket_account_id (optional)
              // @param format (optional)
              // @param prefix (optional)
              new(rname, bucket_arn, bucket_account_id=null, format=null, prefix=null):: {
                rname:: rname,
                bucket_arn: bucket_arn,
                [if bucket_account_id != null then 'bucket_account_id']: bucket_account_id,
                [if format != null then 'format']: format,
                [if prefix != null then 'prefix']: prefix,
              },
            },
          },
        },
      },
    },
    // aws_s3_bucket_inventory - https://www.terraform.io/docs/providers/aws/r/s3_bucket_inventory.html
    aws_s3_bucket_inventory:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param included_object_versions (required)
      // @param name (required)
      // @param enabled (optional)
      // @param optional_fields (optional)
      // @param destination (required)
      // @param schedule (required)
      new(rname, bucket, included_object_versions, name, destination, schedule, enabled=null, optional_fields=null):: {
        rname:: rname,
        bucket: bucket,
        included_object_versions: included_object_versions,
        name: name,
        [if enabled != null then 'enabled']: enabled,
        [if optional_fields != null then 'optional_fields']: optional_fields,
        id:: '${aws_s3_bucket_inventory.%s.id}' % rname,
        destination: destination,
        filter:: {},
        schedule: schedule,
      },
      with_id(id):: {
        id::: id,
      },
      destination:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket (required)
        new(rname, bucket):: {
          rname:: rname,
          bucket: bucket,
        },
        bucket:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param bucket_arn (required)
          // @param format (required)
          // @param account_id (optional)
          // @param prefix (optional)
          new(rname, bucket_arn, format, account_id=null, prefix=null):: {
            rname:: rname,
            bucket_arn: bucket_arn,
            format: format,
            [if account_id != null then 'account_id']: account_id,
            [if prefix != null then 'prefix']: prefix,
            encryption:: {},
          },
          with_encryption(encryption):: self + {
            encryption: encryption,
          },
          encryption:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            new(rname):: {
              rname:: rname,
              sse_kms:: {},
              sse_s3:: {},
            },
            with_sse_kms(sse_kms):: self + {
              sse_kms: sse_kms,
            },
            sse_kms:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              // @param key_id (required)
              new(rname, key_id):: {
                rname:: rname,
                key_id: key_id,
              },
            },
            with_sse_s3(sse_s3):: self + {
              sse_s3: sse_s3,
            },
            sse_s3:: {
              // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
              new(rname):: {
                rname:: rname,
              },
            },
          },
        },
      },
      with_filter(filter):: self + {
        filter: filter,
      },
      filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param prefix (optional)
        new(rname, prefix=null):: {
          rname:: rname,
          [if prefix != null then 'prefix']: prefix,
        },
      },
      schedule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param frequency (required)
        new(rname, frequency):: {
          rname:: rname,
          frequency: frequency,
        },
      },
    },
    // aws_s3_bucket_metric - https://www.terraform.io/docs/providers/aws/r/s3_bucket_metric.html
    aws_s3_bucket_metric:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param name (required)
      new(rname, bucket, name):: {
        rname:: rname,
        bucket: bucket,
        name: name,
        id:: '${aws_s3_bucket_metric.%s.id}' % rname,
        filter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_filter(filter):: self + {
        filter: filter,
      },
      filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param prefix (optional)
        // @param tags (optional)
        new(rname, prefix=null, tags=null):: {
          rname:: rname,
          [if prefix != null then 'prefix']: prefix,
          [if tags != null then 'tags']: tags,
        },
      },
    },
    // aws_s3_bucket_notification - https://www.terraform.io/docs/providers/aws/r/s3_bucket_notification.html
    aws_s3_bucket_notification:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      new(rname, bucket):: {
        rname:: rname,
        bucket: bucket,
        id:: '${aws_s3_bucket_notification.%s.id}' % rname,
        lambda_function:: {},
        queue:: {},
        topic:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_lambda_function(lambda_function):: self + {
        lambda_function: lambda_function,
      },
      lambda_function:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param events (required)
        // @param filter_prefix (optional)
        // @param filter_suffix (optional)
        // @param lambda_function_arn (optional)
        new(rname, events, filter_prefix=null, filter_suffix=null, lambda_function_arn=null):: {
          rname:: rname,
          events: events,
          [if filter_prefix != null then 'filter_prefix']: filter_prefix,
          [if filter_suffix != null then 'filter_suffix']: filter_suffix,
          [if lambda_function_arn != null then 'lambda_function_arn']: lambda_function_arn,
          id:: '${aws_s3_bucket_notification.%s.lambda_function.id}' % rname,
        },
        with_id(id):: {
          id::: id,
        },
      },
      with_queue(queue):: self + {
        queue: queue,
      },
      queue:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param events (required)
        // @param queue_arn (required)
        // @param filter_prefix (optional)
        // @param filter_suffix (optional)
        new(rname, events, queue_arn, filter_prefix=null, filter_suffix=null):: {
          rname:: rname,
          events: events,
          queue_arn: queue_arn,
          [if filter_prefix != null then 'filter_prefix']: filter_prefix,
          [if filter_suffix != null then 'filter_suffix']: filter_suffix,
          id:: '${aws_s3_bucket_notification.%s.queue.id}' % rname,
        },
        with_id(id):: {
          id::: id,
        },
      },
      with_topic(topic):: self + {
        topic: topic,
      },
      topic:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param events (required)
        // @param topic_arn (required)
        // @param filter_prefix (optional)
        // @param filter_suffix (optional)
        new(rname, events, topic_arn, filter_prefix=null, filter_suffix=null):: {
          rname:: rname,
          events: events,
          topic_arn: topic_arn,
          [if filter_prefix != null then 'filter_prefix']: filter_prefix,
          [if filter_suffix != null then 'filter_suffix']: filter_suffix,
          id:: '${aws_s3_bucket_notification.%s.topic.id}' % rname,
        },
        with_id(id):: {
          id::: id,
        },
      },
    },
    // aws_s3_bucket_object - https://www.terraform.io/docs/providers/aws/r/s3_bucket_object.html
    aws_s3_bucket_object:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param key (required)
      // @param acl (optional)
      // @param cache_control (optional)
      // @param content (optional)
      // @param content_base64 (optional)
      // @param content_disposition (optional)
      // @param content_encoding (optional)
      // @param content_language (optional)
      // @param force_destroy (optional)
      // @param kms_key_id (optional)
      // @param metadata (optional)
      // @param object_lock_legal_hold_status (optional)
      // @param object_lock_mode (optional)
      // @param object_lock_retain_until_date (optional)
      // @param source (optional)
      // @param tags (optional)
      // @param website_redirect (optional)
      new(rname, bucket, key, acl=null, cache_control=null, content=null, content_base64=null, content_disposition=null, content_encoding=null, content_language=null, force_destroy=null, kms_key_id=null, metadata=null, object_lock_legal_hold_status=null, object_lock_mode=null, object_lock_retain_until_date=null, source=null, tags=null, website_redirect=null):: {
        rname:: rname,
        bucket: bucket,
        key: key,
        [if acl != null then 'acl']: acl,
        [if cache_control != null then 'cache_control']: cache_control,
        [if content != null then 'content']: content,
        [if content_base64 != null then 'content_base64']: content_base64,
        [if content_disposition != null then 'content_disposition']: content_disposition,
        [if content_encoding != null then 'content_encoding']: content_encoding,
        [if content_language != null then 'content_language']: content_language,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if metadata != null then 'metadata']: metadata,
        [if object_lock_legal_hold_status != null then 'object_lock_legal_hold_status']: object_lock_legal_hold_status,
        [if object_lock_mode != null then 'object_lock_mode']: object_lock_mode,
        [if object_lock_retain_until_date != null then 'object_lock_retain_until_date']: object_lock_retain_until_date,
        [if source != null then 'source']: source,
        [if tags != null then 'tags']: tags,
        [if website_redirect != null then 'website_redirect']: website_redirect,
        content_type:: '${aws_s3_bucket_object.%s.content_type}' % rname,
        etag:: '${aws_s3_bucket_object.%s.etag}' % rname,
        id:: '${aws_s3_bucket_object.%s.id}' % rname,
        server_side_encryption:: '${aws_s3_bucket_object.%s.server_side_encryption}' % rname,
        storage_class:: '${aws_s3_bucket_object.%s.storage_class}' % rname,
        version_id:: '${aws_s3_bucket_object.%s.version_id}' % rname,
      },
      with_content_type(content_type):: {
        content_type::: content_type,
      },
      with_etag(etag):: {
        etag::: etag,
      },
      with_id(id):: {
        id::: id,
      },
      with_server_side_encryption(server_side_encryption):: {
        server_side_encryption::: server_side_encryption,
      },
      with_storage_class(storage_class):: {
        storage_class::: storage_class,
      },
    },
    // aws_s3_bucket_policy - https://www.terraform.io/docs/providers/aws/r/s3_bucket_policy.html
    aws_s3_bucket_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param policy (required)
      new(rname, bucket, policy):: {
        rname:: rname,
        bucket: bucket,
        policy: policy,
        id:: '${aws_s3_bucket_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_s3_bucket_public_access_block - https://www.terraform.io/docs/providers/aws/r/s3_bucket_public_access_block.html
    aws_s3_bucket_public_access_block:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param block_public_acls (optional)
      // @param block_public_policy (optional)
      // @param ignore_public_acls (optional)
      // @param restrict_public_buckets (optional)
      new(rname, bucket, block_public_acls=null, block_public_policy=null, ignore_public_acls=null, restrict_public_buckets=null):: {
        rname:: rname,
        bucket: bucket,
        [if block_public_acls != null then 'block_public_acls']: block_public_acls,
        [if block_public_policy != null then 'block_public_policy']: block_public_policy,
        [if ignore_public_acls != null then 'ignore_public_acls']: ignore_public_acls,
        [if restrict_public_buckets != null then 'restrict_public_buckets']: restrict_public_buckets,
        id:: '${aws_s3_bucket_public_access_block.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sagemaker_endpoint - https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint.html
    aws_sagemaker_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param endpoint_config_name (required)
      // @param tags (optional)
      new(rname, endpoint_config_name, tags=null):: {
        rname:: rname,
        endpoint_config_name: endpoint_config_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_sagemaker_endpoint.%s.arn}' % rname,
        id:: '${aws_sagemaker_endpoint.%s.id}' % rname,
        name:: '${aws_sagemaker_endpoint.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_sagemaker_endpoint_configuration - https://www.terraform.io/docs/providers/aws/r/sagemaker_endpoint_configuration.html
    aws_sagemaker_endpoint_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param kms_key_arn (optional)
      // @param tags (optional)
      // @param production_variants (required)
      new(rname, production_variants, kms_key_arn=null, tags=null):: {
        rname:: rname,
        [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_sagemaker_endpoint_configuration.%s.arn}' % rname,
        id:: '${aws_sagemaker_endpoint_configuration.%s.id}' % rname,
        name:: '${aws_sagemaker_endpoint_configuration.%s.name}' % rname,
        production_variants: production_variants,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      production_variants:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param initial_instance_count (required)
        // @param instance_type (required)
        // @param model_name (required)
        // @param accelerator_type (optional)
        // @param initial_variant_weight (optional)
        new(rname, initial_instance_count, instance_type, model_name, accelerator_type=null, initial_variant_weight=null):: {
          rname:: rname,
          initial_instance_count: initial_instance_count,
          instance_type: instance_type,
          model_name: model_name,
          [if accelerator_type != null then 'accelerator_type']: accelerator_type,
          [if initial_variant_weight != null then 'initial_variant_weight']: initial_variant_weight,
          variant_name:: '${aws_sagemaker_endpoint_configuration.%s.production_variants.variant_name}' % rname,
        },
        with_variant_name(variant_name):: {
          variant_name::: variant_name,
        },
      },
    },
    // aws_sagemaker_model - https://www.terraform.io/docs/providers/aws/r/sagemaker_model.html
    aws_sagemaker_model:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param execution_role_arn (required)
      // @param enable_network_isolation (optional)
      // @param tags (optional)
      new(rname, execution_role_arn, enable_network_isolation=null, tags=null):: {
        rname:: rname,
        execution_role_arn: execution_role_arn,
        [if enable_network_isolation != null then 'enable_network_isolation']: enable_network_isolation,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_sagemaker_model.%s.arn}' % rname,
        id:: '${aws_sagemaker_model.%s.id}' % rname,
        name:: '${aws_sagemaker_model.%s.name}' % rname,
        container:: {},
        primary_container:: {},
        vpc_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_container(container):: self + {
        container: container,
      },
      container:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param image (required)
        // @param container_hostname (optional)
        // @param environment (optional)
        // @param model_data_url (optional)
        new(rname, image, container_hostname=null, environment=null, model_data_url=null):: {
          rname:: rname,
          image: image,
          [if container_hostname != null then 'container_hostname']: container_hostname,
          [if environment != null then 'environment']: environment,
          [if model_data_url != null then 'model_data_url']: model_data_url,
        },
      },
      with_primary_container(primary_container):: self + {
        primary_container: primary_container,
      },
      primary_container:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param image (required)
        // @param container_hostname (optional)
        // @param environment (optional)
        // @param model_data_url (optional)
        new(rname, image, container_hostname=null, environment=null, model_data_url=null):: {
          rname:: rname,
          image: image,
          [if container_hostname != null then 'container_hostname']: container_hostname,
          [if environment != null then 'environment']: environment,
          [if model_data_url != null then 'model_data_url']: model_data_url,
        },
      },
      with_vpc_config(vpc_config):: self + {
        vpc_config: vpc_config,
      },
      vpc_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_ids (required)
        // @param subnets (required)
        new(rname, security_group_ids, subnets):: {
          rname:: rname,
          security_group_ids: security_group_ids,
          subnets: subnets,
        },
      },
    },
    // aws_sagemaker_notebook_instance - https://www.terraform.io/docs/providers/aws/r/sagemaker_notebook_instance.html
    aws_sagemaker_notebook_instance:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param instance_type (required)
      // @param name (required)
      // @param role_arn (required)
      // @param direct_internet_access (optional)
      // @param kms_key_id (optional)
      // @param lifecycle_config_name (optional)
      // @param subnet_id (optional)
      // @param tags (optional)
      new(rname, instance_type, name, role_arn, direct_internet_access=null, kms_key_id=null, lifecycle_config_name=null, subnet_id=null, tags=null):: {
        rname:: rname,
        instance_type: instance_type,
        name: name,
        role_arn: role_arn,
        [if direct_internet_access != null then 'direct_internet_access']: direct_internet_access,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if lifecycle_config_name != null then 'lifecycle_config_name']: lifecycle_config_name,
        [if subnet_id != null then 'subnet_id']: subnet_id,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_sagemaker_notebook_instance.%s.arn}' % rname,
        id:: '${aws_sagemaker_notebook_instance.%s.id}' % rname,
        security_groups:: '${aws_sagemaker_notebook_instance.%s.security_groups}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
    },
    // aws_sagemaker_notebook_instance_lifecycle_configuration - https://www.terraform.io/docs/providers/aws/r/sagemaker_notebook_instance_lifecycle_configuration.html
    aws_sagemaker_notebook_instance_lifecycle_configuration:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (optional)
      // @param on_create (optional)
      // @param on_start (optional)
      new(rname, name=null, on_create=null, on_start=null):: {
        rname:: rname,
        [if name != null then 'name']: name,
        [if on_create != null then 'on_create']: on_create,
        [if on_start != null then 'on_start']: on_start,
        arn:: '${aws_sagemaker_notebook_instance_lifecycle_configuration.%s.arn}' % rname,
        id:: '${aws_sagemaker_notebook_instance_lifecycle_configuration.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_secretsmanager_secret - https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html
    aws_secretsmanager_secret:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param kms_key_id (optional)
      // @param policy (optional)
      // @param recovery_window_in_days (optional)
      // @param rotation_lambda_arn (optional)
      // @param tags (optional)
      new(rname, description=null, kms_key_id=null, policy=null, recovery_window_in_days=null, rotation_lambda_arn=null, tags=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if kms_key_id != null then 'kms_key_id']: kms_key_id,
        [if policy != null then 'policy']: policy,
        [if recovery_window_in_days != null then 'recovery_window_in_days']: recovery_window_in_days,
        [if rotation_lambda_arn != null then 'rotation_lambda_arn']: rotation_lambda_arn,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_secretsmanager_secret.%s.arn}' % rname,
        id:: '${aws_secretsmanager_secret.%s.id}' % rname,
        name:: '${aws_secretsmanager_secret.%s.name}' % rname,
        name_prefix:: '${aws_secretsmanager_secret.%s.name_prefix}' % rname,
        rotation_enabled:: '${aws_secretsmanager_secret.%s.rotation_enabled}' % rname,
        rotation_rules:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_name_prefix(name_prefix):: {
        name_prefix::: name_prefix,
      },
      with_rotation_rules(rotation_rules):: self + {
        rotation_rules: rotation_rules,
      },
      rotation_rules:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param automatically_after_days (required)
        new(rname, automatically_after_days):: {
          rname:: rname,
          automatically_after_days: automatically_after_days,
        },
      },
    },
    // aws_secretsmanager_secret_version - https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret_version.html
    aws_secretsmanager_secret_version:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param secret_id (required)
      // @param secret_binary (optional)
      // @param secret_string (optional)
      new(rname, secret_id, secret_binary=null, secret_string=null):: {
        rname:: rname,
        secret_id: secret_id,
        [if secret_binary != null then 'secret_binary']: secret_binary,
        [if secret_string != null then 'secret_string']: secret_string,
        arn:: '${aws_secretsmanager_secret_version.%s.arn}' % rname,
        id:: '${aws_secretsmanager_secret_version.%s.id}' % rname,
        version_id:: '${aws_secretsmanager_secret_version.%s.version_id}' % rname,
        version_stages:: '${aws_secretsmanager_secret_version.%s.version_stages}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_version_stages(version_stages):: {
        version_stages::: version_stages,
      },
    },
    // aws_security_group - https://www.terraform.io/docs/providers/aws/r/security_group.html
    aws_security_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param description (optional)
      // @param name_prefix (optional)
      // @param revoke_rules_on_delete (optional)
      // @param tags (optional)
      new(rname, description=null, name_prefix=null, revoke_rules_on_delete=null, tags=null):: {
        rname:: rname,
        [if description != null then 'description']: description,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if revoke_rules_on_delete != null then 'revoke_rules_on_delete']: revoke_rules_on_delete,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_security_group.%s.arn}' % rname,
        egress:: '${aws_security_group.%s.egress}' % rname,
        id:: '${aws_security_group.%s.id}' % rname,
        ingress:: '${aws_security_group.%s.ingress}' % rname,
        name:: '${aws_security_group.%s.name}' % rname,
        owner_id:: '${aws_security_group.%s.owner_id}' % rname,
        vpc_id:: '${aws_security_group.%s.vpc_id}' % rname,
        timeouts:: {},
      },
      with_egress(egress):: {
        egress::: egress,
      },
      with_id(id):: {
        id::: id,
      },
      with_ingress(ingress):: {
        ingress::: ingress,
      },
      with_name(name):: {
        name::: name,
      },
      with_vpc_id(vpc_id):: {
        vpc_id::: vpc_id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_security_group_rule - https://www.terraform.io/docs/providers/aws/r/security_group_rule.html
    aws_security_group_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param from_port (required)
      // @param protocol (required)
      // @param security_group_id (required)
      // @param to_port (required)
      // @param type (required)
      // @param cidr_blocks (optional)
      // @param description (optional)
      // @param ipv6_cidr_blocks (optional)
      // @param prefix_list_ids (optional)
      // @param rself (optional)
      new(rname, from_port, protocol, security_group_id, to_port, type, cidr_blocks=null, description=null, ipv6_cidr_blocks=null, prefix_list_ids=null, rself=null):: {
        rname:: rname,
        from_port: from_port,
        protocol: protocol,
        security_group_id: security_group_id,
        to_port: to_port,
        type: type,
        [if cidr_blocks != null then 'cidr_blocks']: cidr_blocks,
        [if description != null then 'description']: description,
        [if ipv6_cidr_blocks != null then 'ipv6_cidr_blocks']: ipv6_cidr_blocks,
        [if prefix_list_ids != null then 'prefix_list_ids']: prefix_list_ids,
        [if rself != null then 'self']: rself,
        id:: '${aws_security_group_rule.%s.id}' % rname,
        source_security_group_id:: '${aws_security_group_rule.%s.source_security_group_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_source_security_group_id(source_security_group_id):: {
        source_security_group_id::: source_security_group_id,
      },
    },
    // aws_securityhub_account - https://www.terraform.io/docs/providers/aws/r/securityhub_account.html
    aws_securityhub_account:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      new(rname):: {
        rname:: rname,
        id:: '${aws_securityhub_account.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_securityhub_product_subscription - https://www.terraform.io/docs/providers/aws/r/securityhub_product_subscription.html
    aws_securityhub_product_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param product_arn (required)
      new(rname, product_arn):: {
        rname:: rname,
        product_arn: product_arn,
        arn:: '${aws_securityhub_product_subscription.%s.arn}' % rname,
        id:: '${aws_securityhub_product_subscription.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_securityhub_standards_subscription - https://www.terraform.io/docs/providers/aws/r/securityhub_standards_subscription.html
    aws_securityhub_standards_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param standards_arn (required)
      new(rname, standards_arn):: {
        rname:: rname,
        standards_arn: standards_arn,
        id:: '${aws_securityhub_standards_subscription.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_service_discovery_http_namespace - https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html
    aws_service_discovery_http_namespace:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      new(rname, name, description=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        arn:: '${aws_service_discovery_http_namespace.%s.arn}' % rname,
        id:: '${aws_service_discovery_http_namespace.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_service_discovery_private_dns_namespace - https://www.terraform.io/docs/providers/aws/r/service_discovery_private_dns_namespace.html
    aws_service_discovery_private_dns_namespace:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param vpc (required)
      // @param description (optional)
      new(rname, name, vpc, description=null):: {
        rname:: rname,
        name: name,
        vpc: vpc,
        [if description != null then 'description']: description,
        arn:: '${aws_service_discovery_private_dns_namespace.%s.arn}' % rname,
        hosted_zone:: '${aws_service_discovery_private_dns_namespace.%s.hosted_zone}' % rname,
        id:: '${aws_service_discovery_private_dns_namespace.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_service_discovery_public_dns_namespace - https://www.terraform.io/docs/providers/aws/r/service_discovery_public_dns_namespace.html
    aws_service_discovery_public_dns_namespace:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      new(rname, name, description=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        arn:: '${aws_service_discovery_public_dns_namespace.%s.arn}' % rname,
        hosted_zone:: '${aws_service_discovery_public_dns_namespace.%s.hosted_zone}' % rname,
        id:: '${aws_service_discovery_public_dns_namespace.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_service_discovery_service - https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html
    aws_service_discovery_service:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      new(rname, name, description=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        arn:: '${aws_service_discovery_service.%s.arn}' % rname,
        id:: '${aws_service_discovery_service.%s.id}' % rname,
        namespace_id:: '${aws_service_discovery_service.%s.namespace_id}' % rname,
        dns_config:: {},
        health_check_config:: {},
        health_check_custom_config:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_namespace_id(namespace_id):: {
        namespace_id::: namespace_id,
      },
      with_dns_config(dns_config):: self + {
        dns_config: dns_config,
      },
      dns_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param namespace_id (required)
        // @param routing_policy (optional)
        // @param dns_records (required)
        new(rname, namespace_id, dns_records, routing_policy=null):: {
          rname:: rname,
          namespace_id: namespace_id,
          [if routing_policy != null then 'routing_policy']: routing_policy,
          dns_records: dns_records,
        },
        dns_records:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param ttl (required)
          // @param type (required)
          new(rname, ttl, type):: {
            rname:: rname,
            ttl: ttl,
            type: type,
          },
        },
      },
      with_health_check_config(health_check_config):: self + {
        health_check_config: health_check_config,
      },
      health_check_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param failure_threshold (optional)
        // @param resource_path (optional)
        // @param type (optional)
        new(rname, failure_threshold=null, resource_path=null, type=null):: {
          rname:: rname,
          [if failure_threshold != null then 'failure_threshold']: failure_threshold,
          [if resource_path != null then 'resource_path']: resource_path,
          [if type != null then 'type']: type,
        },
      },
      with_health_check_custom_config(health_check_custom_config):: self + {
        health_check_custom_config: health_check_custom_config,
      },
      health_check_custom_config:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param failure_threshold (optional)
        new(rname, failure_threshold=null):: {
          rname:: rname,
          [if failure_threshold != null then 'failure_threshold']: failure_threshold,
        },
      },
    },
    // aws_servicecatalog_portfolio - https://www.terraform.io/docs/providers/aws/r/servicecatalog_portfolio.html
    aws_servicecatalog_portfolio:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param provider_name (optional)
      // @param tags (optional)
      new(rname, name, provider_name=null, tags=null):: {
        rname:: rname,
        name: name,
        [if provider_name != null then 'provider_name']: provider_name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_servicecatalog_portfolio.%s.arn}' % rname,
        created_time:: '${aws_servicecatalog_portfolio.%s.created_time}' % rname,
        description:: '${aws_servicecatalog_portfolio.%s.description}' % rname,
        id:: '${aws_servicecatalog_portfolio.%s.id}' % rname,
        timeouts:: {},
      },
      with_description(description):: {
        description::: description,
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_servicequotas_service_quota - https://www.terraform.io/docs/providers/aws/r/servicequotas_service_quota.html
    aws_servicequotas_service_quota:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param quota_code (required)
      // @param service_code (required)
      // @param value (required)
      new(rname, quota_code, service_code, value):: {
        rname:: rname,
        quota_code: quota_code,
        service_code: service_code,
        value: value,
        adjustable:: '${aws_servicequotas_service_quota.%s.adjustable}' % rname,
        arn:: '${aws_servicequotas_service_quota.%s.arn}' % rname,
        default_value:: '${aws_servicequotas_service_quota.%s.default_value}' % rname,
        id:: '${aws_servicequotas_service_quota.%s.id}' % rname,
        quota_name:: '${aws_servicequotas_service_quota.%s.quota_name}' % rname,
        request_id:: '${aws_servicequotas_service_quota.%s.request_id}' % rname,
        request_status:: '${aws_servicequotas_service_quota.%s.request_status}' % rname,
        service_name:: '${aws_servicequotas_service_quota.%s.service_name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_active_receipt_rule_set - https://www.terraform.io/docs/providers/aws/r/ses_active_receipt_rule_set.html
    aws_ses_active_receipt_rule_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param rule_set_name (required)
      new(rname, rule_set_name):: {
        rname:: rname,
        rule_set_name: rule_set_name,
        id:: '${aws_ses_active_receipt_rule_set.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_configuration_set - https://www.terraform.io/docs/providers/aws/r/ses_configuration_set.html
    aws_ses_configuration_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_ses_configuration_set.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_domain_dkim - https://www.terraform.io/docs/providers/aws/r/ses_domain_dkim.html
    aws_ses_domain_dkim:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain (required)
      new(rname, domain):: {
        rname:: rname,
        domain: domain,
        dkim_tokens:: '${aws_ses_domain_dkim.%s.dkim_tokens}' % rname,
        id:: '${aws_ses_domain_dkim.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_domain_identity - https://www.terraform.io/docs/providers/aws/r/ses_domain_identity.html
    aws_ses_domain_identity:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain (required)
      new(rname, domain):: {
        rname:: rname,
        domain: domain,
        arn:: '${aws_ses_domain_identity.%s.arn}' % rname,
        id:: '${aws_ses_domain_identity.%s.id}' % rname,
        verification_token:: '${aws_ses_domain_identity.%s.verification_token}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_domain_identity_verification - https://www.terraform.io/docs/providers/aws/r/ses_domain_identity_verification.html
    aws_ses_domain_identity_verification:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain (required)
      new(rname, domain):: {
        rname:: rname,
        domain: domain,
        arn:: '${aws_ses_domain_identity_verification.%s.arn}' % rname,
        id:: '${aws_ses_domain_identity_verification.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_ses_domain_mail_from - https://www.terraform.io/docs/providers/aws/r/ses_domain_mail_from.html
    aws_ses_domain_mail_from:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain (required)
      // @param mail_from_domain (required)
      // @param behavior_on_mx_failure (optional)
      new(rname, domain, mail_from_domain, behavior_on_mx_failure=null):: {
        rname:: rname,
        domain: domain,
        mail_from_domain: mail_from_domain,
        [if behavior_on_mx_failure != null then 'behavior_on_mx_failure']: behavior_on_mx_failure,
        id:: '${aws_ses_domain_mail_from.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_email_identity - https://www.terraform.io/docs/providers/aws/r/ses_email_identity.html
    aws_ses_email_identity:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param email (required)
      new(rname, email):: {
        rname:: rname,
        email: email,
        arn:: '${aws_ses_email_identity.%s.arn}' % rname,
        id:: '${aws_ses_email_identity.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_event_destination - https://www.terraform.io/docs/providers/aws/r/ses_event_destination.html
    aws_ses_event_destination:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param configuration_set_name (required)
      // @param matching_types (required)
      // @param name (required)
      // @param enabled (optional)
      new(rname, configuration_set_name, matching_types, name, enabled=null):: {
        rname:: rname,
        configuration_set_name: configuration_set_name,
        matching_types: matching_types,
        name: name,
        [if enabled != null then 'enabled']: enabled,
        id:: '${aws_ses_event_destination.%s.id}' % rname,
        cloudwatch_destination:: {},
        kinesis_destination:: {},
        sns_destination:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_cloudwatch_destination(cloudwatch_destination):: self + {
        cloudwatch_destination: cloudwatch_destination,
      },
      cloudwatch_destination:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param default_value (required)
        // @param dimension_name (required)
        // @param value_source (required)
        new(rname, default_value, dimension_name, value_source):: {
          rname:: rname,
          default_value: default_value,
          dimension_name: dimension_name,
          value_source: value_source,
        },
      },
      with_kinesis_destination(kinesis_destination):: self + {
        kinesis_destination: kinesis_destination,
      },
      kinesis_destination:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param role_arn (required)
        // @param stream_arn (required)
        new(rname, role_arn, stream_arn):: {
          rname:: rname,
          role_arn: role_arn,
          stream_arn: stream_arn,
        },
      },
      with_sns_destination(sns_destination):: self + {
        sns_destination: sns_destination,
      },
      sns_destination:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param topic_arn (required)
        new(rname, topic_arn):: {
          rname:: rname,
          topic_arn: topic_arn,
        },
      },
    },
    // aws_ses_identity_notification_topic - https://www.terraform.io/docs/providers/aws/r/ses_identity_notification_topic.html
    aws_ses_identity_notification_topic:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param identity (required)
      // @param notification_type (required)
      // @param include_original_headers (optional)
      // @param topic_arn (optional)
      new(rname, identity, notification_type, include_original_headers=null, topic_arn=null):: {
        rname:: rname,
        identity: identity,
        notification_type: notification_type,
        [if include_original_headers != null then 'include_original_headers']: include_original_headers,
        [if topic_arn != null then 'topic_arn']: topic_arn,
        id:: '${aws_ses_identity_notification_topic.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_identity_policy - https://www.terraform.io/docs/providers/aws/r/ses_identity_policy.html
    aws_ses_identity_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param identity (required)
      // @param name (required)
      // @param policy (required)
      new(rname, identity, name, policy):: {
        rname:: rname,
        identity: identity,
        name: name,
        policy: policy,
        id:: '${aws_ses_identity_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_receipt_filter - https://www.terraform.io/docs/providers/aws/r/ses_receipt_filter.html
    aws_ses_receipt_filter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cidr (required)
      // @param name (required)
      // @param policy (required)
      new(rname, cidr, name, policy):: {
        rname:: rname,
        cidr: cidr,
        name: name,
        policy: policy,
        id:: '${aws_ses_receipt_filter.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_receipt_rule - https://www.terraform.io/docs/providers/aws/r/ses_receipt_rule.html
    aws_ses_receipt_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param rule_set_name (required)
      // @param after (optional)
      // @param recipients (optional)
      new(rname, name, rule_set_name, after=null, recipients=null):: {
        rname:: rname,
        name: name,
        rule_set_name: rule_set_name,
        [if after != null then 'after']: after,
        [if recipients != null then 'recipients']: recipients,
        enabled:: '${aws_ses_receipt_rule.%s.enabled}' % rname,
        id:: '${aws_ses_receipt_rule.%s.id}' % rname,
        scan_enabled:: '${aws_ses_receipt_rule.%s.scan_enabled}' % rname,
        tls_policy:: '${aws_ses_receipt_rule.%s.tls_policy}' % rname,
        add_header_action:: {},
        bounce_action:: {},
        lambda_action:: {},
        s3_action:: {},
        sns_action:: {},
        stop_action:: {},
        workmail_action:: {},
      },
      with_enabled(enabled):: {
        enabled::: enabled,
      },
      with_id(id):: {
        id::: id,
      },
      with_scan_enabled(scan_enabled):: {
        scan_enabled::: scan_enabled,
      },
      with_tls_policy(tls_policy):: {
        tls_policy::: tls_policy,
      },
      with_add_header_action(add_header_action):: self + {
        add_header_action: add_header_action,
      },
      add_header_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param header_name (required)
        // @param header_value (required)
        // @param position (required)
        new(rname, header_name, header_value, position):: {
          rname:: rname,
          header_name: header_name,
          header_value: header_value,
          position: position,
        },
      },
      with_bounce_action(bounce_action):: self + {
        bounce_action: bounce_action,
      },
      bounce_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param message (required)
        // @param position (required)
        // @param sender (required)
        // @param smtp_reply_code (required)
        // @param status_code (optional)
        // @param topic_arn (optional)
        new(rname, message, position, sender, smtp_reply_code, status_code=null, topic_arn=null):: {
          rname:: rname,
          message: message,
          position: position,
          sender: sender,
          smtp_reply_code: smtp_reply_code,
          [if status_code != null then 'status_code']: status_code,
          [if topic_arn != null then 'topic_arn']: topic_arn,
        },
      },
      with_lambda_action(lambda_action):: self + {
        lambda_action: lambda_action,
      },
      lambda_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param function_arn (required)
        // @param position (required)
        // @param topic_arn (optional)
        new(rname, function_arn, position, topic_arn=null):: {
          rname:: rname,
          function_arn: function_arn,
          position: position,
          [if topic_arn != null then 'topic_arn']: topic_arn,
          invocation_type:: '${aws_ses_receipt_rule.%s.lambda_action.invocation_type}' % rname,
        },
        with_invocation_type(invocation_type):: {
          invocation_type::: invocation_type,
        },
      },
      with_s3_action(s3_action):: self + {
        s3_action: s3_action,
      },
      s3_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_name (required)
        // @param position (required)
        // @param kms_key_arn (optional)
        // @param object_key_prefix (optional)
        // @param topic_arn (optional)
        new(rname, bucket_name, position, kms_key_arn=null, object_key_prefix=null, topic_arn=null):: {
          rname:: rname,
          bucket_name: bucket_name,
          position: position,
          [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          [if object_key_prefix != null then 'object_key_prefix']: object_key_prefix,
          [if topic_arn != null then 'topic_arn']: topic_arn,
        },
      },
      with_sns_action(sns_action):: self + {
        sns_action: sns_action,
      },
      sns_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param position (required)
        // @param topic_arn (required)
        new(rname, position, topic_arn):: {
          rname:: rname,
          position: position,
          topic_arn: topic_arn,
        },
      },
      with_stop_action(stop_action):: self + {
        stop_action: stop_action,
      },
      stop_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param position (required)
        // @param scope (required)
        // @param topic_arn (optional)
        new(rname, position, scope, topic_arn=null):: {
          rname:: rname,
          position: position,
          scope: scope,
          [if topic_arn != null then 'topic_arn']: topic_arn,
        },
      },
      with_workmail_action(workmail_action):: self + {
        workmail_action: workmail_action,
      },
      workmail_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param organization_arn (required)
        // @param position (required)
        // @param topic_arn (optional)
        new(rname, organization_arn, position, topic_arn=null):: {
          rname:: rname,
          organization_arn: organization_arn,
          position: position,
          [if topic_arn != null then 'topic_arn']: topic_arn,
        },
      },
    },
    // aws_ses_receipt_rule_set - https://www.terraform.io/docs/providers/aws/r/ses_receipt_rule_set.html
    aws_ses_receipt_rule_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param rule_set_name (required)
      new(rname, rule_set_name):: {
        rname:: rname,
        rule_set_name: rule_set_name,
        id:: '${aws_ses_receipt_rule_set.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ses_template - https://www.terraform.io/docs/providers/aws/r/ses_template.html
    aws_ses_template:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param html (optional)
      // @param subject (optional)
      // @param text (optional)
      new(rname, name, html=null, subject=null, text=null):: {
        rname:: rname,
        name: name,
        [if html != null then 'html']: html,
        [if subject != null then 'subject']: subject,
        [if text != null then 'text']: text,
        id:: '${aws_ses_template.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sfn_activity - https://www.terraform.io/docs/providers/aws/r/sfn_activity.html
    aws_sfn_activity:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param tags (optional)
      new(rname, name, tags=null):: {
        rname:: rname,
        name: name,
        [if tags != null then 'tags']: tags,
        creation_date:: '${aws_sfn_activity.%s.creation_date}' % rname,
        id:: '${aws_sfn_activity.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sfn_state_machine - https://www.terraform.io/docs/providers/aws/r/sfn_state_machine.html
    aws_sfn_state_machine:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param definition (required)
      // @param name (required)
      // @param role_arn (required)
      // @param tags (optional)
      new(rname, definition, name, role_arn, tags=null):: {
        rname:: rname,
        definition: definition,
        name: name,
        role_arn: role_arn,
        [if tags != null then 'tags']: tags,
        creation_date:: '${aws_sfn_state_machine.%s.creation_date}' % rname,
        id:: '${aws_sfn_state_machine.%s.id}' % rname,
        status:: '${aws_sfn_state_machine.%s.status}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_shield_protection - https://www.terraform.io/docs/providers/aws/r/shield_protection.html
    aws_shield_protection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param resource_arn (required)
      new(rname, name, resource_arn):: {
        rname:: rname,
        name: name,
        resource_arn: resource_arn,
        id:: '${aws_shield_protection.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_simpledb_domain - https://www.terraform.io/docs/providers/aws/r/simpledb_domain.html
    aws_simpledb_domain:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_simpledb_domain.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_snapshot_create_volume_permission - https://www.terraform.io/docs/providers/aws/r/snapshot_create_volume_permission.html
    aws_snapshot_create_volume_permission:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param account_id (required)
      // @param snapshot_id (required)
      new(rname, account_id, snapshot_id):: {
        rname:: rname,
        account_id: account_id,
        snapshot_id: snapshot_id,
        id:: '${aws_snapshot_create_volume_permission.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sns_platform_application - https://www.terraform.io/docs/providers/aws/r/sns_platform_application.html
    aws_sns_platform_application:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param platform (required)
      // @param platform_credential (required)
      // @param event_delivery_failure_topic_arn (optional)
      // @param event_endpoint_created_topic_arn (optional)
      // @param event_endpoint_deleted_topic_arn (optional)
      // @param event_endpoint_updated_topic_arn (optional)
      // @param failure_feedback_role_arn (optional)
      // @param platform_principal (optional)
      // @param success_feedback_role_arn (optional)
      // @param success_feedback_sample_rate (optional)
      new(rname, name, platform, platform_credential, event_delivery_failure_topic_arn=null, event_endpoint_created_topic_arn=null, event_endpoint_deleted_topic_arn=null, event_endpoint_updated_topic_arn=null, failure_feedback_role_arn=null, platform_principal=null, success_feedback_role_arn=null, success_feedback_sample_rate=null):: {
        rname:: rname,
        name: name,
        platform: platform,
        platform_credential: platform_credential,
        [if event_delivery_failure_topic_arn != null then 'event_delivery_failure_topic_arn']: event_delivery_failure_topic_arn,
        [if event_endpoint_created_topic_arn != null then 'event_endpoint_created_topic_arn']: event_endpoint_created_topic_arn,
        [if event_endpoint_deleted_topic_arn != null then 'event_endpoint_deleted_topic_arn']: event_endpoint_deleted_topic_arn,
        [if event_endpoint_updated_topic_arn != null then 'event_endpoint_updated_topic_arn']: event_endpoint_updated_topic_arn,
        [if failure_feedback_role_arn != null then 'failure_feedback_role_arn']: failure_feedback_role_arn,
        [if platform_principal != null then 'platform_principal']: platform_principal,
        [if success_feedback_role_arn != null then 'success_feedback_role_arn']: success_feedback_role_arn,
        [if success_feedback_sample_rate != null then 'success_feedback_sample_rate']: success_feedback_sample_rate,
        arn:: '${aws_sns_platform_application.%s.arn}' % rname,
        id:: '${aws_sns_platform_application.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sns_sms_preferences - https://www.terraform.io/docs/providers/aws/r/sns_sms_preferences.html
    aws_sns_sms_preferences:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param default_sender_id (optional)
      // @param default_sms_type (optional)
      // @param delivery_status_iam_role_arn (optional)
      // @param delivery_status_success_sampling_rate (optional)
      // @param monthly_spend_limit (optional)
      // @param usage_report_s3_bucket (optional)
      new(rname, default_sender_id=null, default_sms_type=null, delivery_status_iam_role_arn=null, delivery_status_success_sampling_rate=null, monthly_spend_limit=null, usage_report_s3_bucket=null):: {
        rname:: rname,
        [if default_sender_id != null then 'default_sender_id']: default_sender_id,
        [if default_sms_type != null then 'default_sms_type']: default_sms_type,
        [if delivery_status_iam_role_arn != null then 'delivery_status_iam_role_arn']: delivery_status_iam_role_arn,
        [if delivery_status_success_sampling_rate != null then 'delivery_status_success_sampling_rate']: delivery_status_success_sampling_rate,
        [if monthly_spend_limit != null then 'monthly_spend_limit']: monthly_spend_limit,
        [if usage_report_s3_bucket != null then 'usage_report_s3_bucket']: usage_report_s3_bucket,
        id:: '${aws_sns_sms_preferences.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sns_topic - https://www.terraform.io/docs/providers/aws/r/sns_topic.html
    aws_sns_topic:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param application_failure_feedback_role_arn (optional)
      // @param application_success_feedback_role_arn (optional)
      // @param application_success_feedback_sample_rate (optional)
      // @param delivery_policy (optional)
      // @param display_name (optional)
      // @param http_failure_feedback_role_arn (optional)
      // @param http_success_feedback_role_arn (optional)
      // @param http_success_feedback_sample_rate (optional)
      // @param kms_master_key_id (optional)
      // @param lambda_failure_feedback_role_arn (optional)
      // @param lambda_success_feedback_role_arn (optional)
      // @param lambda_success_feedback_sample_rate (optional)
      // @param name_prefix (optional)
      // @param sqs_failure_feedback_role_arn (optional)
      // @param sqs_success_feedback_role_arn (optional)
      // @param sqs_success_feedback_sample_rate (optional)
      // @param tags (optional)
      new(rname, application_failure_feedback_role_arn=null, application_success_feedback_role_arn=null, application_success_feedback_sample_rate=null, delivery_policy=null, display_name=null, http_failure_feedback_role_arn=null, http_success_feedback_role_arn=null, http_success_feedback_sample_rate=null, kms_master_key_id=null, lambda_failure_feedback_role_arn=null, lambda_success_feedback_role_arn=null, lambda_success_feedback_sample_rate=null, name_prefix=null, sqs_failure_feedback_role_arn=null, sqs_success_feedback_role_arn=null, sqs_success_feedback_sample_rate=null, tags=null):: {
        rname:: rname,
        [if application_failure_feedback_role_arn != null then 'application_failure_feedback_role_arn']: application_failure_feedback_role_arn,
        [if application_success_feedback_role_arn != null then 'application_success_feedback_role_arn']: application_success_feedback_role_arn,
        [if application_success_feedback_sample_rate != null then 'application_success_feedback_sample_rate']: application_success_feedback_sample_rate,
        [if delivery_policy != null then 'delivery_policy']: delivery_policy,
        [if display_name != null then 'display_name']: display_name,
        [if http_failure_feedback_role_arn != null then 'http_failure_feedback_role_arn']: http_failure_feedback_role_arn,
        [if http_success_feedback_role_arn != null then 'http_success_feedback_role_arn']: http_success_feedback_role_arn,
        [if http_success_feedback_sample_rate != null then 'http_success_feedback_sample_rate']: http_success_feedback_sample_rate,
        [if kms_master_key_id != null then 'kms_master_key_id']: kms_master_key_id,
        [if lambda_failure_feedback_role_arn != null then 'lambda_failure_feedback_role_arn']: lambda_failure_feedback_role_arn,
        [if lambda_success_feedback_role_arn != null then 'lambda_success_feedback_role_arn']: lambda_success_feedback_role_arn,
        [if lambda_success_feedback_sample_rate != null then 'lambda_success_feedback_sample_rate']: lambda_success_feedback_sample_rate,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if sqs_failure_feedback_role_arn != null then 'sqs_failure_feedback_role_arn']: sqs_failure_feedback_role_arn,
        [if sqs_success_feedback_role_arn != null then 'sqs_success_feedback_role_arn']: sqs_success_feedback_role_arn,
        [if sqs_success_feedback_sample_rate != null then 'sqs_success_feedback_sample_rate']: sqs_success_feedback_sample_rate,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_sns_topic.%s.arn}' % rname,
        id:: '${aws_sns_topic.%s.id}' % rname,
        name:: '${aws_sns_topic.%s.name}' % rname,
        policy:: '${aws_sns_topic.%s.policy}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
      with_policy(policy):: {
        policy::: policy,
      },
    },
    // aws_sns_topic_policy - https://www.terraform.io/docs/providers/aws/r/sns_topic_policy.html
    aws_sns_topic_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param arn (required)
      // @param policy (required)
      new(rname, arn, policy):: {
        rname:: rname,
        arn: arn,
        policy: policy,
        id:: '${aws_sns_topic_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_sns_topic_subscription - https://www.terraform.io/docs/providers/aws/r/sns_topic_subscription.html
    aws_sns_topic_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param endpoint (required)
      // @param protocol (required)
      // @param topic_arn (required)
      // @param confirmation_timeout_in_minutes (optional)
      // @param delivery_policy (optional)
      // @param endpoint_auto_confirms (optional)
      // @param filter_policy (optional)
      // @param raw_message_delivery (optional)
      new(rname, endpoint, protocol, topic_arn, confirmation_timeout_in_minutes=null, delivery_policy=null, endpoint_auto_confirms=null, filter_policy=null, raw_message_delivery=null):: {
        rname:: rname,
        endpoint: endpoint,
        protocol: protocol,
        topic_arn: topic_arn,
        [if confirmation_timeout_in_minutes != null then 'confirmation_timeout_in_minutes']: confirmation_timeout_in_minutes,
        [if delivery_policy != null then 'delivery_policy']: delivery_policy,
        [if endpoint_auto_confirms != null then 'endpoint_auto_confirms']: endpoint_auto_confirms,
        [if filter_policy != null then 'filter_policy']: filter_policy,
        [if raw_message_delivery != null then 'raw_message_delivery']: raw_message_delivery,
        arn:: '${aws_sns_topic_subscription.%s.arn}' % rname,
        id:: '${aws_sns_topic_subscription.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_spot_datafeed_subscription - https://www.terraform.io/docs/providers/aws/r/spot_datafeed_subscription.html
    aws_spot_datafeed_subscription:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param bucket (required)
      // @param prefix (optional)
      new(rname, bucket, prefix=null):: {
        rname:: rname,
        bucket: bucket,
        [if prefix != null then 'prefix']: prefix,
        id:: '${aws_spot_datafeed_subscription.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_spot_fleet_request - https://www.terraform.io/docs/providers/aws/r/spot_fleet_request.html
    aws_spot_fleet_request:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param iam_fleet_role (required)
      // @param target_capacity (required)
      // @param allocation_strategy (optional)
      // @param excess_capacity_termination_policy (optional)
      // @param fleet_type (optional)
      // @param instance_interruption_behaviour (optional)
      // @param instance_pools_to_use_count (optional)
      // @param replace_unhealthy_instances (optional)
      // @param spot_price (optional)
      // @param terminate_instances_with_expiration (optional)
      // @param valid_from (optional)
      // @param valid_until (optional)
      // @param wait_for_fulfillment (optional)
      // @param launch_specification (required)
      new(rname, iam_fleet_role, target_capacity, launch_specification, allocation_strategy=null, excess_capacity_termination_policy=null, fleet_type=null, instance_interruption_behaviour=null, instance_pools_to_use_count=null, replace_unhealthy_instances=null, spot_price=null, terminate_instances_with_expiration=null, valid_from=null, valid_until=null, wait_for_fulfillment=null):: {
        rname:: rname,
        iam_fleet_role: iam_fleet_role,
        target_capacity: target_capacity,
        [if allocation_strategy != null then 'allocation_strategy']: allocation_strategy,
        [if excess_capacity_termination_policy != null then 'excess_capacity_termination_policy']: excess_capacity_termination_policy,
        [if fleet_type != null then 'fleet_type']: fleet_type,
        [if instance_interruption_behaviour != null then 'instance_interruption_behaviour']: instance_interruption_behaviour,
        [if instance_pools_to_use_count != null then 'instance_pools_to_use_count']: instance_pools_to_use_count,
        [if replace_unhealthy_instances != null then 'replace_unhealthy_instances']: replace_unhealthy_instances,
        [if spot_price != null then 'spot_price']: spot_price,
        [if terminate_instances_with_expiration != null then 'terminate_instances_with_expiration']: terminate_instances_with_expiration,
        [if valid_from != null then 'valid_from']: valid_from,
        [if valid_until != null then 'valid_until']: valid_until,
        [if wait_for_fulfillment != null then 'wait_for_fulfillment']: wait_for_fulfillment,
        client_token:: '${aws_spot_fleet_request.%s.client_token}' % rname,
        id:: '${aws_spot_fleet_request.%s.id}' % rname,
        load_balancers:: '${aws_spot_fleet_request.%s.load_balancers}' % rname,
        spot_request_state:: '${aws_spot_fleet_request.%s.spot_request_state}' % rname,
        target_group_arns:: '${aws_spot_fleet_request.%s.target_group_arns}' % rname,
        launch_specification: launch_specification,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_load_balancers(load_balancers):: {
        load_balancers::: load_balancers,
      },
      with_target_group_arns(target_group_arns):: {
        target_group_arns::: target_group_arns,
      },
      launch_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param ami (required)
        // @param instance_type (required)
        // @param associate_public_ip_address (optional)
        // @param ebs_optimized (optional)
        // @param iam_instance_profile (optional)
        // @param iam_instance_profile_arn (optional)
        // @param monitoring (optional)
        // @param placement_tenancy (optional)
        // @param spot_price (optional)
        // @param tags (optional)
        // @param user_data (optional)
        // @param weighted_capacity (optional)
        new(rname, ami, instance_type, associate_public_ip_address=null, ebs_optimized=null, iam_instance_profile=null, iam_instance_profile_arn=null, monitoring=null, placement_tenancy=null, spot_price=null, tags=null, user_data=null, weighted_capacity=null):: {
          rname:: rname,
          ami: ami,
          instance_type: instance_type,
          [if associate_public_ip_address != null then 'associate_public_ip_address']: associate_public_ip_address,
          [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
          [if iam_instance_profile != null then 'iam_instance_profile']: iam_instance_profile,
          [if iam_instance_profile_arn != null then 'iam_instance_profile_arn']: iam_instance_profile_arn,
          [if monitoring != null then 'monitoring']: monitoring,
          [if placement_tenancy != null then 'placement_tenancy']: placement_tenancy,
          [if spot_price != null then 'spot_price']: spot_price,
          [if tags != null then 'tags']: tags,
          [if user_data != null then 'user_data']: user_data,
          [if weighted_capacity != null then 'weighted_capacity']: weighted_capacity,
          availability_zone:: '${aws_spot_fleet_request.%s.launch_specification.availability_zone}' % rname,
          key_name:: '${aws_spot_fleet_request.%s.launch_specification.key_name}' % rname,
          placement_group:: '${aws_spot_fleet_request.%s.launch_specification.placement_group}' % rname,
          subnet_id:: '${aws_spot_fleet_request.%s.launch_specification.subnet_id}' % rname,
          vpc_security_group_ids:: '${aws_spot_fleet_request.%s.launch_specification.vpc_security_group_ids}' % rname,
          ebs_block_device:: {},
          ephemeral_block_device:: {},
          root_block_device:: {},
        },
        with_availability_zone(availability_zone):: {
          availability_zone::: availability_zone,
        },
        with_key_name(key_name):: {
          key_name::: key_name,
        },
        with_placement_group(placement_group):: {
          placement_group::: placement_group,
        },
        with_subnet_id(subnet_id):: {
          subnet_id::: subnet_id,
        },
        with_vpc_security_group_ids(vpc_security_group_ids):: {
          vpc_security_group_ids::: vpc_security_group_ids,
        },
        with_ebs_block_device(ebs_block_device):: self + {
          ebs_block_device: ebs_block_device,
        },
        ebs_block_device:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param device_name (required)
          // @param delete_on_termination (optional)
          new(rname, device_name, delete_on_termination=null):: {
            rname:: rname,
            device_name: device_name,
            [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
            encrypted:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.encrypted}' % rname,
            iops:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.iops}' % rname,
            kms_key_id:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.kms_key_id}' % rname,
            snapshot_id:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.snapshot_id}' % rname,
            volume_size:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.volume_size}' % rname,
            volume_type:: '${aws_spot_fleet_request.%s.launch_specification.ebs_block_device.volume_type}' % rname,
          },
          with_encrypted(encrypted):: {
            encrypted::: encrypted,
          },
          with_iops(iops):: {
            iops::: iops,
          },
          with_kms_key_id(kms_key_id):: {
            kms_key_id::: kms_key_id,
          },
          with_snapshot_id(snapshot_id):: {
            snapshot_id::: snapshot_id,
          },
          with_volume_size(volume_size):: {
            volume_size::: volume_size,
          },
          with_volume_type(volume_type):: {
            volume_type::: volume_type,
          },
        },
        with_ephemeral_block_device(ephemeral_block_device):: self + {
          ephemeral_block_device: ephemeral_block_device,
        },
        ephemeral_block_device:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param device_name (required)
          // @param virtual_name (required)
          new(rname, device_name, virtual_name):: {
            rname:: rname,
            device_name: device_name,
            virtual_name: virtual_name,
          },
        },
        with_root_block_device(root_block_device):: self + {
          root_block_device: root_block_device,
        },
        root_block_device:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param delete_on_termination (optional)
          new(rname, delete_on_termination=null):: {
            rname:: rname,
            [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
            encrypted:: '${aws_spot_fleet_request.%s.launch_specification.root_block_device.encrypted}' % rname,
            iops:: '${aws_spot_fleet_request.%s.launch_specification.root_block_device.iops}' % rname,
            kms_key_id:: '${aws_spot_fleet_request.%s.launch_specification.root_block_device.kms_key_id}' % rname,
            volume_size:: '${aws_spot_fleet_request.%s.launch_specification.root_block_device.volume_size}' % rname,
            volume_type:: '${aws_spot_fleet_request.%s.launch_specification.root_block_device.volume_type}' % rname,
          },
          with_encrypted(encrypted):: {
            encrypted::: encrypted,
          },
          with_iops(iops):: {
            iops::: iops,
          },
          with_kms_key_id(kms_key_id):: {
            kms_key_id::: kms_key_id,
          },
          with_volume_size(volume_size):: {
            volume_size::: volume_size,
          },
          with_volume_type(volume_type):: {
            volume_type::: volume_type,
          },
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_spot_instance_request - https://www.terraform.io/docs/providers/aws/r/spot_instance_request.html
    aws_spot_instance_request:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param ami (required)
      // @param instance_type (required)
      // @param block_duration_minutes (optional)
      // @param disable_api_termination (optional)
      // @param ebs_optimized (optional)
      // @param get_password_data (optional)
      // @param hibernation (optional)
      // @param iam_instance_profile (optional)
      // @param instance_initiated_shutdown_behavior (optional)
      // @param instance_interruption_behaviour (optional)
      // @param launch_group (optional)
      // @param monitoring (optional)
      // @param source_dest_check (optional)
      // @param spot_price (optional)
      // @param spot_type (optional)
      // @param tags (optional)
      // @param user_data (optional)
      // @param user_data_base64 (optional)
      // @param volume_tags (optional)
      // @param wait_for_fulfillment (optional)
      new(rname, ami, instance_type, block_duration_minutes=null, disable_api_termination=null, ebs_optimized=null, get_password_data=null, hibernation=null, iam_instance_profile=null, instance_initiated_shutdown_behavior=null, instance_interruption_behaviour=null, launch_group=null, monitoring=null, source_dest_check=null, spot_price=null, spot_type=null, tags=null, user_data=null, user_data_base64=null, volume_tags=null, wait_for_fulfillment=null):: {
        rname:: rname,
        ami: ami,
        instance_type: instance_type,
        [if block_duration_minutes != null then 'block_duration_minutes']: block_duration_minutes,
        [if disable_api_termination != null then 'disable_api_termination']: disable_api_termination,
        [if ebs_optimized != null then 'ebs_optimized']: ebs_optimized,
        [if get_password_data != null then 'get_password_data']: get_password_data,
        [if hibernation != null then 'hibernation']: hibernation,
        [if iam_instance_profile != null then 'iam_instance_profile']: iam_instance_profile,
        [if instance_initiated_shutdown_behavior != null then 'instance_initiated_shutdown_behavior']: instance_initiated_shutdown_behavior,
        [if instance_interruption_behaviour != null then 'instance_interruption_behaviour']: instance_interruption_behaviour,
        [if launch_group != null then 'launch_group']: launch_group,
        [if monitoring != null then 'monitoring']: monitoring,
        [if source_dest_check != null then 'source_dest_check']: source_dest_check,
        [if spot_price != null then 'spot_price']: spot_price,
        [if spot_type != null then 'spot_type']: spot_type,
        [if tags != null then 'tags']: tags,
        [if user_data != null then 'user_data']: user_data,
        [if user_data_base64 != null then 'user_data_base64']: user_data_base64,
        [if volume_tags != null then 'volume_tags']: volume_tags,
        [if wait_for_fulfillment != null then 'wait_for_fulfillment']: wait_for_fulfillment,
        arn:: '${aws_spot_instance_request.%s.arn}' % rname,
        associate_public_ip_address:: '${aws_spot_instance_request.%s.associate_public_ip_address}' % rname,
        availability_zone:: '${aws_spot_instance_request.%s.availability_zone}' % rname,
        cpu_core_count:: '${aws_spot_instance_request.%s.cpu_core_count}' % rname,
        cpu_threads_per_core:: '${aws_spot_instance_request.%s.cpu_threads_per_core}' % rname,
        host_id:: '${aws_spot_instance_request.%s.host_id}' % rname,
        id:: '${aws_spot_instance_request.%s.id}' % rname,
        instance_state:: '${aws_spot_instance_request.%s.instance_state}' % rname,
        ipv6_address_count:: '${aws_spot_instance_request.%s.ipv6_address_count}' % rname,
        ipv6_addresses:: '${aws_spot_instance_request.%s.ipv6_addresses}' % rname,
        key_name:: '${aws_spot_instance_request.%s.key_name}' % rname,
        network_interface_id:: '${aws_spot_instance_request.%s.network_interface_id}' % rname,
        password_data:: '${aws_spot_instance_request.%s.password_data}' % rname,
        placement_group:: '${aws_spot_instance_request.%s.placement_group}' % rname,
        primary_network_interface_id:: '${aws_spot_instance_request.%s.primary_network_interface_id}' % rname,
        private_dns:: '${aws_spot_instance_request.%s.private_dns}' % rname,
        private_ip:: '${aws_spot_instance_request.%s.private_ip}' % rname,
        public_dns:: '${aws_spot_instance_request.%s.public_dns}' % rname,
        public_ip:: '${aws_spot_instance_request.%s.public_ip}' % rname,
        security_groups:: '${aws_spot_instance_request.%s.security_groups}' % rname,
        spot_bid_status:: '${aws_spot_instance_request.%s.spot_bid_status}' % rname,
        spot_instance_id:: '${aws_spot_instance_request.%s.spot_instance_id}' % rname,
        spot_request_state:: '${aws_spot_instance_request.%s.spot_request_state}' % rname,
        subnet_id:: '${aws_spot_instance_request.%s.subnet_id}' % rname,
        tenancy:: '${aws_spot_instance_request.%s.tenancy}' % rname,
        valid_from:: '${aws_spot_instance_request.%s.valid_from}' % rname,
        valid_until:: '${aws_spot_instance_request.%s.valid_until}' % rname,
        vpc_security_group_ids:: '${aws_spot_instance_request.%s.vpc_security_group_ids}' % rname,
        credit_specification:: {},
        ebs_block_device:: {},
        ephemeral_block_device:: {},
        network_interface:: {},
        root_block_device:: {},
        timeouts:: {},
      },
      with_associate_public_ip_address(associate_public_ip_address):: {
        associate_public_ip_address::: associate_public_ip_address,
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_cpu_core_count(cpu_core_count):: {
        cpu_core_count::: cpu_core_count,
      },
      with_cpu_threads_per_core(cpu_threads_per_core):: {
        cpu_threads_per_core::: cpu_threads_per_core,
      },
      with_host_id(host_id):: {
        host_id::: host_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_ipv6_address_count(ipv6_address_count):: {
        ipv6_address_count::: ipv6_address_count,
      },
      with_ipv6_addresses(ipv6_addresses):: {
        ipv6_addresses::: ipv6_addresses,
      },
      with_key_name(key_name):: {
        key_name::: key_name,
      },
      with_placement_group(placement_group):: {
        placement_group::: placement_group,
      },
      with_private_ip(private_ip):: {
        private_ip::: private_ip,
      },
      with_security_groups(security_groups):: {
        security_groups::: security_groups,
      },
      with_subnet_id(subnet_id):: {
        subnet_id::: subnet_id,
      },
      with_tenancy(tenancy):: {
        tenancy::: tenancy,
      },
      with_valid_from(valid_from):: {
        valid_from::: valid_from,
      },
      with_valid_until(valid_until):: {
        valid_until::: valid_until,
      },
      with_vpc_security_group_ids(vpc_security_group_ids):: {
        vpc_security_group_ids::: vpc_security_group_ids,
      },
      with_credit_specification(credit_specification):: self + {
        credit_specification: credit_specification,
      },
      credit_specification:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param cpu_credits (optional)
        new(rname, cpu_credits=null):: {
          rname:: rname,
          [if cpu_credits != null then 'cpu_credits']: cpu_credits,
        },
      },
      with_ebs_block_device(ebs_block_device):: self + {
        ebs_block_device: ebs_block_device,
      },
      ebs_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param delete_on_termination (optional)
        new(rname, device_name, delete_on_termination=null):: {
          rname:: rname,
          device_name: device_name,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          encrypted:: '${aws_spot_instance_request.%s.ebs_block_device.encrypted}' % rname,
          iops:: '${aws_spot_instance_request.%s.ebs_block_device.iops}' % rname,
          kms_key_id:: '${aws_spot_instance_request.%s.ebs_block_device.kms_key_id}' % rname,
          snapshot_id:: '${aws_spot_instance_request.%s.ebs_block_device.snapshot_id}' % rname,
          volume_id:: '${aws_spot_instance_request.%s.ebs_block_device.volume_id}' % rname,
          volume_size:: '${aws_spot_instance_request.%s.ebs_block_device.volume_size}' % rname,
          volume_type:: '${aws_spot_instance_request.%s.ebs_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
        with_snapshot_id(snapshot_id):: {
          snapshot_id::: snapshot_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_ephemeral_block_device(ephemeral_block_device):: self + {
        ephemeral_block_device: ephemeral_block_device,
      },
      ephemeral_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_name (required)
        // @param no_device (optional)
        // @param virtual_name (optional)
        new(rname, device_name, no_device=null, virtual_name=null):: {
          rname:: rname,
          device_name: device_name,
          [if no_device != null then 'no_device']: no_device,
          [if virtual_name != null then 'virtual_name']: virtual_name,
        },
      },
      with_network_interface(network_interface):: self + {
        network_interface: network_interface,
      },
      network_interface:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param device_index (required)
        // @param network_interface_id (required)
        // @param delete_on_termination (optional)
        new(rname, device_index, network_interface_id, delete_on_termination=null):: {
          rname:: rname,
          device_index: device_index,
          network_interface_id: network_interface_id,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
        },
      },
      with_root_block_device(root_block_device):: self + {
        root_block_device: root_block_device,
      },
      root_block_device:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param delete_on_termination (optional)
        new(rname, delete_on_termination=null):: {
          rname:: rname,
          [if delete_on_termination != null then 'delete_on_termination']: delete_on_termination,
          encrypted:: '${aws_spot_instance_request.%s.root_block_device.encrypted}' % rname,
          iops:: '${aws_spot_instance_request.%s.root_block_device.iops}' % rname,
          kms_key_id:: '${aws_spot_instance_request.%s.root_block_device.kms_key_id}' % rname,
          volume_id:: '${aws_spot_instance_request.%s.root_block_device.volume_id}' % rname,
          volume_size:: '${aws_spot_instance_request.%s.root_block_device.volume_size}' % rname,
          volume_type:: '${aws_spot_instance_request.%s.root_block_device.volume_type}' % rname,
        },
        with_encrypted(encrypted):: {
          encrypted::: encrypted,
        },
        with_iops(iops):: {
          iops::: iops,
        },
        with_kms_key_id(kms_key_id):: {
          kms_key_id::: kms_key_id,
        },
        with_volume_size(volume_size):: {
          volume_size::: volume_size,
        },
        with_volume_type(volume_type):: {
          volume_type::: volume_type,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_sqs_queue - https://www.terraform.io/docs/providers/aws/r/sqs_queue.html
    aws_sqs_queue:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param content_based_deduplication (optional)
      // @param delay_seconds (optional)
      // @param fifo_queue (optional)
      // @param kms_master_key_id (optional)
      // @param max_message_size (optional)
      // @param message_retention_seconds (optional)
      // @param name_prefix (optional)
      // @param receive_wait_time_seconds (optional)
      // @param redrive_policy (optional)
      // @param tags (optional)
      // @param visibility_timeout_seconds (optional)
      new(rname, content_based_deduplication=null, delay_seconds=null, fifo_queue=null, kms_master_key_id=null, max_message_size=null, message_retention_seconds=null, name_prefix=null, receive_wait_time_seconds=null, redrive_policy=null, tags=null, visibility_timeout_seconds=null):: {
        rname:: rname,
        [if content_based_deduplication != null then 'content_based_deduplication']: content_based_deduplication,
        [if delay_seconds != null then 'delay_seconds']: delay_seconds,
        [if fifo_queue != null then 'fifo_queue']: fifo_queue,
        [if kms_master_key_id != null then 'kms_master_key_id']: kms_master_key_id,
        [if max_message_size != null then 'max_message_size']: max_message_size,
        [if message_retention_seconds != null then 'message_retention_seconds']: message_retention_seconds,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if receive_wait_time_seconds != null then 'receive_wait_time_seconds']: receive_wait_time_seconds,
        [if redrive_policy != null then 'redrive_policy']: redrive_policy,
        [if tags != null then 'tags']: tags,
        [if visibility_timeout_seconds != null then 'visibility_timeout_seconds']: visibility_timeout_seconds,
        arn:: '${aws_sqs_queue.%s.arn}' % rname,
        id:: '${aws_sqs_queue.%s.id}' % rname,
        kms_data_key_reuse_period_seconds:: '${aws_sqs_queue.%s.kms_data_key_reuse_period_seconds}' % rname,
        name:: '${aws_sqs_queue.%s.name}' % rname,
        policy:: '${aws_sqs_queue.%s.policy}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_kms_data_key_reuse_period_seconds(kms_data_key_reuse_period_seconds):: {
        kms_data_key_reuse_period_seconds::: kms_data_key_reuse_period_seconds,
      },
      with_name(name):: {
        name::: name,
      },
      with_policy(policy):: {
        policy::: policy,
      },
    },
    // aws_sqs_queue_policy - https://www.terraform.io/docs/providers/aws/r/sqs_queue_policy.html
    aws_sqs_queue_policy:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param policy (required)
      // @param queue_url (required)
      new(rname, policy, queue_url):: {
        rname:: rname,
        policy: policy,
        queue_url: queue_url,
        id:: '${aws_sqs_queue_policy.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ssm_activation - https://www.terraform.io/docs/providers/aws/r/ssm_activation.html
    aws_ssm_activation:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param iam_role (required)
      // @param description (optional)
      // @param name (optional)
      // @param registration_limit (optional)
      // @param tags (optional)
      new(rname, iam_role, description=null, name=null, registration_limit=null, tags=null):: {
        rname:: rname,
        iam_role: iam_role,
        [if description != null then 'description']: description,
        [if name != null then 'name']: name,
        [if registration_limit != null then 'registration_limit']: registration_limit,
        [if tags != null then 'tags']: tags,
        activation_code:: '${aws_ssm_activation.%s.activation_code}' % rname,
        expiration_date:: '${aws_ssm_activation.%s.expiration_date}' % rname,
        expired:: '${aws_ssm_activation.%s.expired}' % rname,
        id:: '${aws_ssm_activation.%s.id}' % rname,
        registration_count:: '${aws_ssm_activation.%s.registration_count}' % rname,
      },
      with_expiration_date(expiration_date):: {
        expiration_date::: expiration_date,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ssm_association - https://www.terraform.io/docs/providers/aws/r/ssm_association.html
    aws_ssm_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param association_name (optional)
      // @param automation_target_parameter_name (optional)
      // @param compliance_severity (optional)
      // @param instance_id (optional)
      // @param max_concurrency (optional)
      // @param max_errors (optional)
      // @param schedule_expression (optional)
      new(rname, name, association_name=null, automation_target_parameter_name=null, compliance_severity=null, instance_id=null, max_concurrency=null, max_errors=null, schedule_expression=null):: {
        rname:: rname,
        name: name,
        [if association_name != null then 'association_name']: association_name,
        [if automation_target_parameter_name != null then 'automation_target_parameter_name']: automation_target_parameter_name,
        [if compliance_severity != null then 'compliance_severity']: compliance_severity,
        [if instance_id != null then 'instance_id']: instance_id,
        [if max_concurrency != null then 'max_concurrency']: max_concurrency,
        [if max_errors != null then 'max_errors']: max_errors,
        [if schedule_expression != null then 'schedule_expression']: schedule_expression,
        association_id:: '${aws_ssm_association.%s.association_id}' % rname,
        document_version:: '${aws_ssm_association.%s.document_version}' % rname,
        id:: '${aws_ssm_association.%s.id}' % rname,
        parameters:: '${aws_ssm_association.%s.parameters}' % rname,
        output_location:: {},
        targets:: {},
      },
      with_document_version(document_version):: {
        document_version::: document_version,
      },
      with_id(id):: {
        id::: id,
      },
      with_parameters(parameters):: {
        parameters::: parameters,
      },
      with_output_location(output_location):: self + {
        output_location: output_location,
      },
      output_location:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param s3_bucket_name (required)
        // @param s3_key_prefix (optional)
        new(rname, s3_bucket_name, s3_key_prefix=null):: {
          rname:: rname,
          s3_bucket_name: s3_bucket_name,
          [if s3_key_prefix != null then 's3_key_prefix']: s3_key_prefix,
        },
      },
      with_targets(targets):: self + {
        targets: targets,
      },
      targets:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        new(rname, key, values):: {
          rname:: rname,
          key: key,
          values: values,
        },
      },
    },
    // aws_ssm_document - https://www.terraform.io/docs/providers/aws/r/ssm_document.html
    aws_ssm_document:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param content (required)
      // @param document_type (required)
      // @param name (required)
      // @param document_format (optional)
      // @param permissions (optional)
      // @param tags (optional)
      // @param target_type (optional)
      new(rname, content, document_type, name, document_format=null, permissions=null, tags=null, target_type=null):: {
        rname:: rname,
        content: content,
        document_type: document_type,
        name: name,
        [if document_format != null then 'document_format']: document_format,
        [if permissions != null then 'permissions']: permissions,
        [if tags != null then 'tags']: tags,
        [if target_type != null then 'target_type']: target_type,
        arn:: '${aws_ssm_document.%s.arn}' % rname,
        created_date:: '${aws_ssm_document.%s.created_date}' % rname,
        default_version:: '${aws_ssm_document.%s.default_version}' % rname,
        description:: '${aws_ssm_document.%s.description}' % rname,
        hash:: '${aws_ssm_document.%s.hash}' % rname,
        hash_type:: '${aws_ssm_document.%s.hash_type}' % rname,
        id:: '${aws_ssm_document.%s.id}' % rname,
        latest_version:: '${aws_ssm_document.%s.latest_version}' % rname,
        owner:: '${aws_ssm_document.%s.owner}' % rname,
        parameter:: '${aws_ssm_document.%s.parameter}' % rname,
        platform_types:: '${aws_ssm_document.%s.platform_types}' % rname,
        schema_version:: '${aws_ssm_document.%s.schema_version}' % rname,
        status:: '${aws_ssm_document.%s.status}' % rname,
        attachments_source:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_attachments_source(attachments_source):: self + {
        attachments_source: attachments_source,
      },
      attachments_source:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        // @param name (optional)
        new(rname, key, values, name=null):: {
          rname:: rname,
          key: key,
          values: values,
          [if name != null then 'name']: name,
        },
      },
    },
    // aws_ssm_maintenance_window - https://www.terraform.io/docs/providers/aws/r/ssm_maintenance_window.html
    aws_ssm_maintenance_window:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cutoff (required)
      // @param duration (required)
      // @param name (required)
      // @param schedule (required)
      // @param allow_unassociated_targets (optional)
      // @param description (optional)
      // @param enabled (optional)
      // @param end_date (optional)
      // @param schedule_timezone (optional)
      // @param start_date (optional)
      // @param tags (optional)
      new(rname, cutoff, duration, name, schedule, allow_unassociated_targets=null, description=null, enabled=null, end_date=null, schedule_timezone=null, start_date=null, tags=null):: {
        rname:: rname,
        cutoff: cutoff,
        duration: duration,
        name: name,
        schedule: schedule,
        [if allow_unassociated_targets != null then 'allow_unassociated_targets']: allow_unassociated_targets,
        [if description != null then 'description']: description,
        [if enabled != null then 'enabled']: enabled,
        [if end_date != null then 'end_date']: end_date,
        [if schedule_timezone != null then 'schedule_timezone']: schedule_timezone,
        [if start_date != null then 'start_date']: start_date,
        [if tags != null then 'tags']: tags,
        id:: '${aws_ssm_maintenance_window.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ssm_maintenance_window_target - https://www.terraform.io/docs/providers/aws/r/ssm_maintenance_window_target.html
    aws_ssm_maintenance_window_target:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param resource_type (required)
      // @param window_id (required)
      // @param description (optional)
      // @param name (optional)
      // @param owner_information (optional)
      // @param targets (required)
      new(rname, resource_type, window_id, targets, description=null, name=null, owner_information=null):: {
        rname:: rname,
        resource_type: resource_type,
        window_id: window_id,
        [if description != null then 'description']: description,
        [if name != null then 'name']: name,
        [if owner_information != null then 'owner_information']: owner_information,
        id:: '${aws_ssm_maintenance_window_target.%s.id}' % rname,
        targets: targets,
      },
      with_id(id):: {
        id::: id,
      },
      targets:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        new(rname, key, values):: {
          rname:: rname,
          key: key,
          values: values,
        },
      },
    },
    // aws_ssm_maintenance_window_task - https://www.terraform.io/docs/providers/aws/r/ssm_maintenance_window_task.html
    aws_ssm_maintenance_window_task:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param max_concurrency (required)
      // @param max_errors (required)
      // @param service_role_arn (required)
      // @param task_arn (required)
      // @param task_type (required)
      // @param window_id (required)
      // @param description (optional)
      // @param name (optional)
      // @param priority (optional)
      // @param targets (required)
      new(rname, max_concurrency, max_errors, service_role_arn, task_arn, task_type, window_id, targets, description=null, name=null, priority=null):: {
        rname:: rname,
        max_concurrency: max_concurrency,
        max_errors: max_errors,
        service_role_arn: service_role_arn,
        task_arn: task_arn,
        task_type: task_type,
        window_id: window_id,
        [if description != null then 'description']: description,
        [if name != null then 'name']: name,
        [if priority != null then 'priority']: priority,
        id:: '${aws_ssm_maintenance_window_task.%s.id}' % rname,
        logging_info:: {},
        targets: targets,
        task_invocation_parameters:: {},
        task_parameters:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_logging_info(logging_info):: self + {
        logging_info: logging_info,
      },
      logging_info:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param s3_bucket_name (required)
        // @param s3_region (required)
        // @param s3_bucket_prefix (optional)
        new(rname, s3_bucket_name, s3_region, s3_bucket_prefix=null):: {
          rname:: rname,
          s3_bucket_name: s3_bucket_name,
          s3_region: s3_region,
          [if s3_bucket_prefix != null then 's3_bucket_prefix']: s3_bucket_prefix,
        },
      },
      targets:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        new(rname, key, values):: {
          rname:: rname,
          key: key,
          values: values,
        },
      },
      with_task_invocation_parameters(task_invocation_parameters):: self + {
        task_invocation_parameters: task_invocation_parameters,
      },
      task_invocation_parameters:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        new(rname):: {
          rname:: rname,
          automation_parameters:: {},
          lambda_parameters:: {},
          run_command_parameters:: {},
          step_functions_parameters:: {},
        },
        with_automation_parameters(automation_parameters):: self + {
          automation_parameters: automation_parameters,
        },
        automation_parameters:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param document_version (optional)
          new(rname, document_version=null):: {
            rname:: rname,
            [if document_version != null then 'document_version']: document_version,
            parameter:: {},
          },
          with_parameter(parameter):: self + {
            parameter: parameter,
          },
          parameter:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param values (required)
            new(rname, name, values):: {
              rname:: rname,
              name: name,
              values: values,
            },
          },
        },
        with_lambda_parameters(lambda_parameters):: self + {
          lambda_parameters: lambda_parameters,
        },
        lambda_parameters:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param client_context (optional)
          // @param payload (optional)
          // @param qualifier (optional)
          new(rname, client_context=null, payload=null, qualifier=null):: {
            rname:: rname,
            [if client_context != null then 'client_context']: client_context,
            [if payload != null then 'payload']: payload,
            [if qualifier != null then 'qualifier']: qualifier,
          },
        },
        with_run_command_parameters(run_command_parameters):: self + {
          run_command_parameters: run_command_parameters,
        },
        run_command_parameters:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param comment (optional)
          // @param document_hash (optional)
          // @param document_hash_type (optional)
          // @param output_s3_bucket (optional)
          // @param output_s3_key_prefix (optional)
          // @param service_role_arn (optional)
          // @param timeout_seconds (optional)
          new(rname, comment=null, document_hash=null, document_hash_type=null, output_s3_bucket=null, output_s3_key_prefix=null, service_role_arn=null, timeout_seconds=null):: {
            rname:: rname,
            [if comment != null then 'comment']: comment,
            [if document_hash != null then 'document_hash']: document_hash,
            [if document_hash_type != null then 'document_hash_type']: document_hash_type,
            [if output_s3_bucket != null then 'output_s3_bucket']: output_s3_bucket,
            [if output_s3_key_prefix != null then 'output_s3_key_prefix']: output_s3_key_prefix,
            [if service_role_arn != null then 'service_role_arn']: service_role_arn,
            [if timeout_seconds != null then 'timeout_seconds']: timeout_seconds,
            notification_config:: {},
            parameter:: {},
          },
          with_notification_config(notification_config):: self + {
            notification_config: notification_config,
          },
          notification_config:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param notification_arn (optional)
            // @param notification_events (optional)
            // @param notification_type (optional)
            new(rname, notification_arn=null, notification_events=null, notification_type=null):: {
              rname:: rname,
              [if notification_arn != null then 'notification_arn']: notification_arn,
              [if notification_events != null then 'notification_events']: notification_events,
              [if notification_type != null then 'notification_type']: notification_type,
            },
          },
          with_parameter(parameter):: self + {
            parameter: parameter,
          },
          parameter:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param name (required)
            // @param values (required)
            new(rname, name, values):: {
              rname:: rname,
              name: name,
              values: values,
            },
          },
        },
        with_step_functions_parameters(step_functions_parameters):: self + {
          step_functions_parameters: step_functions_parameters,
        },
        step_functions_parameters:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param input (optional)
          // @param name (optional)
          new(rname, input=null, name=null):: {
            rname:: rname,
            [if input != null then 'input']: input,
            [if name != null then 'name']: name,
          },
        },
      },
      with_task_parameters(task_parameters):: self + {
        task_parameters: task_parameters,
      },
      task_parameters:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param name (required)
        // @param values (required)
        new(rname, name, values):: {
          rname:: rname,
          name: name,
          values: values,
        },
      },
    },
    // aws_ssm_parameter - https://www.terraform.io/docs/providers/aws/r/ssm_parameter.html
    aws_ssm_parameter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param type (required)
      // @param value (required)
      // @param allowed_pattern (optional)
      // @param description (optional)
      // @param overwrite (optional)
      // @param tags (optional)
      // @param tier (optional)
      new(rname, name, type, value, allowed_pattern=null, description=null, overwrite=null, tags=null, tier=null):: {
        rname:: rname,
        name: name,
        type: type,
        value: value,
        [if allowed_pattern != null then 'allowed_pattern']: allowed_pattern,
        [if description != null then 'description']: description,
        [if overwrite != null then 'overwrite']: overwrite,
        [if tags != null then 'tags']: tags,
        [if tier != null then 'tier']: tier,
        arn:: '${aws_ssm_parameter.%s.arn}' % rname,
        id:: '${aws_ssm_parameter.%s.id}' % rname,
        key_id:: '${aws_ssm_parameter.%s.key_id}' % rname,
        version:: '${aws_ssm_parameter.%s.version}' % rname,
      },
      with_arn(arn):: {
        arn::: arn,
      },
      with_id(id):: {
        id::: id,
      },
      with_key_id(key_id):: {
        key_id::: key_id,
      },
    },
    // aws_ssm_patch_baseline - https://www.terraform.io/docs/providers/aws/r/ssm_patch_baseline.html
    aws_ssm_patch_baseline:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param approved_patches (optional)
      // @param approved_patches_compliance_level (optional)
      // @param description (optional)
      // @param operating_system (optional)
      // @param rejected_patches (optional)
      // @param tags (optional)
      new(rname, name, approved_patches=null, approved_patches_compliance_level=null, description=null, operating_system=null, rejected_patches=null, tags=null):: {
        rname:: rname,
        name: name,
        [if approved_patches != null then 'approved_patches']: approved_patches,
        [if approved_patches_compliance_level != null then 'approved_patches_compliance_level']: approved_patches_compliance_level,
        [if description != null then 'description']: description,
        [if operating_system != null then 'operating_system']: operating_system,
        [if rejected_patches != null then 'rejected_patches']: rejected_patches,
        [if tags != null then 'tags']: tags,
        id:: '${aws_ssm_patch_baseline.%s.id}' % rname,
        approval_rule:: {},
        global_filter:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_approval_rule(approval_rule):: self + {
        approval_rule: approval_rule,
      },
      approval_rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param approve_after_days (required)
        // @param compliance_level (optional)
        // @param enable_non_security (optional)
        // @param patch_filter (required)
        new(rname, approve_after_days, patch_filter, compliance_level=null, enable_non_security=null):: {
          rname:: rname,
          approve_after_days: approve_after_days,
          [if compliance_level != null then 'compliance_level']: compliance_level,
          [if enable_non_security != null then 'enable_non_security']: enable_non_security,
          patch_filter: patch_filter,
        },
        patch_filter:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param key (required)
          // @param values (required)
          new(rname, key, values):: {
            rname:: rname,
            key: key,
            values: values,
          },
        },
      },
      with_global_filter(global_filter):: self + {
        global_filter: global_filter,
      },
      global_filter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param key (required)
        // @param values (required)
        new(rname, key, values):: {
          rname:: rname,
          key: key,
          values: values,
        },
      },
    },
    // aws_ssm_patch_group - https://www.terraform.io/docs/providers/aws/r/ssm_patch_group.html
    aws_ssm_patch_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param baseline_id (required)
      // @param patch_group (required)
      new(rname, baseline_id, patch_group):: {
        rname:: rname,
        baseline_id: baseline_id,
        patch_group: patch_group,
        id:: '${aws_ssm_patch_group.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_ssm_resource_data_sync - https://www.terraform.io/docs/providers/aws/r/ssm_resource_data_sync.html
    aws_ssm_resource_data_sync:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param s3_destination (required)
      new(rname, name, s3_destination):: {
        rname:: rname,
        name: name,
        id:: '${aws_ssm_resource_data_sync.%s.id}' % rname,
        s3_destination: s3_destination,
      },
      with_id(id):: {
        id::: id,
      },
      s3_destination:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param bucket_name (required)
        // @param region (required)
        // @param kms_key_arn (optional)
        // @param prefix (optional)
        // @param sync_format (optional)
        new(rname, bucket_name, region, kms_key_arn=null, prefix=null, sync_format=null):: {
          rname:: rname,
          bucket_name: bucket_name,
          region: region,
          [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
          [if prefix != null then 'prefix']: prefix,
          [if sync_format != null then 'sync_format']: sync_format,
        },
      },
    },
    // aws_storagegateway_cache - https://www.terraform.io/docs/providers/aws/r/storagegateway_cache.html
    aws_storagegateway_cache:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param disk_id (required)
      // @param gateway_arn (required)
      new(rname, disk_id, gateway_arn):: {
        rname:: rname,
        disk_id: disk_id,
        gateway_arn: gateway_arn,
        id:: '${aws_storagegateway_cache.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_storagegateway_cached_iscsi_volume - https://www.terraform.io/docs/providers/aws/r/storagegateway_cached_iscsi_volume.html
    aws_storagegateway_cached_iscsi_volume:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param gateway_arn (required)
      // @param network_interface_id (required)
      // @param target_name (required)
      // @param volume_size_in_bytes (required)
      // @param snapshot_id (optional)
      // @param source_volume_arn (optional)
      // @param tags (optional)
      new(rname, gateway_arn, network_interface_id, target_name, volume_size_in_bytes, snapshot_id=null, source_volume_arn=null, tags=null):: {
        rname:: rname,
        gateway_arn: gateway_arn,
        network_interface_id: network_interface_id,
        target_name: target_name,
        volume_size_in_bytes: volume_size_in_bytes,
        [if snapshot_id != null then 'snapshot_id']: snapshot_id,
        [if source_volume_arn != null then 'source_volume_arn']: source_volume_arn,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_storagegateway_cached_iscsi_volume.%s.arn}' % rname,
        chap_enabled:: '${aws_storagegateway_cached_iscsi_volume.%s.chap_enabled}' % rname,
        id:: '${aws_storagegateway_cached_iscsi_volume.%s.id}' % rname,
        lun_number:: '${aws_storagegateway_cached_iscsi_volume.%s.lun_number}' % rname,
        network_interface_port:: '${aws_storagegateway_cached_iscsi_volume.%s.network_interface_port}' % rname,
        target_arn:: '${aws_storagegateway_cached_iscsi_volume.%s.target_arn}' % rname,
        volume_arn:: '${aws_storagegateway_cached_iscsi_volume.%s.volume_arn}' % rname,
        volume_id:: '${aws_storagegateway_cached_iscsi_volume.%s.volume_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_storagegateway_gateway - https://www.terraform.io/docs/providers/aws/r/storagegateway_gateway.html
    aws_storagegateway_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param gateway_name (required)
      // @param gateway_timezone (required)
      // @param cloudwatch_log_group_arn (optional)
      // @param gateway_type (optional)
      // @param medium_changer_type (optional)
      // @param smb_guest_password (optional)
      // @param tags (optional)
      // @param tape_drive_type (optional)
      new(rname, gateway_name, gateway_timezone, cloudwatch_log_group_arn=null, gateway_type=null, medium_changer_type=null, smb_guest_password=null, tags=null, tape_drive_type=null):: {
        rname:: rname,
        gateway_name: gateway_name,
        gateway_timezone: gateway_timezone,
        [if cloudwatch_log_group_arn != null then 'cloudwatch_log_group_arn']: cloudwatch_log_group_arn,
        [if gateway_type != null then 'gateway_type']: gateway_type,
        [if medium_changer_type != null then 'medium_changer_type']: medium_changer_type,
        [if smb_guest_password != null then 'smb_guest_password']: smb_guest_password,
        [if tags != null then 'tags']: tags,
        [if tape_drive_type != null then 'tape_drive_type']: tape_drive_type,
        activation_key:: '${aws_storagegateway_gateway.%s.activation_key}' % rname,
        arn:: '${aws_storagegateway_gateway.%s.arn}' % rname,
        gateway_id:: '${aws_storagegateway_gateway.%s.gateway_id}' % rname,
        gateway_ip_address:: '${aws_storagegateway_gateway.%s.gateway_ip_address}' % rname,
        id:: '${aws_storagegateway_gateway.%s.id}' % rname,
        smb_active_directory_settings:: {},
        timeouts:: {},
      },
      with_activation_key(activation_key):: {
        activation_key::: activation_key,
      },
      with_gateway_ip_address(gateway_ip_address):: {
        gateway_ip_address::: gateway_ip_address,
      },
      with_id(id):: {
        id::: id,
      },
      with_smb_active_directory_settings(smb_active_directory_settings):: self + {
        smb_active_directory_settings: smb_active_directory_settings,
      },
      smb_active_directory_settings:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param domain_name (required)
        // @param password (required)
        // @param username (required)
        new(rname, domain_name, password, username):: {
          rname:: rname,
          domain_name: domain_name,
          password: password,
          username: username,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        new(rname, create=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
        },
      },
    },
    // aws_storagegateway_nfs_file_share - https://www.terraform.io/docs/providers/aws/r/storagegateway_nfs_file_share.html
    aws_storagegateway_nfs_file_share:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param client_list (required)
      // @param gateway_arn (required)
      // @param location_arn (required)
      // @param role_arn (required)
      // @param default_storage_class (optional)
      // @param guess_mime_type_enabled (optional)
      // @param kms_encrypted (optional)
      // @param kms_key_arn (optional)
      // @param object_acl (optional)
      // @param read_only (optional)
      // @param requester_pays (optional)
      // @param squash (optional)
      // @param tags (optional)
      new(rname, client_list, gateway_arn, location_arn, role_arn, default_storage_class=null, guess_mime_type_enabled=null, kms_encrypted=null, kms_key_arn=null, object_acl=null, read_only=null, requester_pays=null, squash=null, tags=null):: {
        rname:: rname,
        client_list: client_list,
        gateway_arn: gateway_arn,
        location_arn: location_arn,
        role_arn: role_arn,
        [if default_storage_class != null then 'default_storage_class']: default_storage_class,
        [if guess_mime_type_enabled != null then 'guess_mime_type_enabled']: guess_mime_type_enabled,
        [if kms_encrypted != null then 'kms_encrypted']: kms_encrypted,
        [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
        [if object_acl != null then 'object_acl']: object_acl,
        [if read_only != null then 'read_only']: read_only,
        [if requester_pays != null then 'requester_pays']: requester_pays,
        [if squash != null then 'squash']: squash,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_storagegateway_nfs_file_share.%s.arn}' % rname,
        fileshare_id:: '${aws_storagegateway_nfs_file_share.%s.fileshare_id}' % rname,
        id:: '${aws_storagegateway_nfs_file_share.%s.id}' % rname,
        nfs_file_share_defaults:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_nfs_file_share_defaults(nfs_file_share_defaults):: self + {
        nfs_file_share_defaults: nfs_file_share_defaults,
      },
      nfs_file_share_defaults:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param directory_mode (optional)
        // @param file_mode (optional)
        // @param group_id (optional)
        // @param owner_id (optional)
        new(rname, directory_mode=null, file_mode=null, group_id=null, owner_id=null):: {
          rname:: rname,
          [if directory_mode != null then 'directory_mode']: directory_mode,
          [if file_mode != null then 'file_mode']: file_mode,
          [if group_id != null then 'group_id']: group_id,
          [if owner_id != null then 'owner_id']: owner_id,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_storagegateway_smb_file_share - https://www.terraform.io/docs/providers/aws/r/storagegateway_smb_file_share.html
    aws_storagegateway_smb_file_share:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param gateway_arn (required)
      // @param location_arn (required)
      // @param role_arn (required)
      // @param authentication (optional)
      // @param default_storage_class (optional)
      // @param guess_mime_type_enabled (optional)
      // @param invalid_user_list (optional)
      // @param kms_encrypted (optional)
      // @param kms_key_arn (optional)
      // @param object_acl (optional)
      // @param read_only (optional)
      // @param requester_pays (optional)
      // @param tags (optional)
      // @param valid_user_list (optional)
      new(rname, gateway_arn, location_arn, role_arn, authentication=null, default_storage_class=null, guess_mime_type_enabled=null, invalid_user_list=null, kms_encrypted=null, kms_key_arn=null, object_acl=null, read_only=null, requester_pays=null, tags=null, valid_user_list=null):: {
        rname:: rname,
        gateway_arn: gateway_arn,
        location_arn: location_arn,
        role_arn: role_arn,
        [if authentication != null then 'authentication']: authentication,
        [if default_storage_class != null then 'default_storage_class']: default_storage_class,
        [if guess_mime_type_enabled != null then 'guess_mime_type_enabled']: guess_mime_type_enabled,
        [if invalid_user_list != null then 'invalid_user_list']: invalid_user_list,
        [if kms_encrypted != null then 'kms_encrypted']: kms_encrypted,
        [if kms_key_arn != null then 'kms_key_arn']: kms_key_arn,
        [if object_acl != null then 'object_acl']: object_acl,
        [if read_only != null then 'read_only']: read_only,
        [if requester_pays != null then 'requester_pays']: requester_pays,
        [if tags != null then 'tags']: tags,
        [if valid_user_list != null then 'valid_user_list']: valid_user_list,
        arn:: '${aws_storagegateway_smb_file_share.%s.arn}' % rname,
        fileshare_id:: '${aws_storagegateway_smb_file_share.%s.fileshare_id}' % rname,
        id:: '${aws_storagegateway_smb_file_share.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_storagegateway_upload_buffer - https://www.terraform.io/docs/providers/aws/r/storagegateway_upload_buffer.html
    aws_storagegateway_upload_buffer:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param disk_id (required)
      // @param gateway_arn (required)
      new(rname, disk_id, gateway_arn):: {
        rname:: rname,
        disk_id: disk_id,
        gateway_arn: gateway_arn,
        id:: '${aws_storagegateway_upload_buffer.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_storagegateway_working_storage - https://www.terraform.io/docs/providers/aws/r/storagegateway_working_storage.html
    aws_storagegateway_working_storage:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param disk_id (required)
      // @param gateway_arn (required)
      new(rname, disk_id, gateway_arn):: {
        rname:: rname,
        disk_id: disk_id,
        gateway_arn: gateway_arn,
        id:: '${aws_storagegateway_working_storage.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_subnet - https://www.terraform.io/docs/providers/aws/r/subnet.html
    aws_subnet:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cidr_block (required)
      // @param vpc_id (required)
      // @param assign_ipv6_address_on_creation (optional)
      // @param map_public_ip_on_launch (optional)
      // @param tags (optional)
      new(rname, cidr_block, vpc_id, assign_ipv6_address_on_creation=null, map_public_ip_on_launch=null, tags=null):: {
        rname:: rname,
        cidr_block: cidr_block,
        vpc_id: vpc_id,
        [if assign_ipv6_address_on_creation != null then 'assign_ipv6_address_on_creation']: assign_ipv6_address_on_creation,
        [if map_public_ip_on_launch != null then 'map_public_ip_on_launch']: map_public_ip_on_launch,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_subnet.%s.arn}' % rname,
        availability_zone:: '${aws_subnet.%s.availability_zone}' % rname,
        availability_zone_id:: '${aws_subnet.%s.availability_zone_id}' % rname,
        id:: '${aws_subnet.%s.id}' % rname,
        ipv6_cidr_block:: '${aws_subnet.%s.ipv6_cidr_block}' % rname,
        ipv6_cidr_block_association_id:: '${aws_subnet.%s.ipv6_cidr_block_association_id}' % rname,
        owner_id:: '${aws_subnet.%s.owner_id}' % rname,
        timeouts:: {},
      },
      with_availability_zone(availability_zone):: {
        availability_zone::: availability_zone,
      },
      with_availability_zone_id(availability_zone_id):: {
        availability_zone_id::: availability_zone_id,
      },
      with_id(id):: {
        id::: id,
      },
      with_ipv6_cidr_block(ipv6_cidr_block):: {
        ipv6_cidr_block::: ipv6_cidr_block,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_swf_domain - https://www.terraform.io/docs/providers/aws/r/swf_domain.html
    aws_swf_domain:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param workflow_execution_retention_period_in_days (required)
      // @param description (optional)
      // @param name_prefix (optional)
      // @param tags (optional)
      new(rname, workflow_execution_retention_period_in_days, description=null, name_prefix=null, tags=null):: {
        rname:: rname,
        workflow_execution_retention_period_in_days: workflow_execution_retention_period_in_days,
        [if description != null then 'description']: description,
        [if name_prefix != null then 'name_prefix']: name_prefix,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_swf_domain.%s.arn}' % rname,
        id:: '${aws_swf_domain.%s.id}' % rname,
        name:: '${aws_swf_domain.%s.name}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_name(name):: {
        name::: name,
      },
    },
    // aws_transfer_server - https://www.terraform.io/docs/providers/aws/r/transfer_server.html
    aws_transfer_server:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param endpoint_type (optional)
      // @param force_destroy (optional)
      // @param host_key (optional)
      // @param identity_provider_type (optional)
      // @param invocation_role (optional)
      // @param logging_role (optional)
      // @param tags (optional)
      // @param url (optional)
      new(rname, endpoint_type=null, force_destroy=null, host_key=null, identity_provider_type=null, invocation_role=null, logging_role=null, tags=null, url=null):: {
        rname:: rname,
        [if endpoint_type != null then 'endpoint_type']: endpoint_type,
        [if force_destroy != null then 'force_destroy']: force_destroy,
        [if host_key != null then 'host_key']: host_key,
        [if identity_provider_type != null then 'identity_provider_type']: identity_provider_type,
        [if invocation_role != null then 'invocation_role']: invocation_role,
        [if logging_role != null then 'logging_role']: logging_role,
        [if tags != null then 'tags']: tags,
        [if url != null then 'url']: url,
        arn:: '${aws_transfer_server.%s.arn}' % rname,
        endpoint:: '${aws_transfer_server.%s.endpoint}' % rname,
        host_key_fingerprint:: '${aws_transfer_server.%s.host_key_fingerprint}' % rname,
        id:: '${aws_transfer_server.%s.id}' % rname,
        endpoint_details:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_endpoint_details(endpoint_details):: self + {
        endpoint_details: endpoint_details,
      },
      endpoint_details:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param vpc_endpoint_id (required)
        new(rname, vpc_endpoint_id):: {
          rname:: rname,
          vpc_endpoint_id: vpc_endpoint_id,
        },
      },
    },
    // aws_transfer_ssh_key - https://www.terraform.io/docs/providers/aws/r/transfer_ssh_key.html
    aws_transfer_ssh_key:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param body (required)
      // @param server_id (required)
      // @param user_name (required)
      new(rname, body, server_id, user_name):: {
        rname:: rname,
        body: body,
        server_id: server_id,
        user_name: user_name,
        id:: '${aws_transfer_ssh_key.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_transfer_user - https://www.terraform.io/docs/providers/aws/r/transfer_user.html
    aws_transfer_user:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param role (required)
      // @param server_id (required)
      // @param user_name (required)
      // @param home_directory (optional)
      // @param policy (optional)
      // @param tags (optional)
      new(rname, role, server_id, user_name, home_directory=null, policy=null, tags=null):: {
        rname:: rname,
        role: role,
        server_id: server_id,
        user_name: user_name,
        [if home_directory != null then 'home_directory']: home_directory,
        [if policy != null then 'policy']: policy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_transfer_user.%s.arn}' % rname,
        id:: '${aws_transfer_user.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_volume_attachment - https://www.terraform.io/docs/providers/aws/r/volume_attachment.html
    aws_volume_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param device_name (required)
      // @param instance_id (required)
      // @param volume_id (required)
      // @param force_detach (optional)
      // @param skip_destroy (optional)
      new(rname, device_name, instance_id, volume_id, force_detach=null, skip_destroy=null):: {
        rname:: rname,
        device_name: device_name,
        instance_id: instance_id,
        volume_id: volume_id,
        [if force_detach != null then 'force_detach']: force_detach,
        [if skip_destroy != null then 'skip_destroy']: skip_destroy,
        id:: '${aws_volume_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc - https://www.terraform.io/docs/providers/aws/r/vpc.html
    aws_vpc:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cidr_block (required)
      // @param assign_generated_ipv6_cidr_block (optional)
      // @param enable_dns_support (optional)
      // @param instance_tenancy (optional)
      // @param tags (optional)
      new(rname, cidr_block, assign_generated_ipv6_cidr_block=null, enable_dns_support=null, instance_tenancy=null, tags=null):: {
        rname:: rname,
        cidr_block: cidr_block,
        [if assign_generated_ipv6_cidr_block != null then 'assign_generated_ipv6_cidr_block']: assign_generated_ipv6_cidr_block,
        [if enable_dns_support != null then 'enable_dns_support']: enable_dns_support,
        [if instance_tenancy != null then 'instance_tenancy']: instance_tenancy,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_vpc.%s.arn}' % rname,
        default_network_acl_id:: '${aws_vpc.%s.default_network_acl_id}' % rname,
        default_route_table_id:: '${aws_vpc.%s.default_route_table_id}' % rname,
        default_security_group_id:: '${aws_vpc.%s.default_security_group_id}' % rname,
        dhcp_options_id:: '${aws_vpc.%s.dhcp_options_id}' % rname,
        enable_classiclink:: '${aws_vpc.%s.enable_classiclink}' % rname,
        enable_classiclink_dns_support:: '${aws_vpc.%s.enable_classiclink_dns_support}' % rname,
        enable_dns_hostnames:: '${aws_vpc.%s.enable_dns_hostnames}' % rname,
        id:: '${aws_vpc.%s.id}' % rname,
        ipv6_association_id:: '${aws_vpc.%s.ipv6_association_id}' % rname,
        ipv6_cidr_block:: '${aws_vpc.%s.ipv6_cidr_block}' % rname,
        main_route_table_id:: '${aws_vpc.%s.main_route_table_id}' % rname,
        owner_id:: '${aws_vpc.%s.owner_id}' % rname,
      },
      with_enable_classiclink(enable_classiclink):: {
        enable_classiclink::: enable_classiclink,
      },
      with_enable_classiclink_dns_support(enable_classiclink_dns_support):: {
        enable_classiclink_dns_support::: enable_classiclink_dns_support,
      },
      with_enable_dns_hostnames(enable_dns_hostnames):: {
        enable_dns_hostnames::: enable_dns_hostnames,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_dhcp_options - https://www.terraform.io/docs/providers/aws/r/vpc_dhcp_options.html
    aws_vpc_dhcp_options:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param domain_name (optional)
      // @param domain_name_servers (optional)
      // @param netbios_name_servers (optional)
      // @param netbios_node_type (optional)
      // @param ntp_servers (optional)
      // @param tags (optional)
      new(rname, domain_name=null, domain_name_servers=null, netbios_name_servers=null, netbios_node_type=null, ntp_servers=null, tags=null):: {
        rname:: rname,
        [if domain_name != null then 'domain_name']: domain_name,
        [if domain_name_servers != null then 'domain_name_servers']: domain_name_servers,
        [if netbios_name_servers != null then 'netbios_name_servers']: netbios_name_servers,
        [if netbios_node_type != null then 'netbios_node_type']: netbios_node_type,
        [if ntp_servers != null then 'ntp_servers']: ntp_servers,
        [if tags != null then 'tags']: tags,
        id:: '${aws_vpc_dhcp_options.%s.id}' % rname,
        owner_id:: '${aws_vpc_dhcp_options.%s.owner_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_dhcp_options_association - https://www.terraform.io/docs/providers/aws/r/vpc_dhcp_options_association.html
    aws_vpc_dhcp_options_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param dhcp_options_id (required)
      // @param vpc_id (required)
      new(rname, dhcp_options_id, vpc_id):: {
        rname:: rname,
        dhcp_options_id: dhcp_options_id,
        vpc_id: vpc_id,
        id:: '${aws_vpc_dhcp_options_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_endpoint - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint.html
    aws_vpc_endpoint:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param service_name (required)
      // @param vpc_id (required)
      // @param auto_accept (optional)
      // @param private_dns_enabled (optional)
      // @param tags (optional)
      // @param vpc_endpoint_type (optional)
      new(rname, service_name, vpc_id, auto_accept=null, private_dns_enabled=null, tags=null, vpc_endpoint_type=null):: {
        rname:: rname,
        service_name: service_name,
        vpc_id: vpc_id,
        [if auto_accept != null then 'auto_accept']: auto_accept,
        [if private_dns_enabled != null then 'private_dns_enabled']: private_dns_enabled,
        [if tags != null then 'tags']: tags,
        [if vpc_endpoint_type != null then 'vpc_endpoint_type']: vpc_endpoint_type,
        cidr_blocks:: '${aws_vpc_endpoint.%s.cidr_blocks}' % rname,
        dns_entry:: '${aws_vpc_endpoint.%s.dns_entry}' % rname,
        id:: '${aws_vpc_endpoint.%s.id}' % rname,
        network_interface_ids:: '${aws_vpc_endpoint.%s.network_interface_ids}' % rname,
        owner_id:: '${aws_vpc_endpoint.%s.owner_id}' % rname,
        policy:: '${aws_vpc_endpoint.%s.policy}' % rname,
        prefix_list_id:: '${aws_vpc_endpoint.%s.prefix_list_id}' % rname,
        requester_managed:: '${aws_vpc_endpoint.%s.requester_managed}' % rname,
        route_table_ids:: '${aws_vpc_endpoint.%s.route_table_ids}' % rname,
        security_group_ids:: '${aws_vpc_endpoint.%s.security_group_ids}' % rname,
        state:: '${aws_vpc_endpoint.%s.state}' % rname,
        subnet_ids:: '${aws_vpc_endpoint.%s.subnet_ids}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_policy(policy):: {
        policy::: policy,
      },
      with_route_table_ids(route_table_ids):: {
        route_table_ids::: route_table_ids,
      },
      with_security_group_ids(security_group_ids):: {
        security_group_ids::: security_group_ids,
      },
      with_subnet_ids(subnet_ids):: {
        subnet_ids::: subnet_ids,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_vpc_endpoint_connection_notification - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_connection_notification.html
    aws_vpc_endpoint_connection_notification:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param connection_events (required)
      // @param connection_notification_arn (required)
      // @param vpc_endpoint_id (optional)
      // @param vpc_endpoint_service_id (optional)
      new(rname, connection_events, connection_notification_arn, vpc_endpoint_id=null, vpc_endpoint_service_id=null):: {
        rname:: rname,
        connection_events: connection_events,
        connection_notification_arn: connection_notification_arn,
        [if vpc_endpoint_id != null then 'vpc_endpoint_id']: vpc_endpoint_id,
        [if vpc_endpoint_service_id != null then 'vpc_endpoint_service_id']: vpc_endpoint_service_id,
        id:: '${aws_vpc_endpoint_connection_notification.%s.id}' % rname,
        notification_type:: '${aws_vpc_endpoint_connection_notification.%s.notification_type}' % rname,
        state:: '${aws_vpc_endpoint_connection_notification.%s.state}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_endpoint_route_table_association - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_route_table_association.html
    aws_vpc_endpoint_route_table_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param route_table_id (required)
      // @param vpc_endpoint_id (required)
      new(rname, route_table_id, vpc_endpoint_id):: {
        rname:: rname,
        route_table_id: route_table_id,
        vpc_endpoint_id: vpc_endpoint_id,
        id:: '${aws_vpc_endpoint_route_table_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_endpoint_service - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_service.html
    aws_vpc_endpoint_service:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param acceptance_required (required)
      // @param network_load_balancer_arns (required)
      // @param tags (optional)
      new(rname, acceptance_required, network_load_balancer_arns, tags=null):: {
        rname:: rname,
        acceptance_required: acceptance_required,
        network_load_balancer_arns: network_load_balancer_arns,
        [if tags != null then 'tags']: tags,
        allowed_principals:: '${aws_vpc_endpoint_service.%s.allowed_principals}' % rname,
        availability_zones:: '${aws_vpc_endpoint_service.%s.availability_zones}' % rname,
        base_endpoint_dns_names:: '${aws_vpc_endpoint_service.%s.base_endpoint_dns_names}' % rname,
        id:: '${aws_vpc_endpoint_service.%s.id}' % rname,
        manages_vpc_endpoints:: '${aws_vpc_endpoint_service.%s.manages_vpc_endpoints}' % rname,
        private_dns_name:: '${aws_vpc_endpoint_service.%s.private_dns_name}' % rname,
        service_name:: '${aws_vpc_endpoint_service.%s.service_name}' % rname,
        service_type:: '${aws_vpc_endpoint_service.%s.service_type}' % rname,
        state:: '${aws_vpc_endpoint_service.%s.state}' % rname,
      },
      with_allowed_principals(allowed_principals):: {
        allowed_principals::: allowed_principals,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_endpoint_service_allowed_principal - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_service_allowed_principal.html
    aws_vpc_endpoint_service_allowed_principal:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param principal_arn (required)
      // @param vpc_endpoint_service_id (required)
      new(rname, principal_arn, vpc_endpoint_service_id):: {
        rname:: rname,
        principal_arn: principal_arn,
        vpc_endpoint_service_id: vpc_endpoint_service_id,
        id:: '${aws_vpc_endpoint_service_allowed_principal.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpc_endpoint_subnet_association - https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_subnet_association.html
    aws_vpc_endpoint_subnet_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param subnet_id (required)
      // @param vpc_endpoint_id (required)
      new(rname, subnet_id, vpc_endpoint_id):: {
        rname:: rname,
        subnet_id: subnet_id,
        vpc_endpoint_id: vpc_endpoint_id,
        id:: '${aws_vpc_endpoint_subnet_association.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_vpc_ipv4_cidr_block_association - https://www.terraform.io/docs/providers/aws/r/vpc_ipv4_cidr_block_association.html
    aws_vpc_ipv4_cidr_block_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param cidr_block (required)
      // @param vpc_id (required)
      new(rname, cidr_block, vpc_id):: {
        rname:: rname,
        cidr_block: cidr_block,
        vpc_id: vpc_id,
        id:: '${aws_vpc_ipv4_cidr_block_association.%s.id}' % rname,
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        new(rname, create=null, delete=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
        },
      },
    },
    // aws_vpc_peering_connection - https://www.terraform.io/docs/providers/aws/r/vpc_peering_connection.html
    aws_vpc_peering_connection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param peer_vpc_id (required)
      // @param vpc_id (required)
      // @param auto_accept (optional)
      // @param tags (optional)
      new(rname, peer_vpc_id, vpc_id, auto_accept=null, tags=null):: {
        rname:: rname,
        peer_vpc_id: peer_vpc_id,
        vpc_id: vpc_id,
        [if auto_accept != null then 'auto_accept']: auto_accept,
        [if tags != null then 'tags']: tags,
        accept_status:: '${aws_vpc_peering_connection.%s.accept_status}' % rname,
        id:: '${aws_vpc_peering_connection.%s.id}' % rname,
        peer_owner_id:: '${aws_vpc_peering_connection.%s.peer_owner_id}' % rname,
        peer_region:: '${aws_vpc_peering_connection.%s.peer_region}' % rname,
        accepter:: {},
        requester:: {},
        timeouts:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_peer_owner_id(peer_owner_id):: {
        peer_owner_id::: peer_owner_id,
      },
      with_peer_region(peer_region):: {
        peer_region::: peer_region,
      },
      with_accepter(accepter):: self + {
        accepter: accepter,
      },
      accepter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
      with_requester(requester):: self + {
        requester: requester,
      },
      requester:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
      with_timeouts(timeouts):: self + {
        timeouts: timeouts,
      },
      timeouts:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param create (optional)
        // @param delete (optional)
        // @param update (optional)
        new(rname, create=null, delete=null, update=null):: {
          rname:: rname,
          [if create != null then 'create']: create,
          [if delete != null then 'delete']: delete,
          [if update != null then 'update']: update,
        },
      },
    },
    // aws_vpc_peering_connection_accepter - https://www.terraform.io/docs/providers/aws/r/vpc_peering_connection_accepter.html
    aws_vpc_peering_connection_accepter:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_peering_connection_id (required)
      // @param auto_accept (optional)
      // @param tags (optional)
      new(rname, vpc_peering_connection_id, auto_accept=null, tags=null):: {
        rname:: rname,
        vpc_peering_connection_id: vpc_peering_connection_id,
        [if auto_accept != null then 'auto_accept']: auto_accept,
        [if tags != null then 'tags']: tags,
        accept_status:: '${aws_vpc_peering_connection_accepter.%s.accept_status}' % rname,
        id:: '${aws_vpc_peering_connection_accepter.%s.id}' % rname,
        peer_owner_id:: '${aws_vpc_peering_connection_accepter.%s.peer_owner_id}' % rname,
        peer_region:: '${aws_vpc_peering_connection_accepter.%s.peer_region}' % rname,
        peer_vpc_id:: '${aws_vpc_peering_connection_accepter.%s.peer_vpc_id}' % rname,
        vpc_id:: '${aws_vpc_peering_connection_accepter.%s.vpc_id}' % rname,
        accepter:: {},
        requester:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_accepter(accepter):: self + {
        accepter: accepter,
      },
      accepter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
      with_requester(requester):: self + {
        requester: requester,
      },
      requester:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
    },
    // aws_vpc_peering_connection_options - https://www.terraform.io/docs/providers/aws/r/vpc_peering_connection_options.html
    aws_vpc_peering_connection_options:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_peering_connection_id (required)
      new(rname, vpc_peering_connection_id):: {
        rname:: rname,
        vpc_peering_connection_id: vpc_peering_connection_id,
        id:: '${aws_vpc_peering_connection_options.%s.id}' % rname,
        accepter:: {},
        requester:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_accepter(accepter):: self + {
        accepter: accepter,
      },
      accepter:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
      with_requester(requester):: self + {
        requester: requester,
      },
      requester:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param allow_classic_link_to_remote_vpc (optional)
        // @param allow_remote_vpc_dns_resolution (optional)
        // @param allow_vpc_to_remote_classic_link (optional)
        new(rname, allow_classic_link_to_remote_vpc=null, allow_remote_vpc_dns_resolution=null, allow_vpc_to_remote_classic_link=null):: {
          rname:: rname,
          [if allow_classic_link_to_remote_vpc != null then 'allow_classic_link_to_remote_vpc']: allow_classic_link_to_remote_vpc,
          [if allow_remote_vpc_dns_resolution != null then 'allow_remote_vpc_dns_resolution']: allow_remote_vpc_dns_resolution,
          [if allow_vpc_to_remote_classic_link != null then 'allow_vpc_to_remote_classic_link']: allow_vpc_to_remote_classic_link,
        },
      },
    },
    // aws_vpn_connection - https://www.terraform.io/docs/providers/aws/r/vpn_connection.html
    aws_vpn_connection:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param customer_gateway_id (required)
      // @param type (required)
      // @param tags (optional)
      // @param transit_gateway_id (optional)
      // @param vpn_gateway_id (optional)
      new(rname, customer_gateway_id, type, tags=null, transit_gateway_id=null, vpn_gateway_id=null):: {
        rname:: rname,
        customer_gateway_id: customer_gateway_id,
        type: type,
        [if tags != null then 'tags']: tags,
        [if transit_gateway_id != null then 'transit_gateway_id']: transit_gateway_id,
        [if vpn_gateway_id != null then 'vpn_gateway_id']: vpn_gateway_id,
        customer_gateway_configuration:: '${aws_vpn_connection.%s.customer_gateway_configuration}' % rname,
        id:: '${aws_vpn_connection.%s.id}' % rname,
        routes:: '${aws_vpn_connection.%s.routes}' % rname,
        static_routes_only:: '${aws_vpn_connection.%s.static_routes_only}' % rname,
        transit_gateway_attachment_id:: '${aws_vpn_connection.%s.transit_gateway_attachment_id}' % rname,
        tunnel1_address:: '${aws_vpn_connection.%s.tunnel1_address}' % rname,
        tunnel1_bgp_asn:: '${aws_vpn_connection.%s.tunnel1_bgp_asn}' % rname,
        tunnel1_bgp_holdtime:: '${aws_vpn_connection.%s.tunnel1_bgp_holdtime}' % rname,
        tunnel1_cgw_inside_address:: '${aws_vpn_connection.%s.tunnel1_cgw_inside_address}' % rname,
        tunnel1_inside_cidr:: '${aws_vpn_connection.%s.tunnel1_inside_cidr}' % rname,
        tunnel1_preshared_key:: '${aws_vpn_connection.%s.tunnel1_preshared_key}' % rname,
        tunnel1_vgw_inside_address:: '${aws_vpn_connection.%s.tunnel1_vgw_inside_address}' % rname,
        tunnel2_address:: '${aws_vpn_connection.%s.tunnel2_address}' % rname,
        tunnel2_bgp_asn:: '${aws_vpn_connection.%s.tunnel2_bgp_asn}' % rname,
        tunnel2_bgp_holdtime:: '${aws_vpn_connection.%s.tunnel2_bgp_holdtime}' % rname,
        tunnel2_cgw_inside_address:: '${aws_vpn_connection.%s.tunnel2_cgw_inside_address}' % rname,
        tunnel2_inside_cidr:: '${aws_vpn_connection.%s.tunnel2_inside_cidr}' % rname,
        tunnel2_preshared_key:: '${aws_vpn_connection.%s.tunnel2_preshared_key}' % rname,
        tunnel2_vgw_inside_address:: '${aws_vpn_connection.%s.tunnel2_vgw_inside_address}' % rname,
        vgw_telemetry:: '${aws_vpn_connection.%s.vgw_telemetry}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
      with_static_routes_only(static_routes_only):: {
        static_routes_only::: static_routes_only,
      },
      with_tunnel1_inside_cidr(tunnel1_inside_cidr):: {
        tunnel1_inside_cidr::: tunnel1_inside_cidr,
      },
      with_tunnel1_preshared_key(tunnel1_preshared_key):: {
        tunnel1_preshared_key::: tunnel1_preshared_key,
      },
      with_tunnel2_inside_cidr(tunnel2_inside_cidr):: {
        tunnel2_inside_cidr::: tunnel2_inside_cidr,
      },
      with_tunnel2_preshared_key(tunnel2_preshared_key):: {
        tunnel2_preshared_key::: tunnel2_preshared_key,
      },
    },
    // aws_vpn_connection_route - https://www.terraform.io/docs/providers/aws/r/vpn_connection_route.html
    aws_vpn_connection_route:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param destination_cidr_block (required)
      // @param vpn_connection_id (required)
      new(rname, destination_cidr_block, vpn_connection_id):: {
        rname:: rname,
        destination_cidr_block: destination_cidr_block,
        vpn_connection_id: vpn_connection_id,
        id:: '${aws_vpn_connection_route.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpn_gateway - https://www.terraform.io/docs/providers/aws/r/vpn_gateway.html
    aws_vpn_gateway:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param availability_zone (optional)
      // @param tags (optional)
      new(rname, availability_zone=null, tags=null):: {
        rname:: rname,
        [if availability_zone != null then 'availability_zone']: availability_zone,
        [if tags != null then 'tags']: tags,
        amazon_side_asn:: '${aws_vpn_gateway.%s.amazon_side_asn}' % rname,
        id:: '${aws_vpn_gateway.%s.id}' % rname,
        vpc_id:: '${aws_vpn_gateway.%s.vpc_id}' % rname,
      },
      with_amazon_side_asn(amazon_side_asn):: {
        amazon_side_asn::: amazon_side_asn,
      },
      with_id(id):: {
        id::: id,
      },
      with_vpc_id(vpc_id):: {
        vpc_id::: vpc_id,
      },
    },
    // aws_vpn_gateway_attachment - https://www.terraform.io/docs/providers/aws/r/vpn_gateway_attachment.html
    aws_vpn_gateway_attachment:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param vpc_id (required)
      // @param vpn_gateway_id (required)
      new(rname, vpc_id, vpn_gateway_id):: {
        rname:: rname,
        vpc_id: vpc_id,
        vpn_gateway_id: vpn_gateway_id,
        id:: '${aws_vpn_gateway_attachment.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_vpn_gateway_route_propagation - https://www.terraform.io/docs/providers/aws/r/vpn_gateway_route_propagation.html
    aws_vpn_gateway_route_propagation:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param route_table_id (required)
      // @param vpn_gateway_id (required)
      new(rname, route_table_id, vpn_gateway_id):: {
        rname:: rname,
        route_table_id: route_table_id,
        vpn_gateway_id: vpn_gateway_id,
        id:: '${aws_vpn_gateway_route_propagation.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_waf_byte_match_set - https://www.terraform.io/docs/providers/aws/r/waf_byte_match_set.html
    aws_waf_byte_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_waf_byte_match_set.%s.id}' % rname,
        byte_match_tuples:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_byte_match_tuples(byte_match_tuples):: self + {
        byte_match_tuples: byte_match_tuples,
      },
      byte_match_tuples:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param positional_constraint (required)
        // @param text_transformation (required)
        // @param target_string (optional)
        // @param field_to_match (required)
        new(rname, positional_constraint, text_transformation, field_to_match, target_string=null):: {
          rname:: rname,
          positional_constraint: positional_constraint,
          text_transformation: text_transformation,
          [if target_string != null then 'target_string']: target_string,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_waf_geo_match_set - https://www.terraform.io/docs/providers/aws/r/waf_geo_match_set.html
    aws_waf_geo_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_waf_geo_match_set.%s.arn}' % rname,
        id:: '${aws_waf_geo_match_set.%s.id}' % rname,
        geo_match_constraint:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_geo_match_constraint(geo_match_constraint):: self + {
        geo_match_constraint: geo_match_constraint,
      },
      geo_match_constraint:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param value (required)
        new(rname, type, value):: {
          rname:: rname,
          type: type,
          value: value,
        },
      },
    },
    // aws_waf_ipset - https://www.terraform.io/docs/providers/aws/r/waf_ipset.html
    aws_waf_ipset:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_waf_ipset.%s.arn}' % rname,
        id:: '${aws_waf_ipset.%s.id}' % rname,
        ip_set_descriptors:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ip_set_descriptors(ip_set_descriptors):: self + {
        ip_set_descriptors: ip_set_descriptors,
      },
      ip_set_descriptors:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param value (required)
        new(rname, type, value):: {
          rname:: rname,
          type: type,
          value: value,
        },
      },
    },
    // aws_waf_rate_based_rule - https://www.terraform.io/docs/providers/aws/r/waf_rate_based_rule.html
    aws_waf_rate_based_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param rate_key (required)
      // @param rate_limit (required)
      // @param tags (optional)
      new(rname, metric_name, name, rate_key, rate_limit, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        rate_key: rate_key,
        rate_limit: rate_limit,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_waf_rate_based_rule.%s.arn}' % rname,
        id:: '${aws_waf_rate_based_rule.%s.id}' % rname,
        predicates:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_predicates(predicates):: self + {
        predicates: predicates,
      },
      predicates:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param data_id (required)
        // @param negated (required)
        // @param type (required)
        new(rname, data_id, negated, type):: {
          rname:: rname,
          data_id: data_id,
          negated: negated,
          type: type,
        },
      },
    },
    // aws_waf_regex_match_set - https://www.terraform.io/docs/providers/aws/r/waf_regex_match_set.html
    aws_waf_regex_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_waf_regex_match_set.%s.arn}' % rname,
        id:: '${aws_waf_regex_match_set.%s.id}' % rname,
        regex_match_tuple:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_regex_match_tuple(regex_match_tuple):: self + {
        regex_match_tuple: regex_match_tuple,
      },
      regex_match_tuple:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param regex_pattern_set_id (required)
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, regex_pattern_set_id, text_transformation, field_to_match):: {
          rname:: rname,
          regex_pattern_set_id: regex_pattern_set_id,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_waf_regex_pattern_set - https://www.terraform.io/docs/providers/aws/r/waf_regex_pattern_set.html
    aws_waf_regex_pattern_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param regex_pattern_strings (optional)
      new(rname, name, regex_pattern_strings=null):: {
        rname:: rname,
        name: name,
        [if regex_pattern_strings != null then 'regex_pattern_strings']: regex_pattern_strings,
        arn:: '${aws_waf_regex_pattern_set.%s.arn}' % rname,
        id:: '${aws_waf_regex_pattern_set.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_waf_rule - https://www.terraform.io/docs/providers/aws/r/waf_rule.html
    aws_waf_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, metric_name, name, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_waf_rule.%s.arn}' % rname,
        id:: '${aws_waf_rule.%s.id}' % rname,
        predicates:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_predicates(predicates):: self + {
        predicates: predicates,
      },
      predicates:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param data_id (required)
        // @param negated (required)
        // @param type (required)
        new(rname, data_id, negated, type):: {
          rname:: rname,
          data_id: data_id,
          negated: negated,
          type: type,
        },
      },
    },
    // aws_waf_rule_group - https://www.terraform.io/docs/providers/aws/r/waf_rule_group.html
    aws_waf_rule_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, metric_name, name, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_waf_rule_group.%s.arn}' % rname,
        id:: '${aws_waf_rule_group.%s.id}' % rname,
        activated_rule:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_activated_rule(activated_rule):: self + {
        activated_rule: activated_rule,
      },
      activated_rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param priority (required)
        // @param rule_id (required)
        // @param type (optional)
        // @param action (required)
        new(rname, priority, rule_id, action, type=null):: {
          rname:: rname,
          priority: priority,
          rule_id: rule_id,
          [if type != null then 'type']: type,
          action: action,
        },
        action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
      },
    },
    // aws_waf_size_constraint_set - https://www.terraform.io/docs/providers/aws/r/waf_size_constraint_set.html
    aws_waf_size_constraint_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_waf_size_constraint_set.%s.arn}' % rname,
        id:: '${aws_waf_size_constraint_set.%s.id}' % rname,
        size_constraints:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_size_constraints(size_constraints):: self + {
        size_constraints: size_constraints,
      },
      size_constraints:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param comparison_operator (required)
        // @param size (required)
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, comparison_operator, size, text_transformation, field_to_match):: {
          rname:: rname,
          comparison_operator: comparison_operator,
          size: size,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_waf_sql_injection_match_set - https://www.terraform.io/docs/providers/aws/r/waf_sql_injection_match_set.html
    aws_waf_sql_injection_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_waf_sql_injection_match_set.%s.id}' % rname,
        sql_injection_match_tuples:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_sql_injection_match_tuples(sql_injection_match_tuples):: self + {
        sql_injection_match_tuples: sql_injection_match_tuples,
      },
      sql_injection_match_tuples:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, text_transformation, field_to_match):: {
          rname:: rname,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_waf_web_acl - https://www.terraform.io/docs/providers/aws/r/waf_web_acl.html
    aws_waf_web_acl:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      // @param default_action (required)
      new(rname, metric_name, name, default_action, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_waf_web_acl.%s.arn}' % rname,
        id:: '${aws_waf_web_acl.%s.id}' % rname,
        default_action: default_action,
        logging_configuration:: {},
        rules:: {},
      },
      with_id(id):: {
        id::: id,
      },
      default_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        new(rname, type):: {
          rname:: rname,
          type: type,
        },
      },
      with_logging_configuration(logging_configuration):: self + {
        logging_configuration: logging_configuration,
      },
      logging_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param log_destination (required)
        new(rname, log_destination):: {
          rname:: rname,
          log_destination: log_destination,
          redacted_fields:: {},
        },
        with_redacted_fields(redacted_fields):: self + {
          redacted_fields: redacted_fields,
        },
        redacted_fields:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param field_to_match (required)
          new(rname, field_to_match):: {
            rname:: rname,
            field_to_match: field_to_match,
          },
          field_to_match:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            // @param data (optional)
            new(rname, type, data=null):: {
              rname:: rname,
              type: type,
              [if data != null then 'data']: data,
            },
          },
        },
      },
      with_rules(rules):: self + {
        rules: rules,
      },
      rules:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param priority (required)
        // @param rule_id (required)
        // @param type (optional)
        new(rname, priority, rule_id, type=null):: {
          rname:: rname,
          priority: priority,
          rule_id: rule_id,
          [if type != null then 'type']: type,
          action:: {},
          override_action:: {},
        },
        with_action(action):: self + {
          action: action,
        },
        action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
        with_override_action(override_action):: self + {
          override_action: override_action,
        },
        override_action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
      },
    },
    // aws_waf_xss_match_set - https://www.terraform.io/docs/providers/aws/r/waf_xss_match_set.html
    aws_waf_xss_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_waf_xss_match_set.%s.arn}' % rname,
        id:: '${aws_waf_xss_match_set.%s.id}' % rname,
        xss_match_tuples:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_xss_match_tuples(xss_match_tuples):: self + {
        xss_match_tuples: xss_match_tuples,
      },
      xss_match_tuples:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, text_transformation, field_to_match):: {
          rname:: rname,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_wafregional_byte_match_set - https://www.terraform.io/docs/providers/aws/r/wafregional_byte_match_set.html
    aws_wafregional_byte_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_wafregional_byte_match_set.%s.id}' % rname,
        byte_match_tuple:: {},
        byte_match_tuples:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_byte_match_tuple(byte_match_tuple):: self + {
        byte_match_tuple: byte_match_tuple,
      },
      byte_match_tuple:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param positional_constraint (required)
        // @param text_transformation (required)
        // @param target_string (optional)
        // @param field_to_match (required)
        new(rname, positional_constraint, text_transformation, field_to_match, target_string=null):: {
          rname:: rname,
          positional_constraint: positional_constraint,
          text_transformation: text_transformation,
          [if target_string != null then 'target_string']: target_string,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
      with_byte_match_tuples(byte_match_tuples):: self + {
        byte_match_tuples: byte_match_tuples,
      },
      byte_match_tuples:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param positional_constraint (required)
        // @param text_transformation (required)
        // @param target_string (optional)
        // @param field_to_match (required)
        new(rname, positional_constraint, text_transformation, field_to_match, target_string=null):: {
          rname:: rname,
          positional_constraint: positional_constraint,
          text_transformation: text_transformation,
          [if target_string != null then 'target_string']: target_string,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_wafregional_geo_match_set - https://www.terraform.io/docs/providers/aws/r/wafregional_geo_match_set.html
    aws_wafregional_geo_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_wafregional_geo_match_set.%s.id}' % rname,
        geo_match_constraint:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_geo_match_constraint(geo_match_constraint):: self + {
        geo_match_constraint: geo_match_constraint,
      },
      geo_match_constraint:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param value (required)
        new(rname, type, value):: {
          rname:: rname,
          type: type,
          value: value,
        },
      },
    },
    // aws_wafregional_ipset - https://www.terraform.io/docs/providers/aws/r/wafregional_ipset.html
    aws_wafregional_ipset:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_wafregional_ipset.%s.arn}' % rname,
        id:: '${aws_wafregional_ipset.%s.id}' % rname,
        ip_set_descriptor:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_ip_set_descriptor(ip_set_descriptor):: self + {
        ip_set_descriptor: ip_set_descriptor,
      },
      ip_set_descriptor:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        // @param value (required)
        new(rname, type, value):: {
          rname:: rname,
          type: type,
          value: value,
        },
      },
    },
    // aws_wafregional_rate_based_rule - https://www.terraform.io/docs/providers/aws/r/wafregional_rate_based_rule.html
    aws_wafregional_rate_based_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param rate_key (required)
      // @param rate_limit (required)
      // @param tags (optional)
      new(rname, metric_name, name, rate_key, rate_limit, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        rate_key: rate_key,
        rate_limit: rate_limit,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_wafregional_rate_based_rule.%s.arn}' % rname,
        id:: '${aws_wafregional_rate_based_rule.%s.id}' % rname,
        predicate:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_predicate(predicate):: self + {
        predicate: predicate,
      },
      predicate:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param data_id (required)
        // @param negated (required)
        // @param type (required)
        new(rname, data_id, negated, type):: {
          rname:: rname,
          data_id: data_id,
          negated: negated,
          type: type,
        },
      },
    },
    // aws_wafregional_regex_match_set - https://www.terraform.io/docs/providers/aws/r/wafregional_regex_match_set.html
    aws_wafregional_regex_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_wafregional_regex_match_set.%s.id}' % rname,
        regex_match_tuple:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_regex_match_tuple(regex_match_tuple):: self + {
        regex_match_tuple: regex_match_tuple,
      },
      regex_match_tuple:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param regex_pattern_set_id (required)
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, regex_pattern_set_id, text_transformation, field_to_match):: {
          rname:: rname,
          regex_pattern_set_id: regex_pattern_set_id,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_wafregional_regex_pattern_set - https://www.terraform.io/docs/providers/aws/r/wafregional_regex_pattern_set.html
    aws_wafregional_regex_pattern_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param regex_pattern_strings (optional)
      new(rname, name, regex_pattern_strings=null):: {
        rname:: rname,
        name: name,
        [if regex_pattern_strings != null then 'regex_pattern_strings']: regex_pattern_strings,
        id:: '${aws_wafregional_regex_pattern_set.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_wafregional_rule - https://www.terraform.io/docs/providers/aws/r/wafregional_rule.html
    aws_wafregional_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, metric_name, name, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_wafregional_rule.%s.arn}' % rname,
        id:: '${aws_wafregional_rule.%s.id}' % rname,
        predicate:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_predicate(predicate):: self + {
        predicate: predicate,
      },
      predicate:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param data_id (required)
        // @param negated (required)
        // @param type (required)
        new(rname, data_id, negated, type):: {
          rname:: rname,
          data_id: data_id,
          negated: negated,
          type: type,
        },
      },
    },
    // aws_wafregional_rule_group - https://www.terraform.io/docs/providers/aws/r/wafregional_rule_group.html
    aws_wafregional_rule_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      new(rname, metric_name, name, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_wafregional_rule_group.%s.arn}' % rname,
        id:: '${aws_wafregional_rule_group.%s.id}' % rname,
        activated_rule:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_activated_rule(activated_rule):: self + {
        activated_rule: activated_rule,
      },
      activated_rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param priority (required)
        // @param rule_id (required)
        // @param type (optional)
        // @param action (required)
        new(rname, priority, rule_id, action, type=null):: {
          rname:: rname,
          priority: priority,
          rule_id: rule_id,
          [if type != null then 'type']: type,
          action: action,
        },
        action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
      },
    },
    // aws_wafregional_size_constraint_set - https://www.terraform.io/docs/providers/aws/r/wafregional_size_constraint_set.html
    aws_wafregional_size_constraint_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        arn:: '${aws_wafregional_size_constraint_set.%s.arn}' % rname,
        id:: '${aws_wafregional_size_constraint_set.%s.id}' % rname,
        size_constraints:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_size_constraints(size_constraints):: self + {
        size_constraints: size_constraints,
      },
      size_constraints:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param comparison_operator (required)
        // @param size (required)
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, comparison_operator, size, text_transformation, field_to_match):: {
          rname:: rname,
          comparison_operator: comparison_operator,
          size: size,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_wafregional_sql_injection_match_set - https://www.terraform.io/docs/providers/aws/r/wafregional_sql_injection_match_set.html
    aws_wafregional_sql_injection_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_wafregional_sql_injection_match_set.%s.id}' % rname,
        sql_injection_match_tuple:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_sql_injection_match_tuple(sql_injection_match_tuple):: self + {
        sql_injection_match_tuple: sql_injection_match_tuple,
      },
      sql_injection_match_tuple:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, text_transformation, field_to_match):: {
          rname:: rname,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_wafregional_web_acl - https://www.terraform.io/docs/providers/aws/r/wafregional_web_acl.html
    aws_wafregional_web_acl:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param metric_name (required)
      // @param name (required)
      // @param tags (optional)
      // @param default_action (required)
      new(rname, metric_name, name, default_action, tags=null):: {
        rname:: rname,
        metric_name: metric_name,
        name: name,
        [if tags != null then 'tags']: tags,
        arn:: '${aws_wafregional_web_acl.%s.arn}' % rname,
        id:: '${aws_wafregional_web_acl.%s.id}' % rname,
        default_action: default_action,
        logging_configuration:: {},
        rule:: {},
      },
      with_id(id):: {
        id::: id,
      },
      default_action:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param type (required)
        new(rname, type):: {
          rname:: rname,
          type: type,
        },
      },
      with_logging_configuration(logging_configuration):: self + {
        logging_configuration: logging_configuration,
      },
      logging_configuration:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param log_destination (required)
        new(rname, log_destination):: {
          rname:: rname,
          log_destination: log_destination,
          redacted_fields:: {},
        },
        with_redacted_fields(redacted_fields):: self + {
          redacted_fields: redacted_fields,
        },
        redacted_fields:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param field_to_match (required)
          new(rname, field_to_match):: {
            rname:: rname,
            field_to_match: field_to_match,
          },
          field_to_match:: {
            // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
            // @param type (required)
            // @param data (optional)
            new(rname, type, data=null):: {
              rname:: rname,
              type: type,
              [if data != null then 'data']: data,
            },
          },
        },
      },
      with_rule(rule):: self + {
        rule: rule,
      },
      rule:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param priority (required)
        // @param rule_id (required)
        // @param type (optional)
        new(rname, priority, rule_id, type=null):: {
          rname:: rname,
          priority: priority,
          rule_id: rule_id,
          [if type != null then 'type']: type,
          action:: {},
          override_action:: {},
        },
        with_action(action):: self + {
          action: action,
        },
        action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
        with_override_action(override_action):: self + {
          override_action: override_action,
        },
        override_action:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          new(rname, type):: {
            rname:: rname,
            type: type,
          },
        },
      },
    },
    // aws_wafregional_web_acl_association - https://www.terraform.io/docs/providers/aws/r/wafregional_web_acl_association.html
    aws_wafregional_web_acl_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param resource_arn (required)
      // @param web_acl_id (required)
      new(rname, resource_arn, web_acl_id):: {
        rname:: rname,
        resource_arn: resource_arn,
        web_acl_id: web_acl_id,
        id:: '${aws_wafregional_web_acl_association.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_wafregional_xss_match_set - https://www.terraform.io/docs/providers/aws/r/wafregional_xss_match_set.html
    aws_wafregional_xss_match_set:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      new(rname, name):: {
        rname:: rname,
        name: name,
        id:: '${aws_wafregional_xss_match_set.%s.id}' % rname,
        xss_match_tuple:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_xss_match_tuple(xss_match_tuple):: self + {
        xss_match_tuple: xss_match_tuple,
      },
      xss_match_tuple:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param text_transformation (required)
        // @param field_to_match (required)
        new(rname, text_transformation, field_to_match):: {
          rname:: rname,
          text_transformation: text_transformation,
          field_to_match: field_to_match,
        },
        field_to_match:: {
          // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
          // @param type (required)
          // @param data (optional)
          new(rname, type, data=null):: {
            rname:: rname,
            type: type,
            [if data != null then 'data']: data,
          },
        },
      },
    },
    // aws_worklink_fleet - https://www.terraform.io/docs/providers/aws/r/worklink_fleet.html
    aws_worklink_fleet:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param audit_stream_arn (optional)
      // @param device_ca_certificate (optional)
      // @param display_name (optional)
      // @param optimize_for_end_user_location (optional)
      new(rname, name, audit_stream_arn=null, device_ca_certificate=null, display_name=null, optimize_for_end_user_location=null):: {
        rname:: rname,
        name: name,
        [if audit_stream_arn != null then 'audit_stream_arn']: audit_stream_arn,
        [if device_ca_certificate != null then 'device_ca_certificate']: device_ca_certificate,
        [if display_name != null then 'display_name']: display_name,
        [if optimize_for_end_user_location != null then 'optimize_for_end_user_location']: optimize_for_end_user_location,
        arn:: '${aws_worklink_fleet.%s.arn}' % rname,
        company_code:: '${aws_worklink_fleet.%s.company_code}' % rname,
        created_time:: '${aws_worklink_fleet.%s.created_time}' % rname,
        id:: '${aws_worklink_fleet.%s.id}' % rname,
        last_updated_time:: '${aws_worklink_fleet.%s.last_updated_time}' % rname,
        identity_provider:: {},
        network:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_identity_provider(identity_provider):: self + {
        identity_provider: identity_provider,
      },
      identity_provider:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param saml_metadata (required)
        // @param type (required)
        new(rname, saml_metadata, type):: {
          rname:: rname,
          saml_metadata: saml_metadata,
          type: type,
        },
      },
      with_network(network):: self + {
        network: network,
      },
      network:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param security_group_ids (required)
        // @param subnet_ids (required)
        // @param vpc_id (required)
        new(rname, security_group_ids, subnet_ids, vpc_id):: {
          rname:: rname,
          security_group_ids: security_group_ids,
          subnet_ids: subnet_ids,
          vpc_id: vpc_id,
        },
      },
    },
    // aws_worklink_website_certificate_authority_association - https://www.terraform.io/docs/providers/aws/r/worklink_website_certificate_authority_association.html
    aws_worklink_website_certificate_authority_association:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param certificate (required)
      // @param fleet_arn (required)
      // @param display_name (optional)
      new(rname, certificate, fleet_arn, display_name=null):: {
        rname:: rname,
        certificate: certificate,
        fleet_arn: fleet_arn,
        [if display_name != null then 'display_name']: display_name,
        id:: '${aws_worklink_website_certificate_authority_association.%s.id}' % rname,
        website_ca_id:: '${aws_worklink_website_certificate_authority_association.%s.website_ca_id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
    // aws_workspaces_directory - https://www.terraform.io/docs/providers/aws/r/workspaces_directory.html
    aws_workspaces_directory:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param directory_id (required)
      // @param tags (optional)
      new(rname, directory_id, tags=null):: {
        rname:: rname,
        directory_id: directory_id,
        [if tags != null then 'tags']: tags,
        id:: '${aws_workspaces_directory.%s.id}' % rname,
        subnet_ids:: '${aws_workspaces_directory.%s.subnet_ids}' % rname,
        self_service_permissions:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_subnet_ids(subnet_ids):: {
        subnet_ids::: subnet_ids,
      },
      with_self_service_permissions(self_service_permissions):: self + {
        self_service_permissions: self_service_permissions,
      },
      self_service_permissions:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param change_compute_type (optional)
        // @param increase_volume_size (optional)
        // @param rebuild_workspace (optional)
        // @param restart_workspace (optional)
        // @param switch_running_mode (optional)
        new(rname, change_compute_type=null, increase_volume_size=null, rebuild_workspace=null, restart_workspace=null, switch_running_mode=null):: {
          rname:: rname,
          [if change_compute_type != null then 'change_compute_type']: change_compute_type,
          [if increase_volume_size != null then 'increase_volume_size']: increase_volume_size,
          [if rebuild_workspace != null then 'rebuild_workspace']: rebuild_workspace,
          [if restart_workspace != null then 'restart_workspace']: restart_workspace,
          [if switch_running_mode != null then 'switch_running_mode']: switch_running_mode,
        },
      },
    },
    // aws_workspaces_ip_group - https://www.terraform.io/docs/providers/aws/r/workspaces_ip_group.html
    aws_workspaces_ip_group:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param name (required)
      // @param description (optional)
      // @param tags (optional)
      new(rname, name, description=null, tags=null):: {
        rname:: rname,
        name: name,
        [if description != null then 'description']: description,
        [if tags != null then 'tags']: tags,
        id:: '${aws_workspaces_ip_group.%s.id}' % rname,
        rules:: {},
      },
      with_id(id):: {
        id::: id,
      },
      with_rules(rules):: self + {
        rules: rules,
      },
      rules:: {
        // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
        // @param source (required)
        // @param description (optional)
        new(rname, source, description=null):: {
          rname:: rname,
          source: source,
          [if description != null then 'description']: description,
        },
      },
    },
    // aws_xray_sampling_rule - https://www.terraform.io/docs/providers/aws/r/xray_sampling_rule.html
    aws_xray_sampling_rule:: {
      // @param rname (required) Workaround to build terraform interpolatable strings for attribute references.
      // @param fixed_rate (required)
      // @param host (required)
      // @param http_method (required)
      // @param priority (required)
      // @param reservoir_size (required)
      // @param resource_arn (required)
      // @param service_name (required)
      // @param service_type (required)
      // @param url_path (required)
      // @param version (required)
      // @param attributes (optional)
      // @param rule_name (optional)
      new(rname, fixed_rate, host, http_method, priority, reservoir_size, resource_arn, service_name, service_type, url_path, version, attributes=null, rule_name=null):: {
        rname:: rname,
        fixed_rate: fixed_rate,
        host: host,
        http_method: http_method,
        priority: priority,
        reservoir_size: reservoir_size,
        resource_arn: resource_arn,
        service_name: service_name,
        service_type: service_type,
        url_path: url_path,
        version: version,
        [if attributes != null then 'attributes']: attributes,
        [if rule_name != null then 'rule_name']: rule_name,
        arn:: '${aws_xray_sampling_rule.%s.arn}' % rname,
        id:: '${aws_xray_sampling_rule.%s.id}' % rname,
      },
      with_id(id):: {
        id::: id,
      },
    },
  },
}